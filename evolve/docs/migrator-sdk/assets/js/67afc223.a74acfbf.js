"use strict";(self.webpackChunkmigrator_sdk_jvm_doco=self.webpackChunkmigrator_sdk_jvm_doco||[]).push([[5953],{3905:function(e,t,r){r.d(t,{Zo:function(){return c},kt:function(){return d}});var n=r(7294);function a(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function o(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function i(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?o(Object(r),!0).forEach((function(t){a(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):o(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function s(e,t){if(null==e)return{};var r,n,a=function(e,t){if(null==e)return{};var r,n,a={},o=Object.keys(e);for(n=0;n<o.length;n++)r=o[n],t.indexOf(r)>=0||(a[r]=e[r]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(n=0;n<o.length;n++)r=o[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(a[r]=e[r])}return a}var u=n.createContext({}),l=function(e){var t=n.useContext(u),r=t;return e&&(r="function"==typeof e?e(t):i(i({},t),e)),r},c=function(e){var t=l(e.components);return n.createElement(u.Provider,{value:t},e.children)},m="mdxType",p={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},f=n.forwardRef((function(e,t){var r=e.components,a=e.mdxType,o=e.originalType,u=e.parentName,c=s(e,["components","mdxType","originalType","parentName"]),m=l(r),f=a,d=m["".concat(u,".").concat(f)]||m[f]||p[f]||o;return r?n.createElement(d,i(i({ref:t},c),{},{components:r})):n.createElement(d,i({ref:t},c))}));function d(e,t){var r=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=r.length,i=new Array(o);i[0]=f;var s={};for(var u in t)hasOwnProperty.call(t,u)&&(s[u]=t[u]);s.originalType=e,s[m]="string"==typeof e?e:a,i[1]=s;for(var l=2;l<o;l++)i[l]=r[l];return n.createElement.apply(null,i)}return n.createElement.apply(null,r)}f.displayName="MDXCreateElement"},5162:function(e,t,r){r.d(t,{Z:function(){return i}});var n=r(7294),a=r(6010),o={tabItem:"tabItem_Ymn6"};function i(e){var t=e.children,r=e.hidden,i=e.className;return n.createElement("div",{role:"tabpanel",className:(0,a.Z)(o.tabItem,i),hidden:r},t)}},4866:function(e,t,r){r.d(t,{Z:function(){return y}});var n=r(7462),a=r(7294),o=r(6010),i=r(2466),s=r(6550),u=r(1980),l=r(7392),c=r(12);function m(e){return function(e){return a.Children.map(e,(function(e){if((0,a.isValidElement)(e)&&"value"in e.props)return e;throw new Error("Docusaurus error: Bad <Tabs> child <"+("string"==typeof e.type?e.type:e.type.name)+'>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.')}))}(e).map((function(e){var t=e.props;return{value:t.value,label:t.label,attributes:t.attributes,default:t.default}}))}function p(e){var t=e.values,r=e.children;return(0,a.useMemo)((function(){var e=null!=t?t:m(r);return function(e){var t=(0,l.l)(e,(function(e,t){return e.value===t.value}));if(t.length>0)throw new Error('Docusaurus error: Duplicate values "'+t.map((function(e){return e.value})).join(", ")+'" found in <Tabs>. Every value needs to be unique.')}(e),e}),[t,r])}function f(e){var t=e.value;return e.tabValues.some((function(e){return e.value===t}))}function d(e){var t=e.queryString,r=void 0!==t&&t,n=e.groupId,o=(0,s.k6)(),i=function(e){var t=e.queryString,r=void 0!==t&&t,n=e.groupId;if("string"==typeof r)return r;if(!1===r)return null;if(!0===r&&!n)throw new Error('Docusaurus error: The <Tabs> component groupId prop is required if queryString=true, because this value is used as the search param name. You can also provide an explicit value such as queryString="my-search-param".');return null!=n?n:null}({queryString:r,groupId:n});return[(0,u._X)(i),(0,a.useCallback)((function(e){if(i){var t=new URLSearchParams(o.location.search);t.set(i,e),o.replace(Object.assign({},o.location,{search:t.toString()}))}}),[i,o])]}function b(e){var t,r,n,o,i=e.defaultValue,s=e.queryString,u=void 0!==s&&s,l=e.groupId,m=p(e),b=(0,a.useState)((function(){return function(e){var t,r=e.defaultValue,n=e.tabValues;if(0===n.length)throw new Error("Docusaurus error: the <Tabs> component requires at least one <TabItem> children component");if(r){if(!f({value:r,tabValues:n}))throw new Error('Docusaurus error: The <Tabs> has a defaultValue "'+r+'" but none of its children has the corresponding value. Available values are: '+n.map((function(e){return e.value})).join(", ")+". If you intend to show no default tab, use defaultValue={null} instead.");return r}var a=null!=(t=n.find((function(e){return e.default})))?t:n[0];if(!a)throw new Error("Unexpected error: 0 tabValues");return a.value}({defaultValue:i,tabValues:m})})),k=b[0],v=b[1],g=d({queryString:u,groupId:l}),w=g[0],h=g[1],y=(t=function(e){return e?"docusaurus.tab."+e:null}({groupId:l}.groupId),r=(0,c.Nk)(t),n=r[0],o=r[1],[n,(0,a.useCallback)((function(e){t&&o.set(e)}),[t,o])]),N=y[0],I=y[1],T=function(){var e=null!=w?w:N;return f({value:e,tabValues:m})?e:null}();return(0,a.useLayoutEffect)((function(){T&&v(T)}),[T]),{selectedValue:k,selectValue:(0,a.useCallback)((function(e){if(!f({value:e,tabValues:m}))throw new Error("Can't select invalid tab value="+e);v(e),h(e),I(e)}),[h,I,m]),tabValues:m}}var k=r(2389),v={tabList:"tabList__CuJ",tabItem:"tabItem_LNqP"};function g(e){var t=e.className,r=e.block,s=e.selectedValue,u=e.selectValue,l=e.tabValues,c=[],m=(0,i.o5)().blockElementScrollPositionUntilNextRender,p=function(e){var t=e.currentTarget,r=c.indexOf(t),n=l[r].value;n!==s&&(m(t),u(n))},f=function(e){var t,r=null;switch(e.key){case"Enter":p(e);break;case"ArrowRight":var n,a=c.indexOf(e.currentTarget)+1;r=null!=(n=c[a])?n:c[0];break;case"ArrowLeft":var o,i=c.indexOf(e.currentTarget)-1;r=null!=(o=c[i])?o:c[c.length-1]}null==(t=r)||t.focus()};return a.createElement("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,o.Z)("tabs",{"tabs--block":r},t)},l.map((function(e){var t=e.value,r=e.label,i=e.attributes;return a.createElement("li",(0,n.Z)({role:"tab",tabIndex:s===t?0:-1,"aria-selected":s===t,key:t,ref:function(e){return c.push(e)},onKeyDown:f,onClick:p},i,{className:(0,o.Z)("tabs__item",v.tabItem,null==i?void 0:i.className,{"tabs__item--active":s===t})}),null!=r?r:t)})))}function w(e){var t=e.lazy,r=e.children,n=e.selectedValue;if(r=Array.isArray(r)?r:[r],t){var o=r.find((function(e){return e.props.value===n}));return o?(0,a.cloneElement)(o,{className:"margin-top--md"}):null}return a.createElement("div",{className:"margin-top--md"},r.map((function(e,t){return(0,a.cloneElement)(e,{key:t,hidden:e.props.value!==n})})))}function h(e){var t=b(e);return a.createElement("div",{className:(0,o.Z)("tabs-container",v.tabList)},a.createElement(g,(0,n.Z)({},e,t)),a.createElement(w,(0,n.Z)({},e,t)))}function y(e){var t=(0,k.Z)();return a.createElement(h,(0,n.Z)({key:String(t)},e))}},4524:function(e,t,r){r.r(t),r.d(t,{assets:function(){return p},contentTitle:function(){return c},default:function(){return k},frontMatter:function(){return l},metadata:function(){return m},toc:function(){return f}});var n=r(7462),a=r(3366),o=(r(7294),r(3905)),i=r(4866),s=r(5162),u=["components"],l={id:"metrics-for-issues",title:"Metrics for Issues"},c=void 0,m={unversionedId:"metrics-for-issues",id:"metrics-for-issues",title:"Metrics for Issues",description:"Motivation",source:"@site/docs/metrics-for-issues.mdx",sourceDirName:".",slug:"/metrics-for-issues",permalink:"/evolve/docs/migrator-sdk/next/metrics-for-issues",draft:!1,tags:[],version:"current",frontMatter:{id:"metrics-for-issues",title:"Metrics for Issues"},sidebar:"someSidebar",previous:{title:"Network Simplifier",permalink:"/evolve/docs/migrator-sdk/next/network-simplifier"},next:{title:"Phase Consistency Processor",permalink:"/evolve/docs/migrator-sdk/next/phase-consistency"}},p={},f=[{value:"Motivation",id:"motivation",level:2},{value:"Network Container Metrics for Issues",id:"network-container-metrics-for-issues",level:2}],d={toc:f},b="wrapper";function k(e){var t=e.components,r=(0,a.Z)(e,u);return(0,o.kt)(b,(0,n.Z)({},d,r,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h2",{id:"motivation"},"Motivation"),(0,o.kt)("p",null,"Issue trackers are useful for collecting and displaying problems with source data, but their usefulness is limited if these issues are not saved somewhere after\nthe run of an ingestor. This is why we added the ability for issue trackers to add metrics to the metrics database that correspond to each issue."),(0,o.kt)("h2",{id:"network-container-metrics-for-issues"},"Network Container Metrics for Issues"),(0,o.kt)("p",null,"Network container metrics store quantitative metrics for network containers, e.g. feeders and substations. By connecting an ",(0,o.kt)("inlineCode",{parentName:"p"},"IssueTracker")," to a ",(0,o.kt)("inlineCode",{parentName:"p"},"NetworkMetrics"),"\nobject and supplying a ",(0,o.kt)("inlineCode",{parentName:"p"},"metricName"),", a metric with that name will be incremented each time the ",(0,o.kt)("inlineCode",{parentName:"p"},"track()")," method is called for that ",(0,o.kt)("inlineCode",{parentName:"p"},"IssueTracker"),". By default,\nthis metric will only be incremented for the ",(0,o.kt)("inlineCode",{parentName:"p"},"TotalNetworkContainer"),", but you may supply additional ",(0,o.kt)("inlineCode",{parentName:"p"},"NetworkContainer"),"s in the ",(0,o.kt)("inlineCode",{parentName:"p"},"networkContainers")," parameter."),(0,o.kt)(i.Z,{groupId:"code-example",defaultValue:"kotlin",values:[{label:"Kotlin",value:"kotlin"}],mdxType:"Tabs"},(0,o.kt)(s.Z,{value:"kotlin",mdxType:"TabItem"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-kotlin"},'import com.zepben.ewb.cim.iec61970.base.core.Feeder\nimport com.zepben.ewb.metrics.NetworkMetrics\nimport com.zepben.ewb.metrics.TotalNetworkContainer\nimport com.zepben.ewb.metrics.toNetworkContainer\nimport com.zepben.migrator.issues.IssueTracker\nimport org.slf4j.Logger\nimport org.slf4j.LoggerFactory\n\nval logger: Logger = LoggerFactory.getLogger("Example")\n\nfun main() {\n    val networkMetrics = NetworkMetrics()\n    val exampleIssue = IssueTracker(logger, networkMetrics = networkMetrics, metricName = "Example Issue") { "issue was tracked $it times" }\n    val feeder = Feeder("FDR123").apply { name = "Feeder 123" }\n\n    exampleIssue.track("This message won\'t be saved to the network metrics")\n    exampleIssue.track("Neither will this one", networkContainers = listOf(feeder.toNetworkContainer()))\n\n    println("Number of times example issue was tracked in total: ${networkMetrics[TotalNetworkContainer]["Example Issue"]}")\n    println("Number of times example issue was tracked for the feeder: ${networkMetrics[feeder.toNetworkContainer()]["Example Issue"]}")\n}\n')))),(0,o.kt)("p",null,"For issue tracker groups, all issue trackers within the group can be assigned a common ",(0,o.kt)("inlineCode",{parentName:"p"},"NetworkMetrics")," and a default name with a single call to\n",(0,o.kt)("inlineCode",{parentName:"p"},"setNetworkMetrics()"),". The property name for each issue tracker within the group will be used as their default name:"),(0,o.kt)(i.Z,{groupId:"code-example",defaultValue:"kotlin",values:[{label:"Kotlin",value:"kotlin"}],mdxType:"Tabs"},(0,o.kt)(s.Z,{value:"kotlin",mdxType:"TabItem"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-kotlin"},'import com.zepben.ewb.cim.iec61970.base.core.Feeder\nimport com.zepben.ewb.metrics.NetworkMetrics\nimport com.zepben.ewb.metrics.TotalNetworkContainer\nimport com.zepben.ewb.metrics.toNetworkContainer\nimport com.zepben.migrator.issues.IssueTracker\nimport com.zepben.migrator.issues.IssueTrackerGroup\nimport org.slf4j.Logger\nimport org.slf4j.LoggerFactory\n\nval logger: Logger = LoggerFactory.getLogger("Example")\n\nfun main() {\n    val networkMetrics = NetworkMetrics()\n    val exampleIssueTrackerGroup = object : IssueTrackerGroup() {\n        val exampleIssue = IssueTracker(logger) { "issue was tracked $it times" }\n    }.apply { setNetworkMetrics(networkMetrics) }\n    val feeder = Feeder("FDR123").apply { name = "Feeder 123" }\n\n    exampleIssueTrackerGroup.exampleIssue.track("This message won\'t be saved to the network metrics")\n    exampleIssueTrackerGroup.exampleIssue.track("Neither will this one", networkContainers = listOf(feeder.toNetworkContainer()))\n\n    println("Number of times example issue was tracked in total: ${networkMetrics[TotalNetworkContainer]["exampleIssue"]}")\n    println("Number of times example issue was tracked for the feeder: ${networkMetrics[feeder.toNetworkContainer()]["exampleIssue"]}")\n}\n')))))}k.isMDXComponent=!0}}]);