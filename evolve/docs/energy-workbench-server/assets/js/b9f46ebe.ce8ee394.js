"use strict";(self.webpackChunkenergy_worbench_server_doco=self.webpackChunkenergy_worbench_server_doco||[]).push([[39411],{3905:function(e,t,r){r.d(t,{Zo:function(){return u},kt:function(){return f}});var n=r(67294);function i(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function o(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function a(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?o(Object(r),!0).forEach((function(t){i(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):o(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function s(e,t){if(null==e)return{};var r,n,i=function(e,t){if(null==e)return{};var r,n,i={},o=Object.keys(e);for(n=0;n<o.length;n++)r=o[n],t.indexOf(r)>=0||(i[r]=e[r]);return i}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(n=0;n<o.length;n++)r=o[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(i[r]=e[r])}return i}var c=n.createContext({}),l=function(e){var t=n.useContext(c),r=t;return e&&(r="function"==typeof e?e(t):a(a({},t),e)),r},u=function(e){var t=l(e.components);return n.createElement(c.Provider,{value:t},e.children)},p="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},m=n.forwardRef((function(e,t){var r=e.components,i=e.mdxType,o=e.originalType,c=e.parentName,u=s(e,["components","mdxType","originalType","parentName"]),p=l(r),m=i,f=p["".concat(c,".").concat(m)]||p[m]||d[m]||o;return r?n.createElement(f,a(a({ref:t},u),{},{components:r})):n.createElement(f,a({ref:t},u))}));function f(e,t){var r=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var o=r.length,a=new Array(o);a[0]=m;var s={};for(var c in t)hasOwnProperty.call(t,c)&&(s[c]=t[c]);s.originalType=e,s[p]="string"==typeof e?e:i,a[1]=s;for(var l=2;l<o;l++)a[l]=r[l];return n.createElement.apply(null,a)}return n.createElement.apply(null,r)}m.displayName="MDXCreateElement"},76949:function(e,t,r){r.r(t),r.d(t,{assets:function(){return u},contentTitle:function(){return c},default:function(){return f},frontMatter:function(){return s},metadata:function(){return l},toc:function(){return p}});var n=r(87462),i=r(63366),o=(r(67294),r(3905)),a=["components"],s={id:"grpc",title:"gRPC Services"},c=void 0,l={unversionedId:"grpc",id:"version-3.0.1/grpc",title:"gRPC Services",description:"Energy Workbench offers several gRPC services for accessing the underlying model hosted by the server.",source:"@site/versioned_docs/version-3.0.1/grpc.mdx",sourceDirName:".",slug:"/grpc",permalink:"/evolve/docs/energy-workbench-server/3.0.1/grpc",draft:!1,tags:[],version:"3.0.1",frontMatter:{id:"grpc",title:"gRPC Services"}},u={},p=[{value:"Common across all services",id:"common-across-all-services",level:2},{value:"getIdentifiedObjects",id:"getidentifiedobjects",level:3},{value:"NetworkConsumerService",id:"networkconsumerservice",level:2},{value:"getNetworkHierarchy",id:"getnetworkhierarchy",level:3},{value:"getEquipmentForContainers",id:"getequipmentforcontainers",level:3},{value:"getCurrentEquipmentForFeeder",id:"getcurrentequipmentforfeeder",level:3},{value:"getEquipmentForRestriction",id:"getequipmentforrestriction",level:3},{value:"getTerminalsForNode",id:"getterminalsfornode",level:3},{value:"CustomerConsumerService",id:"customerconsumerservice",level:2},{value:"getCustomersForContainer",id:"getcustomersforcontainer",level:3},{value:"DiagramConsumerService",id:"diagramconsumerservice",level:2},{value:"getDiagramObjects",id:"getdiagramobjects",level:3}],d={toc:p},m="wrapper";function f(e){var t=e.components,r=(0,i.Z)(e,a);return(0,o.kt)(m,(0,n.Z)({},d,r,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("p",null,"Energy Workbench offers several gRPC services for accessing the underlying model hosted by the server.\nThese interfaces are defined with scale and speed in mind, and allow consumption of large amounts of data from the server in an efficient manner.\nThe EWB ",(0,o.kt)("a",{parentName:"p",href:"https://zepben.github.io/evolve/docs/jvm-sdk"},"Java")," and ",(0,o.kt)("a",{parentName:"p",href:"https://zepben.github.io/evolve/docs/python-sdk"},"Python")," SDKs provide consumer clients\nthat do the heavy lifting of interacting with these gRPC services for you."),(0,o.kt)("p",null,"Currently there are 3 available services:"),(0,o.kt)("ol",null,(0,o.kt)("li",{parentName:"ol"},"NetworkConsumerService"),(0,o.kt)("li",{parentName:"ol"},"CustomerConsumerService"),(0,o.kt)("li",{parentName:"ol"},"DiagramConsumerService")),(0,o.kt)("p",null,"Each service is described below. For examples of using these services, see the corresponding documentation in the available SDKs."),(0,o.kt)("admonition",{type:"warning"},(0,o.kt)("p",{parentName:"admonition"},"Interacting directly with the gRPC services is not supported. Please use the SDKs and raise a support request if functionality is not present in the SDK.")),(0,o.kt)("h2",{id:"common-across-all-services"},"Common across all services"),(0,o.kt)("h3",{id:"getidentifiedobjects"},"getIdentifiedObjects"),(0,o.kt)("p",null,"Returns a stream of IdentifiedObjects from the service, corresponding to the mRIDs provided in the request. This can be used for retrieving individual\nobjects and will return a oneof set with the corresponding type."),(0,o.kt)("h2",{id:"networkconsumerservice"},"NetworkConsumerService"),(0,o.kt)("p",null,"The ",(0,o.kt)("inlineCode",{parentName:"p"},"NetworkConsumerService")," is responsible for retrieving network (e.g hierarchy, equipment, connectivity) data from the EWB server."),(0,o.kt)("p",null,"See relevant protobuf definitions ",(0,o.kt)("a",{parentName:"p",href:"https://github.com/zepben/evolve-grpc/tree/main/proto/zepben/protobuf/nc"},"here")),(0,o.kt)("h3",{id:"getnetworkhierarchy"},"getNetworkHierarchy"),(0,o.kt)("p",null,"Returns a response containing all hierarchy and EquipmentContainer components of the network. This will include:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"- GeographicalRegions\n- SubGeographicalRegions\n- Substations\n- Feeders\n- Circuits (if sub-transmission is available)\n- Loops (if sub-transmission is available)\n")),(0,o.kt)("h3",{id:"getequipmentforcontainers"},"getEquipmentForContainers"),(0,o.kt)("p",null,"Returns a stream of network related ",(0,o.kt)("inlineCode",{parentName:"p"},"IdentifiedObjects")," that belong to the ",(0,o.kt)("inlineCode",{parentName:"p"},"EquipmentContainer")," mRIDs provided in the request for the normal state of the network,\nas well as downstream/upstream containers if requested."),(0,o.kt)("h3",{id:"getcurrentequipmentforfeeder"},"getCurrentEquipmentForFeeder"),(0,o.kt)("p",null,"Returns a stream of network related IdentifiedObjects that belong to the ",(0,o.kt)("inlineCode",{parentName:"p"},"EquipmentContainer")," mRIDs provided in the request for the current state of the network,\nas well as downstream/upstream containers if requested."),(0,o.kt)("h3",{id:"getequipmentforrestriction"},"getEquipmentForRestriction"),(0,o.kt)("p",null,"Returns a stream of ",(0,o.kt)("inlineCode",{parentName:"p"},"IdentifiedObjects")," that belong to the ",(0,o.kt)("inlineCode",{parentName:"p"},"OperationalRestriction")," mRID provided in the request."),(0,o.kt)("h3",{id:"getterminalsfornode"},"getTerminalsForNode"),(0,o.kt)("p",null,"Returns a stream of ",(0,o.kt)("inlineCode",{parentName:"p"},"Terminals")," that belong to the ",(0,o.kt)("inlineCode",{parentName:"p"},"ConnectivityNode")," represented by the mRID provided in the request."),(0,o.kt)("h2",{id:"customerconsumerservice"},"CustomerConsumerService"),(0,o.kt)("p",null,"The ",(0,o.kt)("inlineCode",{parentName:"p"},"CustomerConsumerService")," is responsible for retrieving customer data from the EWB server."),(0,o.kt)("h3",{id:"getcustomersforcontainer"},"getCustomersForContainer"),(0,o.kt)("p",null,"Returns a stream of customer related ",(0,o.kt)("inlineCode",{parentName:"p"},"IdentifiedObjects")," that belong to the ",(0,o.kt)("inlineCode",{parentName:"p"},"EquipmentContainer")," mRIDs provided in the request for the normal state of the network."),(0,o.kt)("h2",{id:"diagramconsumerservice"},"DiagramConsumerService"),(0,o.kt)("h3",{id:"getdiagramobjects"},"getDiagramObjects"),(0,o.kt)("p",null,"Returns a stream of ",(0,o.kt)("inlineCode",{parentName:"p"},"DiagramObjects")," related for the requested mRIDs provided in the request. Note this will call ",(0,o.kt)("inlineCode",{parentName:"p"},"DiagramService.getDiagramObjects()"),"\nto fetch the relevant DiagramObjects for the given mRID. See the documentation for that function for details."))}f.isMDXComponent=!0}}]);