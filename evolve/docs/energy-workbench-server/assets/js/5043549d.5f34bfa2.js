"use strict";(self.webpackChunkenergy_worbench_server_doco=self.webpackChunkenergy_worbench_server_doco||[]).push([[29801],{3905:function(e,t,n){n.d(t,{Zo:function(){return p},kt:function(){return h}});var a=n(67294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function l(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function o(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},i=Object.keys(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var d=a.createContext({}),s=function(e){var t=a.useContext(d),n=t;return e&&(n="function"==typeof e?e(t):l(l({},t),e)),n},p=function(e){var t=s(e.components);return a.createElement(d.Provider,{value:t},e.children)},m="mdxType",u={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},c=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,i=e.originalType,d=e.parentName,p=o(e,["components","mdxType","originalType","parentName"]),m=s(n),c=r,h=m["".concat(d,".").concat(c)]||m[c]||u[c]||i;return n?a.createElement(h,l(l({ref:t},p),{},{components:n})):a.createElement(h,l({ref:t},p))}));function h(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var i=n.length,l=new Array(i);l[0]=c;var o={};for(var d in t)hasOwnProperty.call(t,d)&&(o[d]=t[d]);o.originalType=e,o[m]="string"==typeof e?e:r,l[1]=o;for(var s=2;s<i;s++)l[s]=n[s];return a.createElement.apply(null,l)}return a.createElement.apply(null,n)}c.displayName="MDXCreateElement"},26279:function(e,t,n){n.r(t),n.d(t,{assets:function(){return p},contentTitle:function(){return d},default:function(){return h},frontMatter:function(){return o},metadata:function(){return s},toc:function(){return m}});var a=n(87462),r=n(63366),i=(n(67294),n(3905)),l=["components"],o={id:"graphql",title:"GraphQL API"},d=void 0,s={unversionedId:"graphql",id:"graphql",title:"GraphQL API",description:"The Energy Workbench Server also offers limited support for GraphQL queries.",source:"@site/docs/graphql.md",sourceDirName:".",slug:"/graphql",permalink:"/evolve/docs/energy-workbench-server/next/graphql",draft:!1,tags:[],version:"current",frontMatter:{id:"graphql",title:"GraphQL API"},sidebar:"sidebar",previous:{title:"Routes",permalink:"/evolve/docs/energy-workbench-server/next/routes"},next:{title:"API",permalink:"/evolve/docs/energy-workbench-server/next/api"}},p={},m=[{value:"Getting started with GraphQL",id:"getting-started-with-graphql",level:2},{value:"GraphQL Queries",id:"graphql-queries",level:3},{value:"FindIdentifiedObjectCriteriaInput fields",id:"findidentifiedobjectcriteriainput-fields",level:4},{value:"NameSearchInput fields",id:"namesearchinput-fields",level:4},{value:"NameOrMRIDInput fields",id:"nameormridinput-fields",level:4},{value:"IsolationQueryExtent fields",id:"isolationqueryextent-fields",level:4},{value:"Query notes",id:"query-notes",level:2},{value:"getUnknownConnectivityEnergyConsumers",id:"getunknownconnectivityenergyconsumers",level:3},{value:"getSupplyingTransformers",id:"getsupplyingtransformers",level:3},{value:"Other GraphQL features",id:"other-graphql-features",level:2},{value:"Meta fields",id:"meta-fields",level:3},{value:"Inline fragments",id:"inline-fragments",level:3},{value:"Bounding Boxes",id:"bounding-boxes",level:3},{value:"Polygon",id:"polygon",level:3},{value:"Example queries",id:"example-queries",level:2}],u={toc:m},c="wrapper";function h(e){var t=e.components,n=(0,r.Z)(e,l);return(0,i.kt)(c,(0,a.Z)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("p",null,"The Energy Workbench Server also offers limited support for GraphQL queries.\nThis documentation only provides a basic overview - more information on GraphQL can be found at ",(0,i.kt)("a",{parentName:"p",href:"https://graphql.org/learn/"},"https://graphql.org/learn/"),"."),(0,i.kt)("h2",{id:"getting-started-with-graphql"},"Getting started with GraphQL"),(0,i.kt)("p",null,"The Energy Workbench Server GraphQL endpoint provides its own documentation of the queries and fields available in its schema.\nSome API development tools, such as ",(0,i.kt)("a",{parentName:"p",href:"https://insomnia.rest/download"},"Insomnia"),", allow you to view this schema as you build your queries.\nUsing one of these tools is strongly advised to allow full use of the GraphQL functionality, as this page only covers the basics."),(0,i.kt)("p",null,"There are two GraphQL endpoints:"),(0,i.kt)("table",null,(0,i.kt)("thead",{parentName:"table"},(0,i.kt)("tr",{parentName:"thead"},(0,i.kt)("th",{parentName:"tr",align:"left"},"Type"),(0,i.kt)("th",{parentName:"tr",align:"left"},"Path"),(0,i.kt)("th",{parentName:"tr",align:"left"},"Description"))),(0,i.kt)("tbody",{parentName:"table"},(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:"left"},"POST"),(0,i.kt)("td",{parentName:"tr",align:"left"},"/ewb/api/graphql"),(0,i.kt)("td",{parentName:"tr",align:"left"},"The endpoint for all network or diagram related GraphQL queries.")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:"left"},"POST"),(0,i.kt)("td",{parentName:"tr",align:"left"},"/ewb/api/graphql/customers"),(0,i.kt)("td",{parentName:"tr",align:"left"},"Endpoint for customer data - any type that is captured by the ",(0,i.kt)("inlineCode",{parentName:"td"},"CustomerService"),".")))),(0,i.kt)("p",null,"This endpoint is also composed around the ",(0,i.kt)("a",{parentName:"p",href:"https://zepben.github.io/evolve/docs/cim/evolve"},"Evolve CIM Profile"),". As such, the queries below will return objects from this profile."),(0,i.kt)("h3",{id:"graphql-queries"},"GraphQL Queries"),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Available on the /ewb/api/graphql endpoint:")),(0,i.kt)("p",null,"Lookup queries:"),(0,i.kt)("table",null,(0,i.kt)("thead",{parentName:"table"},(0,i.kt)("tr",{parentName:"thead"},(0,i.kt)("th",{parentName:"tr",align:"left"},"Query"),(0,i.kt)("th",{parentName:"tr",align:"left"},"Description"))),(0,i.kt)("tbody",{parentName:"table"},(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:"left"},(0,i.kt)("inlineCode",{parentName:"td"},"getIdentifiedObject(mRID: string)")),(0,i.kt)("td",{parentName:"tr",align:"left"},"Request an ",(0,i.kt)("a",{parentName:"td",href:"https://zepben.github.io/evolve/docs/cim/evolve/IEC61970/Base/Core/IdentifiedObject"},"IdentifiedObject")," by mRID.")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:"left"},(0,i.kt)("inlineCode",{parentName:"td"},"getIdentifiedObjects(mRIDs: [string])")),(0,i.kt)("td",{parentName:"tr",align:"left"},"Request many ",(0,i.kt)("a",{parentName:"td",href:"https://zepben.github.io/evolve/docs/cim/evolve/IEC61970/Base/Core/IdentifiedObject"},"IdentifiedObjects")," by their mRID. The maximum number that can be requested per query is 100. If the list contains more than this the response will be truncated to the first 100 MRIDs that are found. If a requested MRID cannot be found it will be ignored and will not cause an error.")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:"left"},(0,i.kt)("inlineCode",{parentName:"td"},"findIdentifiedObjects(criteria: [FindIdentifiedObjectCriteriaInput])")),(0,i.kt)("td",{parentName:"tr",align:"left"},"Find all ",(0,i.kt)("a",{parentName:"td",href:"https://zepben.github.io/evolve/docs/cim/evolve/IEC61970/Base/Core/IdentifiedObject"},"IdentifiedObjects")," that match the provided criteria. Available criteria are listed below.")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:"left"},(0,i.kt)("inlineCode",{parentName:"td"},"findIdentifiedObjectsByName(criteria: [NameSearchInput], includeClasses: [string])")),(0,i.kt)("td",{parentName:"tr",align:"left"},"Find all ",(0,i.kt)("a",{parentName:"td",href:"https://zepben.github.io/evolve/docs/cim/evolve/IEC61970/Base/Core/IdentifiedObject"},"IdentifiedObjects")," that match the provided name search criteria. Available criteria are listed below.")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:"left"},(0,i.kt)("inlineCode",{parentName:"td"},"getAssetInfo(types: [string])")),(0,i.kt)("td",{parentName:"tr",align:"left"},"Retrieve all ",(0,i.kt)("a",{parentName:"td",href:"https://zepben.github.io/evolve/docs/cim/evolve/IEC61968/Assets/AssetInfo"},"AssetInfo")," and ",(0,i.kt)("a",{parentName:"td",href:"https://zepben.github.io/evolve/docs/cim/evolve/IEC61970/Base/Wires/PerLengthLineParameter"},"PerLengthLineParameter")," by class type. ",(0,i.kt)("inlineCode",{parentName:"td"},"types")," must be valid descendant classes of ",(0,i.kt)("inlineCode",{parentName:"td"},"AssetInfo")," or ",(0,i.kt)("inlineCode",{parentName:"td"},"PerLengthLineParameter"),".")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:"left"},(0,i.kt)("inlineCode",{parentName:"td"},"getNetworkHierarchy()")),(0,i.kt)("td",{parentName:"tr",align:"left"},"Retrieve the network hierarchy of the currently running server, containing the ",(0,i.kt)("inlineCode",{parentName:"td"},"GeographicalRegions"),", ",(0,i.kt)("inlineCode",{parentName:"td"},"Circuits"),", ",(0,i.kt)("inlineCode",{parentName:"td"},"Loops"),", and down to the ",(0,i.kt)("inlineCode",{parentName:"td"},"LvFeeders"),".")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:"left"},(0,i.kt)("inlineCode",{parentName:"td"},"getMetadata()")),(0,i.kt)("td",{parentName:"tr",align:"left"},"Retrieve the metadata for the currently running network, including the running server and version, plus the data sources used to produce the model.")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:"left"},(0,i.kt)("inlineCode",{parentName:"td"},"getGeoViewConfig()")),(0,i.kt)("td",{parentName:"tr",align:"left"},"Retrieve the GeoView configuration for this server. Contains zoom and visibility rules for the map.")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:"left"},(0,i.kt)("inlineCode",{parentName:"td"},"getPublicGeoViewConfig()")),(0,i.kt)("td",{parentName:"tr",align:"left"},"Retrieve the GeoView configuration for the public map tile endpoint, if enabled. Contains zoom and visibility rules for the public map if enabled, otherwise returns null.")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:"left"},(0,i.kt)("inlineCode",{parentName:"td"},"getNetworkModels()")),(0,i.kt)("td",{parentName:"tr",align:"left"},"Retrieve the network-model databases available to be loaded on this server.")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:"left"},(0,i.kt)("inlineCode",{parentName:"td"},"getSupplyingTransformers(criteria: [NameOrMRIDInput])")),(0,i.kt)("td",{parentName:"tr",align:"left"},"Find all supplying transformer that matches the provided criteria. The supplying transformers for a given object will be all immediate upstream transformers.")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:"left"},(0,i.kt)("inlineCode",{parentName:"td"},"getUnknownConnectivityEnergyConsumers(mRIDs: [string])")),(0,i.kt)("td",{parentName:"tr",align:"left"},"Find all EnergyConsumers connected to an EquivalentBranch which is attached to the provided EquipmentContainer mRIDs. This will typically be all EnergyConsumers where their exact connectivity in the network is unknown, and so they have been attached at the head of the Feeder or LvFeeder.")))),(0,i.kt)("p",null,"Network tracing queries:"),(0,i.kt)("table",null,(0,i.kt)("thead",{parentName:"table"},(0,i.kt)("tr",{parentName:"thead"},(0,i.kt)("th",{parentName:"tr",align:"left"},"Query"),(0,i.kt)("th",{parentName:"tr",align:"left"},"Description"))),(0,i.kt)("tbody",{parentName:"table"},(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:"left"},(0,i.kt)("inlineCode",{parentName:"td"},"getDownstreamEquipmentTree(mRID: string, includeFilter: [string], excludeFilter: [string], networkState: [NetworkState])")),(0,i.kt)("td",{parentName:"tr",align:"left"},"Request a tree from a downstream equipment trace, given the MRID of a conducting equipment to be used as the root. A depth-first sorted list of nodes is returned.")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:"left"},(0,i.kt)("inlineCode",{parentName:"td"},"getDownstreamEquipment(mRID: string, includeFilter: [string], excludeFilter: [string], networkState: [NetworkState])")),(0,i.kt)("td",{parentName:"tr",align:"left"},"Request the downstream equipment from the given ",(0,i.kt)("inlineCode",{parentName:"td"},"mRID")," for the desired ",(0,i.kt)("inlineCode",{parentName:"td"},"NetworkState")," (default ",(0,i.kt)("inlineCode",{parentName:"td"},"NORMAL"),").")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:"left"},(0,i.kt)("inlineCode",{parentName:"td"},"findUpstreamEquipment(mRID: string, type: string, networkState: [NetworkState])")),(0,i.kt)("td",{parentName:"tr",align:"left"},"Request a list of equipment of a specific CIM type encountered in an upstream trace starting at a given equipment, usage point, or meter, and stopping at matching equipment. Loops in the upstream network result in multiple branches in this trace, in which case more than one matching equipment may be returned.")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:"left"},(0,i.kt)("inlineCode",{parentName:"td"},"getUpstreamEquipment(mRID: string, stopType: string, stopMRID: string, includeFilter: [string], excludeFilter: [string], networkState: [NetworkState])")),(0,i.kt)("td",{parentName:"tr",align:"left"},"Request a list of equipment from an upstream equipment trace, given the MRID of a conducting equipment to be used as the starting point, and tracing to the feeder head, A reversed depth-first sorted list of equipment is returned. Optionally specify a type and/or an mRID as a stopping point rather than the feeder head.")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:"left"},(0,i.kt)("inlineCode",{parentName:"td"},"getConnectedEquipment(mRID: string, steps: Int?, includeFilter: [string], excludeFilter: [string], networkState: [NetworkState])")),(0,i.kt)("td",{parentName:"tr",align:"left"},"Request a list of equipment connected to a specific piece of equipment by a maximum number of steps in a given direction.")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:"left"},(0,i.kt)("inlineCode",{parentName:"td"},"getIsolatedEquipment(isolationPoints: [IsolationQueryExtent], insideIsolation: [IsolationQueryExtent]?, maxSwitches: Int, includeFilter: [string], excludeFilter: [string], networkState: [NetworkState])")),(0,i.kt)("td",{parentName:"tr",align:"left"},"Request the equipment that belongs to an isolation area. You can optionally request only equipment of a specified type.")))),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Available on the /ewb/api/graphql/customers endpoint:")),(0,i.kt)("table",null,(0,i.kt)("thead",{parentName:"table"},(0,i.kt)("tr",{parentName:"thead"},(0,i.kt)("th",{parentName:"tr",align:"left"},"Query"),(0,i.kt)("th",{parentName:"tr",align:"left"},"Description"))),(0,i.kt)("tbody",{parentName:"table"},(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:"left"},(0,i.kt)("inlineCode",{parentName:"td"},"getIdentifiedObject(mRID: string)")),(0,i.kt)("td",{parentName:"tr",align:"left"},"Request an ",(0,i.kt)("a",{parentName:"td",href:"https://zepben.github.io/evolve/docs/cim/evolve/IEC61970/Base/Core/IdentifiedObject"},"IdentifiedObject")," by mRID.")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:"left"},(0,i.kt)("inlineCode",{parentName:"td"},"getIdentifiedObjects(mRIDs: [string])")),(0,i.kt)("td",{parentName:"tr",align:"left"},"Request many ",(0,i.kt)("a",{parentName:"td",href:"https://zepben.github.io/evolve/docs/cim/evolve/IEC61970/Base/Core/IdentifiedObject"},"IdentifiedObjects")," by their mRID. The maximum number that can be requested per query is 100. If the list contains more than this the response will be truncated to the first 100 MRIDs that are found. If a requested MRID cannot be found it will be ignored and will not cause an error.")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:"left"},(0,i.kt)("inlineCode",{parentName:"td"},"findIdentifiedObjects(criteria: [FindIdentifiedObjectCriteriaInput])")),(0,i.kt)("td",{parentName:"tr",align:"left"},"Find all ",(0,i.kt)("a",{parentName:"td",href:"https://zepben.github.io/evolve/docs/cim/evolve/IEC61970/Base/Core/IdentifiedObject"},"IdentifiedObjects")," that match the provided criteria. Available criteria are listed below.")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:"left"},(0,i.kt)("inlineCode",{parentName:"td"},"findIdentifiedObjectsByName(criteria: [NameSearchInput], includeClasses: [string])")),(0,i.kt)("td",{parentName:"tr",align:"left"},"Find all ",(0,i.kt)("a",{parentName:"td",href:"https://zepben.github.io/evolve/docs/cim/evolve/IEC61970/Base/Core/IdentifiedObject"},"IdentifiedObjects")," that match the provided name search criteria. Available criteria are listed below.")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:"left"},(0,i.kt)("inlineCode",{parentName:"td"},"getMetadata()")),(0,i.kt)("td",{parentName:"tr",align:"left"},"Retrieve the metadata for the currently running network, including the running server and version, plus the data sources used to produce the model.")))),(0,i.kt)("h4",{id:"findidentifiedobjectcriteriainput-fields"},"FindIdentifiedObjectCriteriaInput fields"),(0,i.kt)("table",null,(0,i.kt)("thead",{parentName:"table"},(0,i.kt)("tr",{parentName:"thead"},(0,i.kt)("th",{parentName:"tr",align:"left"},"Field"),(0,i.kt)("th",{parentName:"tr",align:"left"},"Description"),(0,i.kt)("th",{parentName:"tr",align:"left"},"Required?"))),(0,i.kt)("tbody",{parentName:"table"},(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:"left"},(0,i.kt)("inlineCode",{parentName:"td"},"includeClasses: [string]")),(0,i.kt)("td",{parentName:"tr",align:"left"},"A list of IdentifiedObject class names that the results will be filtered by."),(0,i.kt)("td",{parentName:"tr",align:"left"},"No")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:"left"},(0,i.kt)("inlineCode",{parentName:"td"},"includeNameTypes: [string]")),(0,i.kt)("td",{parentName:"tr",align:"left"},"A list of NameType class names that the results will be filtered by."),(0,i.kt)("td",{parentName:"tr",align:"left"},"No")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:"left"},(0,i.kt)("inlineCode",{parentName:"td"},"inDiagrams: [string]")),(0,i.kt)("td",{parentName:"tr",align:"left"},"The MRIDs of diagrams IdentifiedObjects must have an associated DiagramObject in."),(0,i.kt)("td",{parentName:"tr",align:"left"},"No")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:"left"},(0,i.kt)("inlineCode",{parentName:"td"},"limit: int")),(0,i.kt)("td",{parentName:"tr",align:"left"},"The maximum number of results to return. This is currently limited to a maximum of 100. If set to larger than 100 results will be capped at 100."),(0,i.kt)("td",{parentName:"tr",align:"left"},"Yes")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:"left"},(0,i.kt)("inlineCode",{parentName:"td"},"toMatch: string")),(0,i.kt)("td",{parentName:"tr",align:"left"},"The value to match to an IdentifiedObject MRID or name."),(0,i.kt)("td",{parentName:"tr",align:"left"},"Yes")))),(0,i.kt)("h4",{id:"namesearchinput-fields"},"NameSearchInput fields"),(0,i.kt)("table",null,(0,i.kt)("thead",{parentName:"table"},(0,i.kt)("tr",{parentName:"thead"},(0,i.kt)("th",{parentName:"tr",align:"left"},"Field"),(0,i.kt)("th",{parentName:"tr",align:"left"},"Description"),(0,i.kt)("th",{parentName:"tr",align:"left"},"Required?"))),(0,i.kt)("tbody",{parentName:"table"},(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:"left"},(0,i.kt)("inlineCode",{parentName:"td"},"nameType: string")),(0,i.kt)("td",{parentName:"tr",align:"left"},"The NameType name that the results will be filtered by."),(0,i.kt)("td",{parentName:"tr",align:"left"},"Yes")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:"left"},(0,i.kt)("inlineCode",{parentName:"td"},"names: [string]")),(0,i.kt)("td",{parentName:"tr",align:"left"},"All possible names to search for."),(0,i.kt)("td",{parentName:"tr",align:"left"},"Yes")))),(0,i.kt)("h4",{id:"nameormridinput-fields"},"NameOrMRIDInput fields"),(0,i.kt)("table",null,(0,i.kt)("thead",{parentName:"table"},(0,i.kt)("tr",{parentName:"thead"},(0,i.kt)("th",{parentName:"tr",align:"left"},"Field"),(0,i.kt)("th",{parentName:"tr",align:"left"},"Description"),(0,i.kt)("th",{parentName:"tr",align:"left"},"Required?"))),(0,i.kt)("tbody",{parentName:"table"},(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:"left"},(0,i.kt)("inlineCode",{parentName:"td"},"nameSearchInput: NameSearchInput")),(0,i.kt)("td",{parentName:"tr",align:"left"},"A NameSearchInput if searching on names within a specific NameType."),(0,i.kt)("td",{parentName:"tr",align:"left"},"No")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:"left"},(0,i.kt)("inlineCode",{parentName:"td"},"mRIDs: [string]")),(0,i.kt)("td",{parentName:"tr",align:"left"},"The mRIDs of an IdentifiedObject."),(0,i.kt)("td",{parentName:"tr",align:"left"},"No")))),(0,i.kt)("p",null,"This input allows searching across NameType names or exact mRIDs to retrieve results."),(0,i.kt)("p",null,"Note that at least one of ",(0,i.kt)("inlineCode",{parentName:"p"},"nameSearchInput")," or ",(0,i.kt)("inlineCode",{parentName:"p"},"mRIDs")," must be provided."),(0,i.kt)("h4",{id:"isolationqueryextent-fields"},"IsolationQueryExtent fields"),(0,i.kt)("table",null,(0,i.kt)("thead",{parentName:"table"},(0,i.kt)("tr",{parentName:"thead"},(0,i.kt)("th",{parentName:"tr",align:"left"},"Field"),(0,i.kt)("th",{parentName:"tr",align:"left"},"Description"),(0,i.kt)("th",{parentName:"tr",align:"left"},"Required?"))),(0,i.kt)("tbody",{parentName:"table"},(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:"left"},(0,i.kt)("inlineCode",{parentName:"td"},"mRID: string")),(0,i.kt)("td",{parentName:"tr",align:"left"},"The mRID of the isolating equipment."),(0,i.kt)("td",{parentName:"tr",align:"left"},"Yes")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:"left"},(0,i.kt)("inlineCode",{parentName:"td"},"longitude: Double?")),(0,i.kt)("td",{parentName:"tr",align:"left"},"An optional longitude on the isolating equipment where the isolation occurs. This is only used by an ","[AcLineSegment]",", and will be ignored for any other equipment type. If provided, a ","[latitude]"," must also be provided"),(0,i.kt)("td",{parentName:"tr",align:"left"},"No")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:"left"},(0,i.kt)("inlineCode",{parentName:"td"},"latitude: Double?")),(0,i.kt)("td",{parentName:"tr",align:"left"},"An optional latitude on the isolating equipment where the isolation occurs. This is only used by an ","[AcLineSegment]",", and will be ignored for any other equipment type. If provided, a ","[longitude]"," must also be provided"),(0,i.kt)("td",{parentName:"tr",align:"left"},"No")))),(0,i.kt)("h2",{id:"query-notes"},"Query notes"),(0,i.kt)("h3",{id:"getunknownconnectivityenergyconsumers"},"getUnknownConnectivityEnergyConsumers"),(0,i.kt)("p",null,"Unknown connectivity consumers are ",(0,i.kt)("inlineCode",{parentName:"p"},"EnergyConsumers")," that have limited connectivity information. For example, ",(0,i.kt)("inlineCode",{parentName:"p"},"EnergyConsumers")," that we know are supplied by a certain\ndistribution ",(0,i.kt)("inlineCode",{parentName:"p"},"PowerTransformer")," or ",(0,i.kt)("inlineCode",{parentName:"p"},"Feeder"),", but we don't know exactly where they are connected on that feeder/transformer. These ",(0,i.kt)("inlineCode",{parentName:"p"},"EnergyConsumers")," will be attached\nto an ",(0,i.kt)("inlineCode",{parentName:"p"},"EquivalentBranch")," connected to the head of the relevant ",(0,i.kt)("inlineCode",{parentName:"p"},"Feeder"),"/",(0,i.kt)("inlineCode",{parentName:"p"},"LvFeeder"),"."),(0,i.kt)("h3",{id:"getsupplyingtransformers"},"getSupplyingTransformers"),(0,i.kt)("p",null,"Supplying transformers are defined as the transformer which normally provides power for the requested mRID. This query will find all supplying transformers for the requested\nsearch criteria. The supplying transformers for a given object will be all immediate upstream transformers, which could be one or many distribution ",(0,i.kt)("inlineCode",{parentName:"p"},"PowerTransformers"),", or\nin the case of HV equipment, the zone ",(0,i.kt)("inlineCode",{parentName:"p"},"PowerTransformer"),", if it is present in the modelled network."),(0,i.kt)("h2",{id:"other-graphql-features"},"Other GraphQL features"),(0,i.kt)("h3",{id:"meta-fields"},"Meta fields"),(0,i.kt)("p",null,"GraphQL provides introspective fields that provide information on the GraphQL schema itself. One of these fields is ",(0,i.kt)("inlineCode",{parentName:"p"},"__typename"),", which will return the name of the object type.\nThis is useful when requesting IdentifiedObjects, as it returns the specific CIM object type (e.g. ",(0,i.kt)("inlineCode",{parentName:"p"},"AcLineSegment"),")."),(0,i.kt)("h3",{id:"inline-fragments"},"Inline fragments"),(0,i.kt)("p",null,"Because many of the GraphQL queries return IdentifiedObjects, only IdentifiedObject attributes (mRID, name, description)\nand meta fields (__typename, type, numDiagramObjects) can be requested and returned by default.\nTo request data from other object types, ",(0,i.kt)("a",{parentName:"p",href:"https://graphql.org/learn/queries/#inline-fragments"},"inline fragments")," can be used.\nInline fragments allow you to query certain fields depending on the type of object returned, using the syntax ",(0,i.kt)("inlineCode",{parentName:"p"},"... on <typename>{fields}"),". It's easiest to understand this by looking at the examples included below."),(0,i.kt)("h3",{id:"bounding-boxes"},"Bounding Boxes"),(0,i.kt)("p",null,"Trace GraphQL responses include a ",(0,i.kt)("inlineCode",{parentName:"p"},"BoundingBox")," which defines a rectangular geographic area defined by the most south-west and north-east corners of the\n",(0,i.kt)("inlineCode",{parentName:"p"},"IdentifiedObject"),"s returned within the GqlResponse. This bounding box can be used to identify geographic areas and speed up the process of\nvisualising the network on a geographic map."),(0,i.kt)("h3",{id:"polygon"},"Polygon"),(0,i.kt)("p",null,"Trace GraphQL responses include a ",(0,i.kt)("inlineCode",{parentName:"p"},"Polygon")," which defines a convex polygon encompassing the locations(if available) of the ",(0,i.kt)("inlineCode",{parentName:"p"},"IdentifiedObject"),"'s returned within the GqlResponse.\nThis Polygon can provide a more refined geographic region encompassed by the network equipment returned in the trace query."),(0,i.kt)("h2",{id:"example-queries"},"Example queries"),(0,i.kt)("p",null,"Here we are requesting the name and description for three mRIDs, as well as requesting the mRID in the body so we can easily tell which returned object is which.\nWe're also requesting the object type using ",(0,i.kt)("inlineCode",{parentName:"p"},"__typename"),"."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-graphql",metastring:'title="Query:"',title:'"Query:"'},'{\n  getIdentifiedObjects(mRIDs: ["abc123", "def456", "ghi789"]){\n    name\n    description\n    mRID\n    __typename\n  }\n}\n')),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-graphql",metastring:'title="Response:"',title:'"Response:"'},'{\n  "data": {\n    "getIdentifiedObjects": [\n      {\n        "name": "TestObject123",\n        "description": "This is a test object"\n        "mRID": "abc123"\n        "__typename": "Feeder"\n      },\n      {\n        "name": "TestObject456",\n        "description": "This is a different test object"\n        "mRID": "def456"\n        "__typename": "AcLineSegment"\n      },\n      {\n        "name": "TestObject789",\n        "description": "And another test object"\n        "mRID": "ghi789"\n        "__typename": "Breaker"\n      }\n    ]\n  }\n}\n')),(0,i.kt)("p",null,"Once we know the object types, we can start to retrieve specific fields depending on the object type."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-graphql",metastring:'title="Query:"',title:'"Query:"'},'{\n  getIdentifiedObjects(mRIDs: ["abc123", "def456", "ghi789"]){\n    name\n    mRID\n    __typename\n    # For returned Feeder objects, also request a list of their child equipment objects \n    # that are either Junctions or Disconnectors\n    ... on Feeder {\n      currentEquipment(types: ["Junction", "Disconnector"]){\n        mRID\n        name\n        __typename\n      }\n    }\n    \n    # For returned AcLineSegments, also request the length, the parent feeder(s) mRIDs, \n    # and check if it is underground \n    ... on AcLineSegment{\n      length\n      currentFeeders{\n        mRID\n      }\n      isUnderground\n    }\n    \n    # For returned Breakers, also check whether the breaker is open \n    ... on Breaker{\n      isOpen\n    }\n  }\n}\n')),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-graphql",metastring:'title="Response:"',title:'"Response:"'},'{\n  "data": {\n    "getIdentifiedObjects": [\n      {\n        "name": "TestObject123",\n        "mRID": "abc123",\n        "__typename": "Feeder",\n        "currentEquipment": [\n          {\n            "mRID": "junc1",\n            "name": "TestJunction1",\n            "__typename": "Junction"\n          },\n          {\n            "mRID": "disc1",\n            "name": "TestDisconnector1",\n            "__typename": "Disconnector"\n          },\n          {\n            "mRID": "junc2",\n            "name": "TestJunction2",\n            "__typename": "Junction"\n          },\n          {\n            "mRID": "disc2",\n            "name": "TestDisconnector2",\n            "__typename": "Disconnector"\n          },\n          {\n            "mRID": "junc3",\n            "name": "TestJunction3",\n            "__typename": "Junction"\n          }\n        ]\n      },\n      {\n        "name": "TestObject456",\n        "mRID": "def456",\n        "__typename": "AcLineSegment",\n        "length": 4.97348017,\n        "currentFeeders": [\n          {\n            "mRID": "feeder2468"\n          }\n        ],\n        "isUnderground": true\n      },\n      {\n        "name": "TestObject789",\n        "mRID": "ghi789",\n        "__typename": "Breaker",\n        "isOpen": false\n      }\n    ]\n  }\n}\n')))}h.isMDXComponent=!0}}]);