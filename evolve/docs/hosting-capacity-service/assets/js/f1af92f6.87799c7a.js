"use strict";(self.webpackChunkhosting_capacity_service_doco=self.webpackChunkhosting_capacity_service_doco||[]).push([[3580],{3278:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>c,contentTitle:()=>g,default:()=>y,frontMatter:()=>o,metadata:()=>p,toc:()=>d});var n=a(8168),r=a(8587),l=(a(6540),a(5680));const i=["components"],o={id:"definitions",title:"Definitions",slug:"/reference/definitions"},g=void 0,p={unversionedId:"reference/definitions",id:"reference/definitions",title:"Definitions",description:"Work Package",source:"@site/docs/reference/definitions.mdx",sourceDirName:"reference",slug:"/reference/definitions",permalink:"/evolve/docs/hosting-capacity-service/docs/next/reference/definitions",draft:!1,tags:[],version:"current",frontMatter:{id:"definitions",title:"Definitions",slug:"/reference/definitions"},sidebar:"theSidebar",previous:{title:"Reference Home",permalink:"/evolve/docs/hosting-capacity-service/docs/next/reference/reference-home"},next:{title:"Input Tables",permalink:"/evolve/docs/hosting-capacity-service/docs/next/reference/input-tables"}},c={},d=[{value:"Work Package",id:"work-package",level:2},{value:"WorkPackageConfig",id:"workpackageconfig",level:2},{value:"Model Config",id:"model-config",level:2},{value:"TimePeriod",id:"timeperiod",level:2},{value:"Switch Meter Placement Config",id:"switch-meter-placement-config",level:2}],m={toc:d},s="wrapper";function y(e){let{components:t}=e,a=(0,r.A)(e,i);return(0,l.yg)(s,(0,n.A)({},m,a,{components:t,mdxType:"MDXLayout"}),(0,l.yg)("h2",{id:"work-package"},"Work Package"),(0,l.yg)("p",null,"A work package represents a uniquely identified time series modelling job with a specific set of configuration options."),(0,l.yg)("h2",{id:"workpackageconfig"},"WorkPackageConfig"),(0,l.yg)("p",null,"A data class representing the configuration for a work package"),(0,l.yg)("table",null,(0,l.yg)("thead",{parentName:"table"},(0,l.yg)("tr",{parentName:"thead"},(0,l.yg)("th",{parentName:"tr",align:"center"},"Property"),(0,l.yg)("th",{parentName:"tr",align:null},"Description"),(0,l.yg)("th",{parentName:"tr",align:null},"Type"))),(0,l.yg)("tbody",{parentName:"table"},(0,l.yg)("tr",{parentName:"tbody"},(0,l.yg)("td",{parentName:"tr",align:"center"},"feeders"),(0,l.yg)("td",{parentName:"tr",align:null},"List of feeder mRIDs for the feeders we want to model in this work package"),(0,l.yg)("td",{parentName:"tr",align:null},"List","[String]")),(0,l.yg)("tr",{parentName:"tbody"},(0,l.yg)("td",{parentName:"tr",align:"center"},"scenarios"),(0,l.yg)("td",{parentName:"tr",align:null},"List of scenario ids that we want apply to the feeders in this work package"),(0,l.yg)("td",{parentName:"tr",align:null},"List","[String]")),(0,l.yg)("tr",{parentName:"tbody"},(0,l.yg)("td",{parentName:"tr",align:"center"},"years"),(0,l.yg)("td",{parentName:"tr",align:null},"List of years to model for each scenario/feeder combination"),(0,l.yg)("td",{parentName:"tr",align:null},"List","[Int]")),(0,l.yg)("tr",{parentName:"tbody"},(0,l.yg)("td",{parentName:"tr",align:"center"},"model_config"),(0,l.yg)("td",{parentName:"tr",align:null},"Configuration for the OpenDSS network model generation step",(0,l.yg)("br",null),"Refer ",(0,l.yg)("a",{parentName:"td",href:"#model-config"},(0,l.yg)("strong",{parentName:"a"},"Model Config"))," below"),(0,l.yg)("td",{parentName:"tr",align:null},"Object")),(0,l.yg)("tr",{parentName:"tbody"},(0,l.yg)("td",{parentName:"tr",align:"center"},"solve_config"),(0,l.yg)("td",{parentName:"tr",align:null},"Configuration for the OpenDSS network model solve step",(0,l.yg)("br",null),"Refer ",(0,l.yg)("a",{parentName:"td",href:"#solve-config"},(0,l.yg)("strong",{parentName:"a"},"Solve Config"))," below"),(0,l.yg)("td",{parentName:"tr",align:null},"Object")),(0,l.yg)("tr",{parentName:"tbody"},(0,l.yg)("td",{parentName:"tr",align:"center"},"results_config"),(0,l.yg)("td",{parentName:"tr",align:null},"Configuration for managing the results produced by the work package",(0,l.yg)("br",null),"Refer ",(0,l.yg)("a",{parentName:"td",href:"#results-config"},(0,l.yg)("strong",{parentName:"a"},"Results Config"))," below"),(0,l.yg)("td",{parentName:"tr",align:null},"Object")),(0,l.yg)("tr",{parentName:"tbody"},(0,l.yg)("td",{parentName:"tr",align:"center"},"quality_assurance_processing"),(0,l.yg)("td",{parentName:"tr",align:null},"Flag to enable QA checks for the OpenDSS model"),(0,l.yg)("td",{parentName:"tr",align:null},"Boolean")))),(0,l.yg)("h2",{id:"model-config"},"Model Config"),(0,l.yg)("p",null,"A data class representing the configuration for the OpenDSS model generation in a work package"),(0,l.yg)("table",null,(0,l.yg)("thead",{parentName:"table"},(0,l.yg)("tr",{parentName:"thead"},(0,l.yg)("th",{parentName:"tr",align:"center"},"Property"),(0,l.yg)("th",{parentName:"tr",align:null},"Description"),(0,l.yg)("th",{parentName:"tr",align:null},"Type"))),(0,l.yg)("tbody",{parentName:"table"},(0,l.yg)("tr",{parentName:"tbody"},(0,l.yg)("td",{parentName:"tr",align:"center"},"load_time"),(0,l.yg)("td",{parentName:"tr",align:null},"Date time range specifying the period of load data to use in the creation of the OpenDSS model"),(0,l.yg)("td",{parentName:"tr",align:null},"Object")),(0,l.yg)("tr",{parentName:"tbody"},(0,l.yg)("td",{parentName:"tr",align:"center"},"vm_pu"),(0,l.yg)("td",{parentName:"tr",align:null},"Voltage per-unit of voltage source"),(0,l.yg)("td",{parentName:"tr",align:null},"Float")),(0,l.yg)("tr",{parentName:"tbody"},(0,l.yg)("td",{parentName:"tr",align:"center"},"vmin_pu"),(0,l.yg)("td",{parentName:"tr",align:null},"Minimum per unit voltage for which the load model selected and generator model is assumed to apply. Below this value, the load/gen model reverts to a constant impedance model. For generator model used, this is used to determine the upper current limit. For example, if Vminpu is 0.90 then the current limit is (1/0.90) = 111%"),(0,l.yg)("td",{parentName:"tr",align:null},"Float")),(0,l.yg)("tr",{parentName:"tbody"},(0,l.yg)("td",{parentName:"tr",align:"center"},"vmax_pu"),(0,l.yg)("td",{parentName:"tr",align:null},"Maximum per unit voltage for which the load model selected and generator model is assumed to apply. Above this value, the load/gen model reverts to a constant impedance model"),(0,l.yg)("td",{parentName:"tr",align:null},"Float")),(0,l.yg)("tr",{parentName:"tbody"},(0,l.yg)("td",{parentName:"tr",align:"center"},"load_model"),(0,l.yg)("td",{parentName:"tr",align:null},"Specifies how loads and generators in OpenDSS should be modelled.",(0,l.yg)("br",null),"1: Standard constant P+jQ load (Default)",(0,l.yg)("br",null),"2: Constant impedance load",(0,l.yg)("br",null),"3: Const P, Quadratic Q (like a motor)",(0,l.yg)("br",null),"4: Nominal Linear P, Quadratic Q (feeder mix). Use this with CVRfactor",(0,l.yg)("br",null),"5: Constant Current Magnitude",(0,l.yg)("br",null),"6: Const P, Fixed Q,",(0,l.yg)("br",null),"7: Const P, Fixed Impedance Q"),(0,l.yg)("td",{parentName:"tr",align:null},"Int")),(0,l.yg)("tr",{parentName:"tbody"},(0,l.yg)("td",{parentName:"tr",align:"center"},"collapse_swer"),(0,l.yg)("td",{parentName:"tr",align:null},"Whether to collapse SWER network"),(0,l.yg)("td",{parentName:"tr",align:null},"Boolean")),(0,l.yg)("tr",{parentName:"tbody"},(0,l.yg)("td",{parentName:"tr",align:"center"},"meter_at_hv_source"),(0,l.yg)("td",{parentName:"tr",align:null},"Whether to place a meter at the voltage source."),(0,l.yg)("td",{parentName:"tr",align:null},"Boolean")),(0,l.yg)("tr",{parentName:"tbody"},(0,l.yg)("td",{parentName:"tr",align:"center"},"meters_at_dist_transformers"),(0,l.yg)("td",{parentName:"tr",align:null},"Whether to place a meter at the secondary winding of each distribution transformer."),(0,l.yg)("td",{parentName:"tr",align:null},"Boolean")),(0,l.yg)("tr",{parentName:"tbody"},(0,l.yg)("td",{parentName:"tr",align:"center"},"switch_meter_placement_configs"),(0,l.yg)("td",{parentName:"tr",align:null},"List of switch meter placement configuration objects that specify which switch classes to place meters at, and the regex pattern to match for in the switch names ",(0,l.yg)("br",null),"Refer ",(0,l.yg)("a",{parentName:"td",href:"#switch-meter-placement-config"},(0,l.yg)("strong",{parentName:"a"},"Switch Meter Placement Config"))," below"),(0,l.yg)("td",{parentName:"tr",align:null},"List of Objects")),(0,l.yg)("tr",{parentName:"tbody"},(0,l.yg)("td",{parentName:"tr",align:"center"},"calibration"),(0,l.yg)("td",{parentName:"tr",align:null},"Whether to apply calibration modifications to model"),(0,l.yg)("td",{parentName:"tr",align:null},"Float")))),(0,l.yg)("h2",{id:"timeperiod"},"TimePeriod"),(0,l.yg)("p",null,"The time period of the load data to use in OpenDSS model."),(0,l.yg)("table",null,(0,l.yg)("thead",{parentName:"table"},(0,l.yg)("tr",{parentName:"thead"},(0,l.yg)("th",{parentName:"tr",align:"center"},"Property"),(0,l.yg)("th",{parentName:"tr",align:null},"Description"),(0,l.yg)("th",{parentName:"tr",align:null},"Type"))),(0,l.yg)("tbody",{parentName:"table"},(0,l.yg)("tr",{parentName:"tbody"},(0,l.yg)("td",{parentName:"tr",align:"center"},"startTime"),(0,l.yg)("td",{parentName:"tr",align:null},"Local date time that represents the start of the time period"),(0,l.yg)("td",{parentName:"tr",align:null},"Datetime")),(0,l.yg)("tr",{parentName:"tbody"},(0,l.yg)("td",{parentName:"tr",align:"center"},"endTime"),(0,l.yg)("td",{parentName:"tr",align:null},"Local date time that represents the end of the time period"),(0,l.yg)("td",{parentName:"tr",align:null},"Datetime")))),(0,l.yg)("h2",{id:"switch-meter-placement-config"},"Switch Meter Placement Config"),(0,l.yg)("p",null,"Specifies which switch classes to place meters at, and the regex pattern to match for in the switch names."),(0,l.yg)("table",null,(0,l.yg)("thead",{parentName:"table"},(0,l.yg)("tr",{parentName:"thead"},(0,l.yg)("th",{parentName:"tr",align:"center"},"Property"),(0,l.yg)("th",{parentName:"tr",align:null},"Description"),(0,l.yg)("th",{parentName:"tr",align:null},"Type"))),(0,l.yg)("tbody",{parentName:"table"},(0,l.yg)("tr",{parentName:"tbody"},(0,l.yg)("td",{parentName:"tr",align:"center"},"meterSwitchClass"),(0,l.yg)("td",{parentName:"tr",align:null},"Specifies the switch class to add meters to. Possible values are: 'BREAKER', 'DISCONNECTOR', 'FUSE', 'JUMPER', 'LOAD_BREAK_SWITCH', 'RECLOSER'"),(0,l.yg)("td",{parentName:"tr",align:null},"String")),(0,l.yg)("tr",{parentName:"tbody"},(0,l.yg)("td",{parentName:"tr",align:"center"},"namePattern"),(0,l.yg)("td",{parentName:"tr",align:null},"Java Regex (",(0,l.yg)("a",{parentName:"td",href:"https://www.w3schools.com/java/java_regex.asp"},"https://www.w3schools.com/java/java_regex.asp"),") that the switch's ID or name must match to get a meter assigned to it"),(0,l.yg)("td",{parentName:"tr",align:null},"String")))))}y.isMDXComponent=!0},5680:(e,t,a)=>{a.d(t,{xA:()=>c,yg:()=>y});var n=a(6540);function r(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function l(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function i(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?l(Object(a),!0).forEach((function(t){r(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):l(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function o(e,t){if(null==e)return{};var a,n,r=function(e,t){if(null==e)return{};var a,n,r={},l=Object.keys(e);for(n=0;n<l.length;n++)a=l[n],t.indexOf(a)>=0||(r[a]=e[a]);return r}(e,t);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(n=0;n<l.length;n++)a=l[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(r[a]=e[a])}return r}var g=n.createContext({}),p=function(e){var t=n.useContext(g),a=t;return e&&(a="function"==typeof e?e(t):i(i({},t),e)),a},c=function(e){var t=p(e.components);return n.createElement(g.Provider,{value:t},e.children)},d="mdxType",m={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},s=n.forwardRef((function(e,t){var a=e.components,r=e.mdxType,l=e.originalType,g=e.parentName,c=o(e,["components","mdxType","originalType","parentName"]),d=p(a),s=r,y=d["".concat(g,".").concat(s)]||d[s]||m[s]||l;return a?n.createElement(y,i(i({ref:t},c),{},{components:a})):n.createElement(y,i({ref:t},c))}));function y(e,t){var a=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var l=a.length,i=new Array(l);i[0]=s;var o={};for(var g in t)hasOwnProperty.call(t,g)&&(o[g]=t[g]);o.originalType=e,o[d]="string"==typeof e?e:r,i[1]=o;for(var p=2;p<l;p++)i[p]=a[p];return n.createElement.apply(null,i)}return n.createElement.apply(null,a)}s.displayName="MDXCreateElement"}}]);