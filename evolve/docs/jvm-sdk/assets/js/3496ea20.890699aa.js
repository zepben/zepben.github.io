"use strict";(self.webpackChunkevolve_sdk_jvm_doco=self.webpackChunkevolve_sdk_jvm_doco||[]).push([[4188],{3905:(e,t,r)=>{r.d(t,{Zo:()=>u,kt:()=>d});var a=r(7294);function n(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function l(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,a)}return r}function o(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?l(Object(r),!0).forEach((function(t){n(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):l(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function i(e,t){if(null==e)return{};var r,a,n=function(e,t){if(null==e)return{};var r,a,n={},l=Object.keys(e);for(a=0;a<l.length;a++)r=l[a],t.indexOf(r)>=0||(n[r]=e[r]);return n}(e,t);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(a=0;a<l.length;a++)r=l[a],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(n[r]=e[r])}return n}var s=a.createContext({}),c=function(e){var t=a.useContext(s),r=t;return e&&(r="function"==typeof e?e(t):o(o({},t),e)),r},u=function(e){var t=c(e.components);return a.createElement(s.Provider,{value:t},e.children)},v="mdxType",p={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},m=a.forwardRef((function(e,t){var r=e.components,n=e.mdxType,l=e.originalType,s=e.parentName,u=i(e,["components","mdxType","originalType","parentName"]),v=c(r),m=n,d=v["".concat(s,".").concat(m)]||v[m]||p[m]||l;return r?a.createElement(d,o(o({ref:t},u),{},{components:r})):a.createElement(d,o({ref:t},u))}));function d(e,t){var r=arguments,n=t&&t.mdxType;if("string"==typeof e||n){var l=r.length,o=new Array(l);o[0]=m;var i={};for(var s in t)hasOwnProperty.call(t,s)&&(i[s]=t[s]);i.originalType=e,i[v]="string"==typeof e?e:n,o[1]=i;for(var c=2;c<l;c++)o[c]=r[c];return a.createElement.apply(null,o)}return a.createElement.apply(null,r)}m.displayName="MDXCreateElement"},5162:(e,t,r)=>{r.d(t,{Z:()=>o});var a=r(7294),n=r(4334);const l={tabItem:"tabItem_Ymn6"};function o(e){let{children:t,hidden:r,className:o}=e;return a.createElement("div",{role:"tabpanel",className:(0,n.Z)(l.tabItem,o),hidden:r},t)}},4866:(e,t,r)=>{r.d(t,{Z:()=>y});var a=r(7462),n=r(7294),l=r(4334),o=r(2466),i=r(6550),s=r(1980),c=r(7392),u=r(12);function v(e){return function(e){return n.Children.map(e,(e=>{if((0,n.isValidElement)(e)&&"value"in e.props)return e;throw new Error("Docusaurus error: Bad <Tabs> child <"+("string"==typeof e.type?e.type:e.type.name)+'>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.')}))}(e).map((e=>{let{props:{value:t,label:r,attributes:a,default:n}}=e;return{value:t,label:r,attributes:a,default:n}}))}function p(e){const{values:t,children:r}=e;return(0,n.useMemo)((()=>{const e=null!=t?t:v(r);return function(e){const t=(0,c.l)(e,((e,t)=>e.value===t.value));if(t.length>0)throw new Error('Docusaurus error: Duplicate values "'+t.map((e=>e.value)).join(", ")+'" found in <Tabs>. Every value needs to be unique.')}(e),e}),[t,r])}function m(e){let{value:t,tabValues:r}=e;return r.some((e=>e.value===t))}function d(e){let{queryString:t=!1,groupId:r}=e;const a=(0,i.k6)(),l=function(e){let{queryString:t=!1,groupId:r}=e;if("string"==typeof t)return t;if(!1===t)return null;if(!0===t&&!r)throw new Error('Docusaurus error: The <Tabs> component groupId prop is required if queryString=true, because this value is used as the search param name. You can also provide an explicit value such as queryString="my-search-param".');return null!=r?r:null}({queryString:t,groupId:r});return[(0,s._X)(l),(0,n.useCallback)((e=>{if(!l)return;const t=new URLSearchParams(a.location.search);t.set(l,e),a.replace({...a.location,search:t.toString()})}),[l,a])]}function b(e){const{defaultValue:t,queryString:r=!1,groupId:a}=e,l=p(e),[o,i]=(0,n.useState)((()=>function(e){var t;let{defaultValue:r,tabValues:a}=e;if(0===a.length)throw new Error("Docusaurus error: the <Tabs> component requires at least one <TabItem> children component");if(r){if(!m({value:r,tabValues:a}))throw new Error('Docusaurus error: The <Tabs> has a defaultValue "'+r+'" but none of its children has the corresponding value. Available values are: '+a.map((e=>e.value)).join(", ")+". If you intend to show no default tab, use defaultValue={null} instead.");return r}const n=null!=(t=a.find((e=>e.default)))?t:a[0];if(!n)throw new Error("Unexpected error: 0 tabValues");return n.value}({defaultValue:t,tabValues:l}))),[s,c]=d({queryString:r,groupId:a}),[v,b]=function(e){let{groupId:t}=e;const r=function(e){return e?"docusaurus.tab."+e:null}(t),[a,l]=(0,u.Nk)(r);return[a,(0,n.useCallback)((e=>{r&&l.set(e)}),[r,l])]}({groupId:a}),g=(()=>{const e=null!=s?s:v;return m({value:e,tabValues:l})?e:null})();(0,n.useLayoutEffect)((()=>{g&&i(g)}),[g]);return{selectedValue:o,selectValue:(0,n.useCallback)((e=>{if(!m({value:e,tabValues:l}))throw new Error("Can't select invalid tab value="+e);i(e),c(e),b(e)}),[c,b,l]),tabValues:l}}var g=r(2389);const k={tabList:"tabList__CuJ",tabItem:"tabItem_LNqP"};function S(e){let{className:t,block:r,selectedValue:i,selectValue:s,tabValues:c}=e;const u=[],{blockElementScrollPositionUntilNextRender:v}=(0,o.o5)(),p=e=>{const t=e.currentTarget,r=u.indexOf(t),a=c[r].value;a!==i&&(v(t),s(a))},m=e=>{var t;let r=null;switch(e.key){case"Enter":p(e);break;case"ArrowRight":{var a;const t=u.indexOf(e.currentTarget)+1;r=null!=(a=u[t])?a:u[0];break}case"ArrowLeft":{var n;const t=u.indexOf(e.currentTarget)-1;r=null!=(n=u[t])?n:u[u.length-1];break}}null==(t=r)||t.focus()};return n.createElement("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,l.Z)("tabs",{"tabs--block":r},t)},c.map((e=>{let{value:t,label:r,attributes:o}=e;return n.createElement("li",(0,a.Z)({role:"tab",tabIndex:i===t?0:-1,"aria-selected":i===t,key:t,ref:e=>u.push(e),onKeyDown:m,onClick:p},o,{className:(0,l.Z)("tabs__item",k.tabItem,null==o?void 0:o.className,{"tabs__item--active":i===t})}),null!=r?r:t)})))}function h(e){let{lazy:t,children:r,selectedValue:a}=e;if(r=Array.isArray(r)?r:[r],t){const e=r.find((e=>e.props.value===a));return e?(0,n.cloneElement)(e,{className:"margin-top--md"}):null}return n.createElement("div",{className:"margin-top--md"},r.map(((e,t)=>(0,n.cloneElement)(e,{key:t,hidden:e.props.value!==a}))))}function f(e){const t=b(e);return n.createElement("div",{className:(0,l.Z)("tabs-container",k.tabList)},n.createElement(S,(0,a.Z)({},e,t)),n.createElement(h,(0,a.Z)({},e,t)))}function y(e){const t=(0,g.Z)();return n.createElement(f,(0,a.Z)({key:String(t)},e))}},8416:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>u,contentTitle:()=>s,default:()=>d,frontMatter:()=>i,metadata:()=>c,toc:()=>v});var a=r(7462),n=(r(7294),r(3905)),l=r(4866),o=r(5162);const i={id:"query-network-state-service",title:"Query Network State Service"},s=void 0,c={unversionedId:"query-network-state-service",id:"version-0.24.1/query-network-state-service",title:"Query Network State Service",description:"An implementation of the QueryNetworkStateService will provide an object-oriented wrapper for the gRPC library, with the ability to retrieve information about",source:"@site/versioned_docs/version-0.24.1/query-network-state-service.mdx",sourceDirName:".",slug:"/query-network-state-service",permalink:"/evolve/docs/jvm-sdk/0.24.1/query-network-state-service",draft:!1,tags:[],version:"0.24.1",frontMatter:{id:"query-network-state-service",title:"Query Network State Service"},sidebar:"someSidebar",previous:{title:"Query Network State Client",permalink:"/evolve/docs/jvm-sdk/0.24.1/query-network-state-client"},next:{title:"Update Network State Client",permalink:"/evolve/docs/jvm-sdk/0.24.1/update-network-state-client"}},u={},v=[{value:"Creating callbacks",id:"creating-callbacks",level:2},{value:"onGetCurrentStates",id:"ongetcurrentstates",level:3},{value:"Registering callbacks",id:"registering-callbacks",level:2},{value:"Registering the service",id:"registering-the-service",level:2},{value:"Putting it all together",id:"putting-it-all-together",level:2}],p={toc:v},m="wrapper";function d(e){let{components:t,...r}=e;return(0,n.kt)(m,(0,a.Z)({},p,r,{components:t,mdxType:"MDXLayout"}),(0,n.kt)("p",null,"An implementation of the ",(0,n.kt)("inlineCode",{parentName:"p"},"QueryNetworkStateService")," will provide an object-oriented wrapper for the gRPC library, with the ability to retrieve information about\nthe state of the network. This is done with the following 3 steps:"),(0,n.kt)("ol",null,(0,n.kt)("li",{parentName:"ol"},"Create callbacks which will be called when gRPC messages are received from a client."),(0,n.kt)("li",{parentName:"ol"},"Register the callbacks with an instance of the ",(0,n.kt)("inlineCode",{parentName:"li"},"QueryNetworkStateService"),"."),(0,n.kt)("li",{parentName:"ol"},"Add your ",(0,n.kt)("inlineCode",{parentName:"li"},"QueryNetworkStateService")," instance as a gRPC service.")),(0,n.kt)("admonition",{type:"info"},(0,n.kt)("p",{parentName:"admonition"},"The below examples make use of a helper library provided by Zepben, which is included as a transitive dependency of the SDK, or can be ",(0,n.kt)("a",{parentName:"p",href:"https://central.sonatype.com/artifact/com.zepben.evolve/evolve-conn"},"added directly from Maven Central"),"."),(0,n.kt)("p",{parentName:"admonition"},"You do ",(0,n.kt)("em",{parentName:"p"},(0,n.kt)("strong",{parentName:"em"},"NOT"))," have to do this, you can register the services directly with a Netty gRPC (or other) server instead.")),(0,n.kt)("p",null,"The classes you need for performing these actions can be imported from the SDK:"),(0,n.kt)(l.Z,{groupId:"import-example",defaultValue:"java",values:[{label:"Java",value:"java"},{label:"Kotlin",value:"kotlin"}],mdxType:"Tabs"},(0,n.kt)(o.Z,{value:"java",mdxType:"TabItem"},(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-java"},"import com.zepben.evolve.conn.grpc.GrpcServer;\nimport com.zepben.evolve.streaming.data.CurrentStateEvent;\nimport com.zepben.evolve.streaming.get.QueryNetworkStateService;\n"))),(0,n.kt)(o.Z,{value:"kotlin",mdxType:"TabItem"},(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-kotlin"},"import com.zepben.evolve.conn.grpc.GrpcServer\nimport com.zepben.evolve.streaming.data.CurrentStateEvent\nimport com.zepben.evolve.streaming.get.QueryNetworkStateService\n")))),(0,n.kt)("h2",{id:"creating-callbacks"},"Creating callbacks"),(0,n.kt)("p",null,"Each supported message in ",(0,n.kt)("inlineCode",{parentName:"p"},"QueryNetworkStateService")," requires a callback, which will be triggered when any client messages are received. Implementation of these\ncallbacks can be done as either lambdas, or full method/function implementations that can be passed as method references."),(0,n.kt)("h3",{id:"ongetcurrentstates"},"onGetCurrentStates"),(0,n.kt)("p",null,"The ",(0,n.kt)("inlineCode",{parentName:"p"},"onGetCurrentStates")," callback is triggered for each request for the current states between two date/times, and should return a list of the current state\nevents that occurred between those date/times (inclusive)"),(0,n.kt)(l.Z,{groupId:"callback-example",defaultValue:"java",values:[{label:"Java",value:"java"},{label:"Kotlin",value:"kotlin"}],mdxType:"Tabs"},(0,n.kt)(o.Z,{value:"java",mdxType:"TabItem"},(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-java"},"// Using a lambda expression\nQueryNetworkStateService.GetCurrentStates getCurrentStatesLambda = (from, to) ->\n    Stream.of(\n        // Put the batches you wish to return here, e.g. List.of(item1, item2), List.of(item3).\n    );\n\n// Using a method\nclass QueryNetworkStateServiceImpl {\n\n    Stream<List<CurrentStateEvent>> getCurrentStates(LocalDateTime from, LocalDateTime to){\n        var batches = ... // Some logic to build the batches of events.\n        return batches.stream();\n    }\n\n}\n"))),(0,n.kt)(o.Z,{value:"kotlin",mdxType:"TabItem"},(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-kotlin"},"// Using a lambda expression\nvar getCurrentStatesLambda = { from: LocalDateTime?, to: LocalDateTime? ->\n    sequenceOf<List<CurrentStateEvent>>(\n        // Put the batches you wish to return here, e.g. List.of(item1, item2), List.of(item3).\n    )\n}\n\n// Using a method\nclass QueryNetworkStateServiceImpl {\n\n    fun getCurrentStates(from: LocalDateTime?, to: LocalDateTime?): Sequence<List<CurrentStateEvent>> {\n        val batches = ... // Some logic to build the batches of events.\n        return batches.asSequence()\n    }\n\n}\n")))),(0,n.kt)("h2",{id:"registering-callbacks"},"Registering callbacks"),(0,n.kt)("p",null,"Registering the callbacks with the service is as simple as passing them into the ",(0,n.kt)("inlineCode",{parentName:"p"},"QueryNetworkStateService")," constructor."),(0,n.kt)(l.Z,{groupId:"register-example",defaultValue:"java",values:[{label:"Java",value:"java"},{label:"Kotlin",value:"kotlin"}],mdxType:"Tabs"},(0,n.kt)(o.Z,{value:"java",mdxType:"TabItem"},(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-java"},"// Using lambda expressions\nQueryNetworkStateService service = new QueryNetworkStateService(getCurrentStatesLambda);\n\n// Using method references\nclass QueryNetworkStateServiceImpl {\n\n    QueryNetworkStateService service = new QueryNetworkStateService(this::getCurrentStates);\n\n}\n"))),(0,n.kt)(o.Z,{value:"kotlin",mdxType:"TabItem"},(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-kotlin"},"// Using lambda expressions\nval service = QueryNetworkStateService(getCurrentStatesLambda)\n\n// Using method references\nclass QueryNetworkStateServiceImpl {\n\n    val service = QueryNetworkStateService(::getCurrentStates);\n\n}\n")))),(0,n.kt)("h2",{id:"registering-the-service"},"Registering the service"),(0,n.kt)("p",null,"For the above code to have any effect, you need to register the service with a gRPC server. Once this has been done, you should start to receive callbacks for\neach request sent from a gRPC client."),(0,n.kt)(l.Z,{groupId:"code-example",defaultValue:"java",values:[{label:"Java",value:"java"},{label:"Kotlin",value:"kotlin"}],mdxType:"Tabs"},(0,n.kt)(o.Z,{value:"java",mdxType:"TabItem"},(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-java"},"class Main {\n\n    public static void main(String[] args) {\n        var grpcServer = new GrpcServerImpl(9001, service);\n        grpcServer.start();\n    }\n\n    class GrpcServerImpl extends GrpcServer {\n\n        GrpcServerImpl(int port, QueryNetworkStateService service) {\n            super(port, 0, null, List.of());\n            getServerBuilder().addService(service);\n        }\n\n    }\n\n}\n"))),(0,n.kt)(o.Z,{value:"kotlin",mdxType:"TabItem"},(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-kotlin"},"fun main() {\n    val grpcServer = object : GrpcServer(9001) {\n        init {\n            serverBuilder.addService(service)\n        }\n    }\n    grpcServer.start()\n}\n")))),(0,n.kt)("h2",{id:"putting-it-all-together"},"Putting it all together"),(0,n.kt)("p",null,"Putting each of the steps above together, you can build the scaffold of a working application"),(0,n.kt)(l.Z,{groupId:"code-example",defaultValue:"java-lambda",values:[{label:"Java Lambdas",value:"java-lambda"},{label:"Java Methods",value:"java-method"},{label:"Kotlin Lambdas",value:"kotlin-lambda"},{label:"Kotlin Methods",value:"kotlin-method"}],mdxType:"Tabs"},(0,n.kt)(o.Z,{value:"java-lambda",mdxType:"TabItem"},(0,n.kt)("p",null,(0,n.kt)("inlineCode",{parentName:"p"},"Main.java"),":"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-java"},"import com.zepben.evolve.streaming.get.QueryNetworkStateService;\nimport com.zepben.evolve.streaming.data.CurrentStateEvent;\n\nimport java.util.stream.Stream;\n\nclass Main {\n\n    public static void main(String[] args) {\n        QueryNetworkStateService service = new QueryNetworkStateService(\n            (QueryNetworkStateService.GetCurrentStates) (from, to) -> Stream.of(\n                // Put the batches you wish to return here, e.g. List.of(item1, item2), List.of(item3).\n            )\n        );\n\n        var grpcServer = new GrpcServerImpl(9001, service);\n        grpcServer.start();\n    }\n\n}\n")),(0,n.kt)("p",null,(0,n.kt)("inlineCode",{parentName:"p"},"GrpcServerImpl.java"),":"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-java"},"import com.zepben.evolve.conn.grpc.GrpcServer;\nimport com.zepben.evolve.streaming.get.QueryNetworkStateService;\n\nimport java.util.List;\n\nclass GrpcServerImpl extends GrpcServer {\n\n    GrpcServerImpl(int port, QueryNetworkStateService service) {\n        super(port, 0, null, List.of());\n        getServerBuilder().addService(service);\n    }\n\n}\n"))),(0,n.kt)(o.Z,{value:"java-method",mdxType:"TabItem"},(0,n.kt)("p",null,(0,n.kt)("inlineCode",{parentName:"p"},"Main.java"),":"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-java"},"class Main {\n\n    public static void main(String[] args) {\n        var service = new QueryNetworkStateServiceImpl();\n        var grpcServer = new GrpcServerImpl(9001, service.service);\n        grpcServer.start();\n    }\n\n}\n")),(0,n.kt)("p",null,(0,n.kt)("inlineCode",{parentName:"p"},"GrpcServerImpl.java"),":"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-java"},"import com.zepben.evolve.conn.grpc.GrpcServer;\nimport com.zepben.evolve.streaming.get.QueryNetworkStateService;\n\nimport java.util.List;\n\nclass GrpcServerImpl extends GrpcServer {\n\n    GrpcServerImpl(int port, QueryNetworkStateService service) {\n        super(port, 0, null, List.of());\n        getServerBuilder().addService(service);\n    }\n\n}\n")),(0,n.kt)("p",null,(0,n.kt)("inlineCode",{parentName:"p"},"QueryNetworkStateServiceImpl.java"),":"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-java"},"import com.zepben.evolve.streaming.data.CurrentStateEvent;\nimport com.zepben.evolve.streaming.get.QueryNetworkStateService;\n\nimport java.time.LocalDateTime;\nimport java.util.List;\nimport java.util.stream.Stream;\n\nclass QueryNetworkStateServiceImpl {\n\n    QueryNetworkStateService service = new QueryNetworkStateService(this::getCurrentStates);\n\n    Stream<List<CurrentStateEvent>> getCurrentStates(LocalDateTime from, LocalDateTime to){\n        var batches = ... // Some logic to build the batches of events.\n        return batches.stream();\n    }\n\n}\n"))),(0,n.kt)(o.Z,{value:"kotlin-lambda",mdxType:"TabItem"},(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-kotlin"},"import com.zepben.evolve.conn.grpc.GrpcServer\nimport com.zepben.evolve.streaming.data.CurrentStateEvent\nimport com.zepben.evolve.streaming.get.QueryNetworkStateService\n\nfun main() {\n    val service = QueryNetworkStateService(\n        onGetCurrentStates = { from, to ->\n            sequenceOf(\n                // Put the batches you wish to return here, e.g. List.of(item1, item2), List.of(item3).\n            )\n        }\n    )\n\n    val grpcServer = object : GrpcServer(9001) {\n        init {\n            serverBuilder.addService(service)\n        }\n    }\n    grpcServer.start()\n}\n"))),(0,n.kt)(o.Z,{value:"kotlin-method",mdxType:"TabItem"},(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-kotlin"},"import com.zepben.evolve.conn.grpc.GrpcServer\nimport com.zepben.evolve.streaming.data.CurrentStateEvent\nimport com.zepben.evolve.streaming.get.QueryNetworkStateService\n\nimport java.time.LocalDateTime\n\nclass QueryNetworkStateServiceImpl {\n\n    val service = QueryNetworkStateService(::getCurrentStates);\n\n    fun getCurrentStates(from: LocalDateTime?, to: LocalDateTime?): Sequence<List<CurrentStateEvent>> {\n        val batches = ... // Some logic to build the batches of events.\n        return batches.asSequence()\n    }\n\n}\n\nfun main() {\n    val service = QueryNetworkStateServiceImpl().service\n    val grpcServer = object : GrpcServer(9001) {\n        init {\n            serverBuilder.addService(service)\n        }\n    }\n    grpcServer.start()\n}\n")))))}d.isMDXComponent=!0}}]);