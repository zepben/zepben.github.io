"use strict";(self.webpackChunkevolve_sdk_jvm_doco=self.webpackChunkevolve_sdk_jvm_doco||[]).push([[1613],{3905:(e,t,a)=>{a.d(t,{Zo:()=>u,kt:()=>m});var r=a(7294);function n(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function l(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,r)}return a}function o(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?l(Object(a),!0).forEach((function(t){n(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):l(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function s(e,t){if(null==e)return{};var a,r,n=function(e,t){if(null==e)return{};var a,r,n={},l=Object.keys(e);for(r=0;r<l.length;r++)a=l[r],t.indexOf(a)>=0||(n[a]=e[a]);return n}(e,t);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(r=0;r<l.length;r++)a=l[r],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(n[a]=e[a])}return n}var i=r.createContext({}),c=function(e){var t=r.useContext(i),a=t;return e&&(a="function"==typeof e?e(t):o(o({},t),e)),a},u=function(e){var t=c(e.components);return r.createElement(i.Provider,{value:t},e.children)},p="mdxType",v={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},d=r.forwardRef((function(e,t){var a=e.components,n=e.mdxType,l=e.originalType,i=e.parentName,u=s(e,["components","mdxType","originalType","parentName"]),p=c(a),d=n,m=p["".concat(i,".").concat(d)]||p[d]||v[d]||l;return a?r.createElement(m,o(o({ref:t},u),{},{components:a})):r.createElement(m,o({ref:t},u))}));function m(e,t){var a=arguments,n=t&&t.mdxType;if("string"==typeof e||n){var l=a.length,o=new Array(l);o[0]=d;var s={};for(var i in t)hasOwnProperty.call(t,i)&&(s[i]=t[i]);s.originalType=e,s[p]="string"==typeof e?e:n,o[1]=s;for(var c=2;c<l;c++)o[c]=a[c];return r.createElement.apply(null,o)}return r.createElement.apply(null,a)}d.displayName="MDXCreateElement"},5162:(e,t,a)=>{a.d(t,{Z:()=>o});var r=a(7294),n=a(4334);const l={tabItem:"tabItem_Ymn6"};function o(e){let{children:t,hidden:a,className:o}=e;return r.createElement("div",{role:"tabpanel",className:(0,n.Z)(l.tabItem,o),hidden:a},t)}},4866:(e,t,a)=>{a.d(t,{Z:()=>w});var r=a(7462),n=a(7294),l=a(4334),o=a(2466),s=a(6550),i=a(1980),c=a(7392),u=a(12);function p(e){return function(e){return n.Children.map(e,(e=>{if((0,n.isValidElement)(e)&&"value"in e.props)return e;throw new Error("Docusaurus error: Bad <Tabs> child <"+("string"==typeof e.type?e.type:e.type.name)+'>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.')}))}(e).map((e=>{let{props:{value:t,label:a,attributes:r,default:n}}=e;return{value:t,label:a,attributes:r,default:n}}))}function v(e){const{values:t,children:a}=e;return(0,n.useMemo)((()=>{const e=null!=t?t:p(a);return function(e){const t=(0,c.l)(e,((e,t)=>e.value===t.value));if(t.length>0)throw new Error('Docusaurus error: Duplicate values "'+t.map((e=>e.value)).join(", ")+'" found in <Tabs>. Every value needs to be unique.')}(e),e}),[t,a])}function d(e){let{value:t,tabValues:a}=e;return a.some((e=>e.value===t))}function m(e){let{queryString:t=!1,groupId:a}=e;const r=(0,s.k6)(),l=function(e){let{queryString:t=!1,groupId:a}=e;if("string"==typeof t)return t;if(!1===t)return null;if(!0===t&&!a)throw new Error('Docusaurus error: The <Tabs> component groupId prop is required if queryString=true, because this value is used as the search param name. You can also provide an explicit value such as queryString="my-search-param".');return null!=a?a:null}({queryString:t,groupId:a});return[(0,i._X)(l),(0,n.useCallback)((e=>{if(!l)return;const t=new URLSearchParams(r.location.search);t.set(l,e),r.replace({...r.location,search:t.toString()})}),[l,r])]}function b(e){const{defaultValue:t,queryString:a=!1,groupId:r}=e,l=v(e),[o,s]=(0,n.useState)((()=>function(e){var t;let{defaultValue:a,tabValues:r}=e;if(0===r.length)throw new Error("Docusaurus error: the <Tabs> component requires at least one <TabItem> children component");if(a){if(!d({value:a,tabValues:r}))throw new Error('Docusaurus error: The <Tabs> has a defaultValue "'+a+'" but none of its children has the corresponding value. Available values are: '+r.map((e=>e.value)).join(", ")+". If you intend to show no default tab, use defaultValue={null} instead.");return a}const n=null!=(t=r.find((e=>e.default)))?t:r[0];if(!n)throw new Error("Unexpected error: 0 tabValues");return n.value}({defaultValue:t,tabValues:l}))),[i,c]=m({queryString:a,groupId:r}),[p,b]=function(e){let{groupId:t}=e;const a=function(e){return e?"docusaurus.tab."+e:null}(t),[r,l]=(0,u.Nk)(a);return[r,(0,n.useCallback)((e=>{a&&l.set(e)}),[a,l])]}({groupId:r}),S=(()=>{const e=null!=i?i:p;return d({value:e,tabValues:l})?e:null})();(0,n.useLayoutEffect)((()=>{S&&s(S)}),[S]);return{selectedValue:o,selectValue:(0,n.useCallback)((e=>{if(!d({value:e,tabValues:l}))throw new Error("Can't select invalid tab value="+e);s(e),c(e),b(e)}),[c,b,l]),tabValues:l}}var S=a(2389);const k={tabList:"tabList__CuJ",tabItem:"tabItem_LNqP"};function g(e){let{className:t,block:a,selectedValue:s,selectValue:i,tabValues:c}=e;const u=[],{blockElementScrollPositionUntilNextRender:p}=(0,o.o5)(),v=e=>{const t=e.currentTarget,a=u.indexOf(t),r=c[a].value;r!==s&&(p(t),i(r))},d=e=>{var t;let a=null;switch(e.key){case"Enter":v(e);break;case"ArrowRight":{var r;const t=u.indexOf(e.currentTarget)+1;a=null!=(r=u[t])?r:u[0];break}case"ArrowLeft":{var n;const t=u.indexOf(e.currentTarget)-1;a=null!=(n=u[t])?n:u[u.length-1];break}}null==(t=a)||t.focus()};return n.createElement("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,l.Z)("tabs",{"tabs--block":a},t)},c.map((e=>{let{value:t,label:a,attributes:o}=e;return n.createElement("li",(0,r.Z)({role:"tab",tabIndex:s===t?0:-1,"aria-selected":s===t,key:t,ref:e=>u.push(e),onKeyDown:d,onClick:v},o,{className:(0,l.Z)("tabs__item",k.tabItem,null==o?void 0:o.className,{"tabs__item--active":s===t})}),null!=a?a:t)})))}function h(e){let{lazy:t,children:a,selectedValue:r}=e;if(a=Array.isArray(a)?a:[a],t){const e=a.find((e=>e.props.value===r));return e?(0,n.cloneElement)(e,{className:"margin-top--md"}):null}return n.createElement("div",{className:"margin-top--md"},a.map(((e,t)=>(0,n.cloneElement)(e,{key:t,hidden:e.props.value!==r}))))}function f(e){const t=b(e);return n.createElement("div",{className:(0,l.Z)("tabs-container",k.tabList)},n.createElement(g,(0,r.Z)({},e,t)),n.createElement(h,(0,r.Z)({},e,t)))}function w(e){const t=(0,S.Z)();return n.createElement(f,(0,r.Z)({key:String(t)},e))}},2417:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>u,contentTitle:()=>i,default:()=>m,frontMatter:()=>s,metadata:()=>c,toc:()=>p});var r=a(7462),n=(a(7294),a(3905)),l=a(4866),o=a(5162);const s={id:"update-network-state-service",title:"Update Network State Service"},i=void 0,c={unversionedId:"update-network-state-service",id:"update-network-state-service",title:"Update Network State Service",description:"An implementation of the UpdateNetworkStateService will provide an object-oriented wrapper for the gRPC library, with the ability to update information about",source:"@site/docs/update-network-state-service.mdx",sourceDirName:".",slug:"/update-network-state-service",permalink:"/evolve/docs/jvm-sdk/next/update-network-state-service",draft:!1,tags:[],version:"current",frontMatter:{id:"update-network-state-service",title:"Update Network State Service"},sidebar:"someSidebar",previous:{title:"Update Network State Client",permalink:"/evolve/docs/jvm-sdk/next/update-network-state-client"}},u={},p=[{value:"Creating callbacks",id:"creating-callbacks",level:2},{value:"onSetCurrentStates",id:"onsetcurrentstates",level:3},{value:"Registering callbacks",id:"registering-callbacks",level:2},{value:"Registering the service",id:"registering-the-service",level:2},{value:"Putting it all together",id:"putting-it-all-together",level:2}],v={toc:p},d="wrapper";function m(e){let{components:t,...a}=e;return(0,n.kt)(d,(0,r.Z)({},v,a,{components:t,mdxType:"MDXLayout"}),(0,n.kt)("p",null,"An implementation of the ",(0,n.kt)("inlineCode",{parentName:"p"},"UpdateNetworkStateService")," will provide an object-oriented wrapper for the gRPC library, with the ability to update information about\nthe state of the network. This is done with the following 3 steps:"),(0,n.kt)("ol",null,(0,n.kt)("li",{parentName:"ol"},"Create callbacks which will be called when gRPC messages are received from a client."),(0,n.kt)("li",{parentName:"ol"},"Register the callbacks with an instance of the ",(0,n.kt)("inlineCode",{parentName:"li"},"UpdateNetworkStateService"),"."),(0,n.kt)("li",{parentName:"ol"},"Add your ",(0,n.kt)("inlineCode",{parentName:"li"},"UpdateNetworkStateService")," instance as a gRPC service.")),(0,n.kt)("admonition",{type:"info"},(0,n.kt)("p",{parentName:"admonition"},"The below examples make use of a helper library provided by Zepben, which is included as a transitive dependency of the SDK, or can be ",(0,n.kt)("a",{parentName:"p",href:"https://central.sonatype.com/artifact/com.zepben.evolve/evolve-conn"},"added directly from Maven Central"),"."),(0,n.kt)("p",{parentName:"admonition"},"You do ",(0,n.kt)("em",{parentName:"p"},(0,n.kt)("strong",{parentName:"em"},"NOT"))," have to do this, you can register the services directly with a Netty gRPC (or other) server instead.")),(0,n.kt)("p",null,"The classes you need for performing these actions can be imported from the SDK:"),(0,n.kt)(l.Z,{groupId:"import-example",defaultValue:"java",values:[{label:"Java",value:"java"},{label:"Kotlin",value:"kotlin"}],mdxType:"Tabs"},(0,n.kt)(o.Z,{value:"java",mdxType:"TabItem"},(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-java"},"import com.zepben.evolve.conn.grpc.GrpcServer;\nimport com.zepben.evolve.streaming.data.CurrentStateEvent;\nimport com.zepben.evolve.streaming.data.SetCurrentStatesStatus;\nimport com.zepben.evolve.streaming.mutations.UpdateNetworkStateService;\n"))),(0,n.kt)(o.Z,{value:"kotlin",mdxType:"TabItem"},(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-kotlin"},"import com.zepben.evolve.conn.grpc.GrpcServer\nimport com.zepben.evolve.streaming.data.CurrentStateEvent\nimport com.zepben.evolve.streaming.data.SetCurrentStatesStatus\nimport com.zepben.evolve.streaming.mutations.UpdateNetworkStateService\n")))),(0,n.kt)("h2",{id:"creating-callbacks"},"Creating callbacks"),(0,n.kt)("p",null,"Each supported message in ",(0,n.kt)("inlineCode",{parentName:"p"},"UpdateNetworkStateService")," requires a callback, which will be triggered when any client messages are received. Implementation of these\ncallbacks can be done as either lambdas, or full method/function implementations that can be passed as method references."),(0,n.kt)("h3",{id:"onsetcurrentstates"},"onSetCurrentStates"),(0,n.kt)("p",null,"The ",(0,n.kt)("inlineCode",{parentName:"p"},"onSetCurrentStates")," callback is triggered for each request passing in a batch of current state events, and should return a\n",(0,n.kt)("a",{parentName:"p",href:"/evolve/docs/jvm-sdk/next/update-network-state-client#batch-result-responses"},"batch result response")," to reflect the success or failure of the update process."),(0,n.kt)(l.Z,{groupId:"callback-example",defaultValue:"java",values:[{label:"Java",value:"java"},{label:"Kotlin",value:"kotlin"}],mdxType:"Tabs"},(0,n.kt)(o.Z,{value:"java",mdxType:"TabItem"},(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-java"},"// Using a lambda expression\nFunction<List<CurrentStateEvent>, SetCurrentStatesStatus> updateCurrentStatesLambda  = (events) -> {\n    // process updating of events here and return a batch result response\n};\n\n// Using a method\nclass UpdateNetworkStateServiceImpl {\n\n    SetCurrentStatesStatus updateCurrentStates(List<? extends CurrentStateEvent> events) {\n        // process updating of events here and return a batch result response\n    }\n\n}\n"))),(0,n.kt)(o.Z,{value:"kotlin",mdxType:"TabItem"},(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-kotlin"},"// Using a lambda expression\nvar updateCurrentStatesLambda = { events: List<CurrentStateEvent> ->\n    // process updating of events here and return a batch result response\n}\n\n// Using a method\nclass UpdateNetworkStateServiceImpl {\n\n    fun updateCurrentStates(events: List<CurrentStateEvent>): SetCurrentStatesStatus {\n        // process updating of events here and return a batch result response\n    }\n\n}\n")))),(0,n.kt)("h2",{id:"registering-callbacks"},"Registering callbacks"),(0,n.kt)("p",null,"Registering the callbacks with the service is as simple as passing them into the ",(0,n.kt)("inlineCode",{parentName:"p"},"UpdateNetworkStateService")," constructor."),(0,n.kt)(l.Z,{groupId:"register-example",defaultValue:"java",values:[{label:"Java",value:"java"},{label:"Kotlin",value:"kotlin"}],mdxType:"Tabs"},(0,n.kt)(o.Z,{value:"java",mdxType:"TabItem"},(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-java"},"// Using lambda expressions\nUpdateNetworkStateService service = new UpdateNetworkStateService(updateCurrentStatesLambda);\n\n// Using method references\nclass UpdateNetworkStateServiceImpl {\n\n    UpdateNetworkStateService service = new UpdateNetworkStateService(this::updateCurrentStates);\n\n}\n"))),(0,n.kt)(o.Z,{value:"kotlin",mdxType:"TabItem"},(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-kotlin"},"// Using lambda expressions\nval service = UpdateNetworkStateService(updateCurrentStatesLambda)\n\n// Using method references\nclass UpdateNetworkStateServiceImpl {\n\n    val service = UpdateNetworkStateService(::updateCurrentStates);\n\n}\n")))),(0,n.kt)("h2",{id:"registering-the-service"},"Registering the service"),(0,n.kt)("p",null,"For the above code to have any effect, you need to register the service with a gRPC server. Once this has been done, you should start to receive callbacks for\neach request sent from a gRPC client."),(0,n.kt)(l.Z,{groupId:"code-example",defaultValue:"java",values:[{label:"Java",value:"java"},{label:"Kotlin",value:"kotlin"}],mdxType:"Tabs"},(0,n.kt)(o.Z,{value:"java",mdxType:"TabItem"},(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-java"},"class Main {\n\n    public static void main(String[] args) {\n        var grpcServer = new GrpcServerImpl(9001, service);\n        grpcServer.start();\n    }\n\n    class GrpcServerImpl extends GrpcServer {\n\n        GrpcServerImpl(int port, UpdateNetworkStateService service) {\n            super(port, 0, null, List.of());\n            getServerBuilder().addService(service);\n        }\n\n    }\n\n}\n"))),(0,n.kt)(o.Z,{value:"kotlin",mdxType:"TabItem"},(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-kotlin"},"fun main() {\n    val grpcServer = object : GrpcServer(9001) {\n        init {\n            serverBuilder.addService(service)\n        }\n    }\n    grpcServer.start()\n}\n")))),(0,n.kt)("h2",{id:"putting-it-all-together"},"Putting it all together"),(0,n.kt)("p",null,"Putting each of the steps above together, you can build the scaffold of a working application"),(0,n.kt)(l.Z,{groupId:"code-example",defaultValue:"java-lambda",values:[{label:"Java Lambdas",value:"java-lambda"},{label:"Java Methods",value:"java-method"},{label:"Kotlin Lambdas",value:"kotlin-lambda"},{label:"Kotlin Methods",value:"kotlin-method"}],mdxType:"Tabs"},(0,n.kt)(o.Z,{value:"java-lambda",mdxType:"TabItem"},(0,n.kt)("p",null,(0,n.kt)("inlineCode",{parentName:"p"},"Main.java"),":"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-java"},"import com.zepben.evolve.streaming.mutations.UpdateNetworkStateService;\n\nclass Main {\n\n    public static void main(String[] args) {\n        UpdateNetworkStateService service = new UpdateNetworkStateService(\n            (events) -> {\n                // process updating of events here and return a batch result response\n            });\n\n        var grpcServer = new GrpcServerImpl(9001, service);\n        grpcServer.start();\n    }\n\n}\n")),(0,n.kt)("p",null,(0,n.kt)("inlineCode",{parentName:"p"},"GrpcServerImpl.java"),":"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-java"},"import com.zepben.evolve.conn.grpc.GrpcServer;\nimport com.zepben.evolve.streaming.mutations.UpdateNetworkStateService;\n\nimport java.util.List;\n\nclass GrpcServerImpl extends GrpcServer {\n\n    GrpcServerImpl(int port, UpdateNetworkStateService service) {\n        super(port, 0, null, List.of());\n        getServerBuilder().addService(service);\n    }\n\n}\n"))),(0,n.kt)(o.Z,{value:"java-method",mdxType:"TabItem"},(0,n.kt)("p",null,(0,n.kt)("inlineCode",{parentName:"p"},"Main.java"),":"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-java"},"class Main {\n\n    public static void main(String[] args) {\n        var service = new UpdateNetworkStateServiceImpl();\n        var grpcServer = new GrpcServerImpl(9001, service.service);\n        grpcServer.start();\n    }\n\n}\n")),(0,n.kt)("p",null,(0,n.kt)("inlineCode",{parentName:"p"},"GrpcServerImpl.java"),":"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-java"},"import com.zepben.evolve.conn.grpc.GrpcServer;\nimport com.zepben.evolve.streaming.mutations.UpdateNetworkStateService;\n\nimport java.util.List;\n\nclass GrpcServerImpl extends GrpcServer {\n\n    GrpcServerImpl(int port, UpdateNetworkStateService service) {\n        super(port, 0, null, List.of());\n        getServerBuilder().addService(service);\n    }\n\n}\n")),(0,n.kt)("p",null,(0,n.kt)("inlineCode",{parentName:"p"},"UpdateNetworkStateServiceImpl.java"),":"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-java"},"import com.zepben.evolve.streaming.data.CurrentStateEvent;\nimport com.zepben.evolve.streaming.data.SetCurrentStatesStatus;\nimport com.zepben.evolve.streaming.mutations.UpdateNetworkStateService;\n\nimport java.util.List;\n\nclass UpdateNetworkStateServiceImpl {\n    UpdateNetworkStateService service = new UpdateNetworkStateService(this::updateCurrentStates);\n\n    SetCurrentStatesStatus updateCurrentStates(List<? extends CurrentStateEvent> events) {\n        // process updating of events here and return a batch result response\n    }\n\n}\n"))),(0,n.kt)(o.Z,{value:"kotlin-lambda",mdxType:"TabItem"},(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-kotlin"},"import com.zepben.evolve.conn.grpc.GrpcServer\nimport com.zepben.evolve.streaming.data.CurrentStateEvent\nimport com.zepben.evolve.streaming.mutations.UpdateNetworkStateService\n\nfun main() {\n    val service = UpdateNetworkStateService(onSetCurrentStates = { events: List<CurrentStateEvent> ->\n        // process updating of events here and return a batch result response\n    })\n\n    val grpcServer = object : GrpcServer(9001) {\n        init {\n            serverBuilder.addService(service)\n        }\n    }\n    grpcServer.start()\n}\n"))),(0,n.kt)(o.Z,{value:"kotlin-method",mdxType:"TabItem"},(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-kotlin"},"import com.zepben.evolve.conn.grpc.GrpcServer\nimport com.zepben.evolve.streaming.data.CurrentStateEvent\nimport com.zepben.evolve.streaming.data.SetCurrentStatesStatus\nimport com.zepben.evolve.streaming.mutations.UpdateNetworkStateService\n\nclass UpdateNetworkStateServiceImpl {\n\n    val service = UpdateNetworkStateService(::updateCurrentStates);\n\n    fun updateCurrentStates(events: List<CurrentStateEvent>): SetCurrentStatesStatus {\n        // process updating of events here and return a batch result response\n    }\n\n}\n\nfun main() {\n    val service = UpdateNetworkStateServiceImpl().service\n    val grpcServer = object : GrpcServer(9001) {\n        init {\n            serverBuilder.addService(service)\n        }\n    }\n    grpcServer.start()\n}\n")))))}m.isMDXComponent=!0}}]);