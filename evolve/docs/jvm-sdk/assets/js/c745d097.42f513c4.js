"use strict";(self.webpackChunkevolve_sdk_jvm_doco=self.webpackChunkevolve_sdk_jvm_doco||[]).push([[2818],{3905:(e,t,n)=>{n.d(t,{Zo:()=>c,kt:()=>h});var a=n(7294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function l(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?l(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):l(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function o(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},l=Object.keys(e);for(a=0;a<l.length;a++)n=l[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(a=0;a<l.length;a++)n=l[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var s=a.createContext({}),u=function(e){var t=a.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},c=function(e){var t=u(e.components);return a.createElement(s.Provider,{value:t},e.children)},p="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},m=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,l=e.originalType,s=e.parentName,c=o(e,["components","mdxType","originalType","parentName"]),p=u(n),m=r,h=p["".concat(s,".").concat(m)]||p[m]||d[m]||l;return n?a.createElement(h,i(i({ref:t},c),{},{components:n})):a.createElement(h,i({ref:t},c))}));function h(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var l=n.length,i=new Array(l);i[0]=m;var o={};for(var s in t)hasOwnProperty.call(t,s)&&(o[s]=t[s]);o.originalType=e,o[p]="string"==typeof e?e:r,i[1]=o;for(var u=2;u<l;u++)i[u]=n[u];return a.createElement.apply(null,i)}return a.createElement.apply(null,n)}m.displayName="MDXCreateElement"},5162:(e,t,n)=>{n.d(t,{Z:()=>i});var a=n(7294),r=n(4334);const l={tabItem:"tabItem_Ymn6"};function i(e){let{children:t,hidden:n,className:i}=e;return a.createElement("div",{role:"tabpanel",className:(0,r.Z)(l.tabItem,i),hidden:n},t)}},4866:(e,t,n)=>{n.d(t,{Z:()=>y});var a=n(7462),r=n(7294),l=n(4334),i=n(2466),o=n(6550),s=n(1980),u=n(7392),c=n(12);function p(e){return function(e){return r.Children.map(e,(e=>{if((0,r.isValidElement)(e)&&"value"in e.props)return e;throw new Error("Docusaurus error: Bad <Tabs> child <"+("string"==typeof e.type?e.type:e.type.name)+'>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.')}))}(e).map((e=>{let{props:{value:t,label:n,attributes:a,default:r}}=e;return{value:t,label:n,attributes:a,default:r}}))}function d(e){const{values:t,children:n}=e;return(0,r.useMemo)((()=>{const e=null!=t?t:p(n);return function(e){const t=(0,u.l)(e,((e,t)=>e.value===t.value));if(t.length>0)throw new Error('Docusaurus error: Duplicate values "'+t.map((e=>e.value)).join(", ")+'" found in <Tabs>. Every value needs to be unique.')}(e),e}),[t,n])}function m(e){let{value:t,tabValues:n}=e;return n.some((e=>e.value===t))}function h(e){let{queryString:t=!1,groupId:n}=e;const a=(0,o.k6)(),l=function(e){let{queryString:t=!1,groupId:n}=e;if("string"==typeof t)return t;if(!1===t)return null;if(!0===t&&!n)throw new Error('Docusaurus error: The <Tabs> component groupId prop is required if queryString=true, because this value is used as the search param name. You can also provide an explicit value such as queryString="my-search-param".');return null!=n?n:null}({queryString:t,groupId:n});return[(0,s._X)(l),(0,r.useCallback)((e=>{if(!l)return;const t=new URLSearchParams(a.location.search);t.set(l,e),a.replace({...a.location,search:t.toString()})}),[l,a])]}function v(e){const{defaultValue:t,queryString:n=!1,groupId:a}=e,l=d(e),[i,o]=(0,r.useState)((()=>function(e){var t;let{defaultValue:n,tabValues:a}=e;if(0===a.length)throw new Error("Docusaurus error: the <Tabs> component requires at least one <TabItem> children component");if(n){if(!m({value:n,tabValues:a}))throw new Error('Docusaurus error: The <Tabs> has a defaultValue "'+n+'" but none of its children has the corresponding value. Available values are: '+a.map((e=>e.value)).join(", ")+". If you intend to show no default tab, use defaultValue={null} instead.");return n}const r=null!=(t=a.find((e=>e.default)))?t:a[0];if(!r)throw new Error("Unexpected error: 0 tabValues");return r.value}({defaultValue:t,tabValues:l}))),[s,u]=h({queryString:n,groupId:a}),[p,v]=function(e){let{groupId:t}=e;const n=function(e){return e?"docusaurus.tab."+e:null}(t),[a,l]=(0,c.Nk)(n);return[a,(0,r.useCallback)((e=>{n&&l.set(e)}),[n,l])]}({groupId:a}),k=(()=>{const e=null!=s?s:p;return m({value:e,tabValues:l})?e:null})();(0,r.useLayoutEffect)((()=>{k&&o(k)}),[k]);return{selectedValue:i,selectValue:(0,r.useCallback)((e=>{if(!m({value:e,tabValues:l}))throw new Error("Can't select invalid tab value="+e);o(e),u(e),v(e)}),[u,v,l]),tabValues:l}}var k=n(2389);const w={tabList:"tabList__CuJ",tabItem:"tabItem_LNqP"};function f(e){let{className:t,block:n,selectedValue:o,selectValue:s,tabValues:u}=e;const c=[],{blockElementScrollPositionUntilNextRender:p}=(0,i.o5)(),d=e=>{const t=e.currentTarget,n=c.indexOf(t),a=u[n].value;a!==o&&(p(t),s(a))},m=e=>{var t;let n=null;switch(e.key){case"Enter":d(e);break;case"ArrowRight":{var a;const t=c.indexOf(e.currentTarget)+1;n=null!=(a=c[t])?a:c[0];break}case"ArrowLeft":{var r;const t=c.indexOf(e.currentTarget)-1;n=null!=(r=c[t])?r:c[c.length-1];break}}null==(t=n)||t.focus()};return r.createElement("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,l.Z)("tabs",{"tabs--block":n},t)},u.map((e=>{let{value:t,label:n,attributes:i}=e;return r.createElement("li",(0,a.Z)({role:"tab",tabIndex:o===t?0:-1,"aria-selected":o===t,key:t,ref:e=>c.push(e),onKeyDown:m,onClick:d},i,{className:(0,l.Z)("tabs__item",w.tabItem,null==i?void 0:i.className,{"tabs__item--active":o===t})}),null!=n?n:t)})))}function b(e){let{lazy:t,children:n,selectedValue:a}=e;if(n=Array.isArray(n)?n:[n],t){const e=n.find((e=>e.props.value===a));return e?(0,r.cloneElement)(e,{className:"margin-top--md"}):null}return r.createElement("div",{className:"margin-top--md"},n.map(((e,t)=>(0,r.cloneElement)(e,{key:t,hidden:e.props.value!==a}))))}function g(e){const t=v(e);return r.createElement("div",{className:(0,l.Z)("tabs-container",w.tabList)},r.createElement(f,(0,a.Z)({},e,t)),r.createElement(b,(0,a.Z)({},e,t)))}function y(e){const t=(0,k.Z)();return r.createElement(g,(0,a.Z)({key:String(t)},e))}},6535:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>c,contentTitle:()=>s,default:()=>h,frontMatter:()=>o,metadata:()=>u,toc:()=>p});var a=n(7462),r=(n(7294),n(3905)),l=n(4866),i=n(5162);const o={id:"set-network-state-client",title:"Set Network State Client"},s=void 0,u={unversionedId:"set-network-state-client",id:"set-network-state-client",title:"Set Network State Client",description:"The UpdateNetworkStateClient will allow you to interact with a server running the UpdateNetworkStateService (e.g. EWB). It provides an object-oriented",source:"@site/docs/set-network-state-client.mdx",sourceDirName:".",slug:"/set-network-state-client",permalink:"/evolve/docs/jvm-sdk/next/set-network-state-client",draft:!1,tags:[],version:"current",frontMatter:{id:"set-network-state-client",title:"Set Network State Client"},sidebar:"someSidebar",previous:{title:"Query Network State Service",permalink:"/evolve/docs/jvm-sdk/next/query-network-state-service"}},c={},p=[{value:"Creating a gRPC channel",id:"creating-a-grpc-channel",level:2},{value:"Using a gRPC channel with your client",id:"using-a-grpc-channel-with-your-client",level:2},{value:"Using your client to update the network state",id:"using-your-client-to-update-the-network-state",level:2},{value:"Updating current network state",id:"updating-current-network-state",level:3},{value:"Updating current switch state",id:"updating-current-switch-state",level:4},{value:"Batch result responses",id:"batch-result-responses",level:3}],d={toc:p},m="wrapper";function h(e){let{components:t,...n}=e;return(0,r.kt)(m,(0,a.Z)({},d,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("p",null,"The ",(0,r.kt)("inlineCode",{parentName:"p"},"UpdateNetworkStateClient")," will allow you to interact with a server running the ",(0,r.kt)("inlineCode",{parentName:"p"},"UpdateNetworkStateService")," (e.g. EWB). It provides an object-oriented\nwrapper for the gRPC library, with the ability to update information about the state of the network. This is done with the following 3 steps:"),(0,r.kt)("ol",null,(0,r.kt)("li",{parentName:"ol"},"Create a gRPC connection to the server."),(0,r.kt)("li",{parentName:"ol"},"Create an instance of the ",(0,r.kt)("inlineCode",{parentName:"li"},"UpdateNetworkStateClient")," using your gRPC connection."),(0,r.kt)("li",{parentName:"ol"},"Use your ",(0,r.kt)("inlineCode",{parentName:"li"},"UpdateNetworkStateClient")," to update the state of the network.")),(0,r.kt)("h2",{id:"creating-a-grpc-channel"},"Creating a gRPC channel"),(0,r.kt)("p",null,"The channel gRPC channel can be directly from the gPRC libray, or the channel wrapped in our ",(0,r.kt)("inlineCode",{parentName:"p"},"GrpcChannel")," helper, which implements the ",(0,r.kt)("inlineCode",{parentName:"p"},"AutoClosable")," interface\nand performs shutdown operations for you. At its most basic, this can be achieved with:"),(0,r.kt)(l.Z,{groupId:"code-example",defaultValue:"java",values:[{label:"Java",value:"java"},{label:"Kotlin",value:"kotlin"}],mdxType:"Tabs"},(0,r.kt)(i.Z,{value:"java",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-java"},"import com.zepben.evolve.streaming.grpc.GrpcChannel;\nimport io.grpc.ManagedChannelBuilder;\n\nvar channel = new GrpcChannel(ManagedChannelBuilder.forAddress(host, port).usePlaintext().build());\n"))),(0,r.kt)(i.Z,{value:"kotlin",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-kotlin"},"import com.zepben.evolve.streaming.grpc.GrpcChannel\nimport io.grpc.ManagedChannelBuilder\n\nval channel = GrpcChannel(ManagedChannelBuilder.forAddress(host, port).usePlaintext().build())\n")))),(0,r.kt)("p",null,"For more in depth options for using a gRPC channel, see the (gRPC documentation)","[https://grpc.io/docs/languages/]",", or look up a tutorial."),(0,r.kt)("h2",{id:"using-a-grpc-channel-with-your-client"},"Using a gRPC channel with your client"),(0,r.kt)("p",null,"Using your gRPC channel with the ",(0,r.kt)("inlineCode",{parentName:"p"},"UpdateNetworkStateClient")," is as simple as passing it to the constructor."),(0,r.kt)(l.Z,{groupId:"code-example",defaultValue:"java",values:[{label:"Java",value:"java"},{label:"Kotlin",value:"kotlin"}],mdxType:"Tabs"},(0,r.kt)(i.Z,{value:"java",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-java"},"import com.zepben.evolve.streaming.mutations.UpdateNetworkStateClient;\n\nvar client = new UpdateNetworkStateClient(channel);\n"))),(0,r.kt)(i.Z,{value:"kotlin",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-kotlin"},"import com.zepben.evolve.streaming.mutations.UpdateNetworkStateClient\n\nval client = UpdateNetworkStateClient(channel)\n")))),(0,r.kt)("h2",{id:"using-your-client-to-update-the-network-state"},"Using your client to update the network state"),(0,r.kt)("p",null,"Now that you have a client, you can use it to update the state of the network on the connected server."),(0,r.kt)("h3",{id:"updating-current-network-state"},"Updating current network state"),(0,r.kt)("p",null,"The current state of the network can be updated using the ",(0,r.kt)("inlineCode",{parentName:"p"},"setCurrentStates")," function on the ",(0,r.kt)("inlineCode",{parentName:"p"},"UpdateNetworkStateClient"),". All events passed in the same list will\nbe executed as a batch."),(0,r.kt)("admonition",{type:"note"},(0,r.kt)("p",{parentName:"admonition"},"The current implementation only supports updating the current state of switches. In the future we will add more functionality such as cuts and jumpers.")),(0,r.kt)("h4",{id:"updating-current-switch-state"},"Updating current switch state"),(0,r.kt)("p",null,"The current state of switches can be updating by passing a ",(0,r.kt)("inlineCode",{parentName:"p"},"SwitchStateEvent")," to the ",(0,r.kt)("inlineCode",{parentName:"p"},"setCurrentStates")," function."),(0,r.kt)(l.Z,{groupId:"code-example",defaultValue:"java",values:[{label:"Java",value:"java"},{label:"Kotlin",value:"kotlin"}],mdxType:"Tabs"},(0,r.kt)(i.Z,{value:"java",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-java"},'import com.zepben.evolve.streaming.data.SwitchStateEvent;\nimport com.zepben.evolve.streaming.mutations.UpdateNetworkStateClient;\n\nimport java.time.LocalDateTime;\nimport java.util.List;\n\nvar event1 = new SwitchStateEvent("event1", LocalDateTime.now(), "switch_id_1", SwitchAction.OPEN);\nvar event2 = new SwitchStateEvent("event2", LocalDateTime.now(), "switch_id_2", SwitchAction.CLOSE);\nvar response = client.setCurrentStates(1, List.of(event1));\n'))),(0,r.kt)(i.Z,{value:"kotlin",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-kotlin"},'import com.zepben.evolve.streaming.data.SwitchStateEvent\nimport com.zepben.evolve.streaming.mutations.UpdateNetworkStateClient\n\nval event1 = SwitchStateEvent("event1", LocalDateTime.now(), "switch_id_1", SwitchAction.OPEN)\nval event2 = SwitchStateEvent("event2", LocalDateTime.now(), "switch_id_2", SwitchAction.CLOSE)\nval response = client.setCurrentStates(1, listOf(event1))\n')))),(0,r.kt)("p",null,"If you have multiple batches to send, you can pass a stream/sequence of them rather than calling ",(0,r.kt)("inlineCode",{parentName:"p"},"setCurrentStates")," multiple times"),(0,r.kt)(l.Z,{groupId:"code-example",defaultValue:"java",values:[{label:"Java",value:"java"},{label:"Kotlin",value:"kotlin"}],mdxType:"Tabs"},(0,r.kt)(i.Z,{value:"java",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-java"},'import com.zepben.evolve.streaming.data.SwitchStateEvent;\nimport com.zepben.evolve.streaming.mutations.UpdateNetworkStateClient;\n\nimport java.time.LocalDateTime;\nimport java.util.List;\nimport java.util.stream.Stream;\n\nvar event1 = new SwitchStateEvent("event1", LocalDateTime.now(), "switch_id_1", SwitchAction.OPEN);\nvar event2 = new SwitchStateEvent("event2", LocalDateTime.now(), "switch_id_2", SwitchAction.CLOSE);\nvar batches = Stream.of(\n    new UpdateNetworkStateClient.SetCurrentStatesRequest(1, List.of(event1)),\n    new UpdateNetworkStateClient.SetCurrentStatesRequest(2, List.of(event2))\n);\n\nclient.setCurrentStates(batches).forEach(response ->\n    // Process your responses here. You will get a response per batch.\n);\n'))),(0,r.kt)(i.Z,{value:"kotlin",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-kotlin"},'import com.zepben.evolve.streaming.data.SwitchStateEvent\nimport com.zepben.evolve.streaming.mutations.UpdateNetworkStateClient\n\nimport java.time.LocalDateTime\n\nval event1 = SwitchStateEvent("event1", LocalDateTime.now(), "switch_id_1", SwitchAction.OPEN)\nval event2 = SwitchStateEvent("event2", LocalDateTime.now(), "switch_id_2", SwitchAction.CLOSE)\nval batches = sequenceOf(\n    UpdateNetworkStateClient.SetCurrentStatesRequest(1, listOf(event1)),\n    UpdateNetworkStateClient.SetCurrentStatesRequest(2, listOf(event2))\n)\n\nclient.setCurrentStates(batches).forEach { response ->\n    // Process your responses here. You will get a response per batch.\n}\n')))),(0,r.kt)("h3",{id:"batch-result-responses"},"Batch result responses"),(0,r.kt)("p",null,"Each batch will receive its own response, which will be one of the following:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"BatchSuccessful")," - Indicates that all events in the batch were processed successfully. Events that are ignored because they set the state to one that is\nalready present, or are skipped due to a later event applying the opposite action, will be marked as successful."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"ProcessingPaused")," - Indicates the entire batch was ignore as current state processing in teh server is currently paused. The response will include the time\nthe server was paused."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"BatchFailure")," - Indicates at least one event in the batch could not be applied. Each event that failed will indicate why it failed, some of which will have\nmore impact than others.",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"StateEventUnknownMrid")," - The ",(0,r.kt)("inlineCode",{parentName:"li"},"mRID")," of the event could not be found in the network hosted by this server."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"StateEventDuplicateMrid")," - The ",(0,r.kt)("inlineCode",{parentName:"li"},"mRID")," of an item being added to the network is already in use."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"StateEventInvalidMrid")," - The ",(0,r.kt)("inlineCode",{parentName:"li"},"mRID")," of the item being addressed in the event is of a different type than expected. e.g. You can't remove a ",(0,r.kt)("inlineCode",{parentName:"li"},"Jumper")," with an\n",(0,r.kt)("inlineCode",{parentName:"li"},"mRID")," that belongs to a ",(0,r.kt)("inlineCode",{parentName:"li"},"Cut"),"."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"StateEventUnsupportedPhasing")," - You tried to specify phases that do not make sense to the item being updated. When using the default phasing of ",(0,r.kt)("inlineCode",{parentName:"li"},"NONE")," you\nwill never receive this error. Until un-ganged switching is supported, this error will be returned for all events that specify phases.")))),(0,r.kt)("p",null,"You can check the type of response or failure by check against the types from ",(0,r.kt)("inlineCode",{parentName:"p"},"com.zepben.evolve.streaming.data.*")),(0,r.kt)(l.Z,{groupId:"code-example",defaultValue:"java",values:[{label:"Java",value:"java"},{label:"Kotlin",value:"kotlin"}],mdxType:"Tabs"},(0,r.kt)(i.Z,{value:"java",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-java"},"import com.zepben.evolve.streaming.data.BatchFailure;\nimport com.zepben.evolve.streaming.data.StateEventUnknownMrid;\n\nvar status = response.getStatus();\nif (status instanceof BatchFailure) {\n    var batchFailure = (BatchFailure) status;\n    batchFailure.getPartialFailure(); // Will be true if all event failed, otherwise false.\n    batchFailure.getFailures().forEach((failure) -> {\n        if (failure instanceof StateEventUnknownMrid) {\n            // Process failure\n        }\n    });\n}\n"))),(0,r.kt)(i.Z,{value:"kotlin",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-kotlin"},"when (val status = response.status) {\n    is BatchFailure -> {\n        status.partialFailure // Will be true if all event failed, otherwise false.\n        status.failures.forEach { failure ->\n            when (failure) {\n                is StateEventUnknownMrid -> // Process failure\n            }\n        }\n    }\n}\n")))))}h.isMDXComponent=!0}}]);