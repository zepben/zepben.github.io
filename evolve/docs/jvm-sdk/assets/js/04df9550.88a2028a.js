"use strict";(self.webpackChunkevolve_sdk_jvm_doco=self.webpackChunkevolve_sdk_jvm_doco||[]).push([[9853],{3905:(e,n,a)=>{a.d(n,{Zo:()=>m,kt:()=>b});var r=a(67294);function t(e,n,a){return n in e?Object.defineProperty(e,n,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[n]=a,e}function i(e,n){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),a.push.apply(a,r)}return a}function o(e){for(var n=1;n<arguments.length;n++){var a=null!=arguments[n]?arguments[n]:{};n%2?i(Object(a),!0).forEach((function(n){t(e,n,a[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):i(Object(a)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(a,n))}))}return e}function l(e,n){if(null==e)return{};var a,r,t=function(e,n){if(null==e)return{};var a,r,t={},i=Object.keys(e);for(r=0;r<i.length;r++)a=i[r],n.indexOf(a)>=0||(t[a]=e[a]);return t}(e,n);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)a=i[r],n.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(t[a]=e[a])}return t}var s=r.createContext({}),c=function(e){var n=r.useContext(s),a=n;return e&&(a="function"==typeof e?e(n):o(o({},n),e)),a},m=function(e){var n=c(e.components);return r.createElement(s.Provider,{value:n},e.children)},d="mdxType",u={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},p=r.forwardRef((function(e,n){var a=e.components,t=e.mdxType,i=e.originalType,s=e.parentName,m=l(e,["components","mdxType","originalType","parentName"]),d=c(a),p=t,b=d["".concat(s,".").concat(p)]||d[p]||u[p]||i;return a?r.createElement(b,o(o({ref:n},m),{},{components:a})):r.createElement(b,o({ref:n},m))}));function b(e,n){var a=arguments,t=n&&n.mdxType;if("string"==typeof e||t){var i=a.length,o=new Array(i);o[0]=p;var l={};for(var s in n)hasOwnProperty.call(n,s)&&(l[s]=n[s]);l.originalType=e,l[d]="string"==typeof e?e:t,o[1]=l;for(var c=2;c<i;c++)o[c]=a[c];return r.createElement.apply(null,o)}return r.createElement.apply(null,a)}p.displayName="MDXCreateElement"},85162:(e,n,a)=>{a.d(n,{Z:()=>o});var r=a(67294),t=a(34334);const i={tabItem:"tabItem_Ymn6"};function o(e){let{children:n,hidden:a,className:o}=e;return r.createElement("div",{role:"tabpanel",className:(0,t.Z)(i.tabItem,o),hidden:a},n)}},74866:(e,n,a)=>{a.d(n,{Z:()=>k});var r=a(87462),t=a(67294),i=a(34334),o=a(12466),l=a(16550),s=a(91980),c=a(67392),m=a(50012);function d(e){return function(e){return t.Children.map(e,(e=>{if((0,t.isValidElement)(e)&&"value"in e.props)return e;throw new Error("Docusaurus error: Bad <Tabs> child <"+("string"==typeof e.type?e.type:e.type.name)+'>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.')}))}(e).map((e=>{let{props:{value:n,label:a,attributes:r,default:t}}=e;return{value:n,label:a,attributes:r,default:t}}))}function u(e){const{values:n,children:a}=e;return(0,t.useMemo)((()=>{const e=null!=n?n:d(a);return function(e){const n=(0,c.l)(e,((e,n)=>e.value===n.value));if(n.length>0)throw new Error('Docusaurus error: Duplicate values "'+n.map((e=>e.value)).join(", ")+'" found in <Tabs>. Every value needs to be unique.')}(e),e}),[n,a])}function p(e){let{value:n,tabValues:a}=e;return a.some((e=>e.value===n))}function b(e){let{queryString:n=!1,groupId:a}=e;const r=(0,l.k6)(),i=function(e){let{queryString:n=!1,groupId:a}=e;if("string"==typeof n)return n;if(!1===n)return null;if(!0===n&&!a)throw new Error('Docusaurus error: The <Tabs> component groupId prop is required if queryString=true, because this value is used as the search param name. You can also provide an explicit value such as queryString="my-search-param".');return null!=a?a:null}({queryString:n,groupId:a});return[(0,s._X)(i),(0,t.useCallback)((e=>{if(!i)return;const n=new URLSearchParams(r.location.search);n.set(i,e),r.replace({...r.location,search:n.toString()})}),[i,r])]}function v(e){const{defaultValue:n,queryString:a=!1,groupId:r}=e,i=u(e),[o,l]=(0,t.useState)((()=>function(e){var n;let{defaultValue:a,tabValues:r}=e;if(0===r.length)throw new Error("Docusaurus error: the <Tabs> component requires at least one <TabItem> children component");if(a){if(!p({value:a,tabValues:r}))throw new Error('Docusaurus error: The <Tabs> has a defaultValue "'+a+'" but none of its children has the corresponding value. Available values are: '+r.map((e=>e.value)).join(", ")+". If you intend to show no default tab, use defaultValue={null} instead.");return a}const t=null!=(n=r.find((e=>e.default)))?n:r[0];if(!t)throw new Error("Unexpected error: 0 tabValues");return t.value}({defaultValue:n,tabValues:i}))),[s,c]=b({queryString:a,groupId:r}),[d,v]=function(e){let{groupId:n}=e;const a=function(e){return e?"docusaurus.tab."+e:null}(n),[r,i]=(0,m.Nk)(a);return[r,(0,t.useCallback)((e=>{a&&i.set(e)}),[a,i])]}({groupId:r}),T=(()=>{const e=null!=s?s:d;return p({value:e,tabValues:i})?e:null})();(0,t.useLayoutEffect)((()=>{T&&l(T)}),[T]);return{selectedValue:o,selectValue:(0,t.useCallback)((e=>{if(!p({value:e,tabValues:i}))throw new Error("Can't select invalid tab value="+e);l(e),c(e),v(e)}),[c,v,i]),tabValues:i}}var T=a(72389);const f={tabList:"tabList__CuJ",tabItem:"tabItem_LNqP"};function h(e){let{className:n,block:a,selectedValue:l,selectValue:s,tabValues:c}=e;const m=[],{blockElementScrollPositionUntilNextRender:d}=(0,o.o5)(),u=e=>{const n=e.currentTarget,a=m.indexOf(n),r=c[a].value;r!==l&&(d(n),s(r))},p=e=>{var n;let a=null;switch(e.key){case"Enter":u(e);break;case"ArrowRight":{var r;const n=m.indexOf(e.currentTarget)+1;a=null!=(r=m[n])?r:m[0];break}case"ArrowLeft":{var t;const n=m.indexOf(e.currentTarget)-1;a=null!=(t=m[n])?t:m[m.length-1];break}}null==(n=a)||n.focus()};return t.createElement("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,i.Z)("tabs",{"tabs--block":a},n)},c.map((e=>{let{value:n,label:a,attributes:o}=e;return t.createElement("li",(0,r.Z)({role:"tab",tabIndex:l===n?0:-1,"aria-selected":l===n,key:n,ref:e=>m.push(e),onKeyDown:p,onClick:u},o,{className:(0,i.Z)("tabs__item",f.tabItem,null==o?void 0:o.className,{"tabs__item--active":l===n})}),null!=a?a:n)})))}function y(e){let{lazy:n,children:a,selectedValue:r}=e;if(a=Array.isArray(a)?a:[a],n){const e=a.find((e=>e.props.value===r));return e?(0,t.cloneElement)(e,{className:"margin-top--md"}):null}return t.createElement("div",{className:"margin-top--md"},a.map(((e,n)=>(0,t.cloneElement)(e,{key:n,hidden:e.props.value!==r}))))}function w(e){const n=v(e);return t.createElement("div",{className:(0,i.Z)("tabs-container",f.tabList)},t.createElement(h,(0,r.Z)({},e,n)),t.createElement(y,(0,r.Z)({},e,n)))}function k(e){const n=(0,T.Z)();return t.createElement(w,(0,r.Z)({key:String(n)},e))}},31428:(e,n,a)=>{a.r(n),a.d(n,{assets:()=>m,contentTitle:()=>s,default:()=>b,frontMatter:()=>l,metadata:()=>c,toc:()=>d});var r=a(87462),t=(a(67294),a(3905)),i=a(74866),o=a(85162);const l={id:"sdk-protection",title:"Protection Relays"},s=void 0,c={unversionedId:"sdk-protection",id:"version-1.0.0/sdk-protection",title:"Protection Relays",description:"Protection Relay Functions, Schemes, and Systems",source:"@site/versioned_docs/version-1.0.0/protection.mdx",sourceDirName:".",slug:"/sdk-protection",permalink:"/evolve/docs/jvm-sdk/1.0.0/sdk-protection",draft:!1,tags:[],version:"1.0.0",frontMatter:{id:"sdk-protection",title:"Protection Relays"},sidebar:"someSidebar",previous:{title:"Requesting Models",permalink:"/evolve/docs/jvm-sdk/1.0.0/sdk-consumer"},next:{title:"Ingestion Jobs and Metrics",permalink:"/evolve/docs/jvm-sdk/1.0.0/sdk-metrics"}},m={},d=[{value:"Protection Relay Functions, Schemes, and Systems",id:"protection-relay-functions-schemes-and-systems",level:2},{value:"Grounds and Ground Disconnectors",id:"grounds-and-ground-disconnectors",level:2},{value:"Series Compensators",id:"series-compensators",level:2}],u={toc:d},p="wrapper";function b(e){let{components:n,...a}=e;return(0,t.kt)(p,(0,r.Z)({},u,a,{components:n,mdxType:"MDXLayout"}),(0,t.kt)("h2",{id:"protection-relay-functions-schemes-and-systems"},"Protection Relay Functions, Schemes, and Systems"),(0,t.kt)("p",null,"Each protection relay in the CIM model is implemented in a ",(0,t.kt)("inlineCode",{parentName:"p"},"ProtectionRelayFunction"),", which is composed of a collection of ",(0,t.kt)("inlineCode",{parentName:"p"},"Sensor"),"s, thresholds that determine\nthe conditions that activate the relay, the time limits for each condition before activation, and the ",(0,t.kt)("inlineCode",{parentName:"p"},"ProtectedSwitch"),"es to open when the relay is activated."),(0,t.kt)("p",null,(0,t.kt)("inlineCode",{parentName:"p"},"ProtectionRelayFunction"),"s may be grouped into ",(0,t.kt)("inlineCode",{parentName:"p"},"ProtectionRelayScheme"),"s, each of which belong to a ",(0,t.kt)("inlineCode",{parentName:"p"},"ProtectionRelaySystem"),". A ",(0,t.kt)("inlineCode",{parentName:"p"},"ProtectionRelaySystem")," is a\nphysical piece of equipment containing a suite of ",(0,t.kt)("inlineCode",{parentName:"p"},"ProtectionRelayFunction"),"s, such as a circuit breaker panel. They typically comprise two schemes: main and\nfailsafe."),(0,t.kt)("p",null,"Here is a contrived example of such a system modelled using the Evolve SDK:"),(0,t.kt)(i.Z,{groupId:"code-example",defaultValue:"java",values:[{label:"Java",value:"java"},{label:"Kotlin",value:"kotlin"}],mdxType:"Tabs"},(0,t.kt)(o.Z,{value:"java",mdxType:"TabItem"},(0,t.kt)("pre",null,(0,t.kt)("code",{parentName:"pre",className:"language-java"},'import com.zepben.ewb.cim.iec61970.base.auxiliaryequipment.CurrentTransformer;\nimport com.zepben.ewb.cim.iec61970.base.domain.UnitSymbol;\nimport com.zepben.ewb.cim.iec61970.base.protection.CurrentRelay;\nimport com.zepben.ewb.cim.iec61970.base.protection.ProtectionRelayScheme;\nimport com.zepben.ewb.cim.iec61970.base.protection.ProtectionRelaySystem;\nimport com.zepben.ewb.cim.iec61970.base.protection.RelaySetting;\nimport com.zepben.ewb.cim.iec61970.base.wires.Breaker;\n\nclass ProtectionExample {\n    public static void main(String[] args) {\n        // Breakers for stove, bathroom, and washer are for individual outlets,\n        // whereas the failsafe breaker can disconnect all appliances from power.\n        Breaker stoveBreaker = new Breaker("stoveBreaker");\n        Breaker bathroomBreaker = new Breaker("bathroomBreaker");\n        Breaker washerBreaker = new Breaker("washerBreaker");\n        Breaker failsafeBreaker = new Breaker("failsafeBreaker");\n\n        CurrentTransformer stoveCT = new CurrentTransformer("stoveCT");\n        CurrentTransformer bathroomCT = new CurrentTransformer("bathroomCT");\n        CurrentTransformer washerCT = new CurrentTransformer("washerCT");\n        CurrentTransformer failsafeCT = new CurrentTransformer("failsafeCT");\n\n        CurrentRelay stoveCR = new CurrentRelay("stoveCR");\n        stoveCR.addProtectedSwitch(stoveBreaker);\n        stoveBreaker.addRelayFunction(stoveCR);\n        stoveCR.addSensor(stoveCT);\n        stoveCT.addRelayFunction(stoveCR);\n        stoveCR.addThreshold(new RelaySetting(UnitSymbol.A, 50));\n        stoveCR.addTimeLimit(0.5);\n\n        CurrentRelay bathroomCR = new CurrentRelay("bathroomCR");\n        bathroomCR.addProtectedSwitch(bathroomBreaker);\n        bathroomBreaker.addRelayFunction(bathroomCR);\n        bathroomCR.addSensor(bathroomCT);\n        bathroomCT.addRelayFunction(bathroomCR);\n        bathroomCR.addThreshold(new RelaySetting(UnitSymbol.A, 20));\n        bathroomCR.addTimeLimit(0.1);\n\n        CurrentRelay washerCR = new CurrentRelay("washerCR");\n        washerCR.addProtectedSwitch(washerBreaker);\n        washerBreaker.addRelayFunction(washerCR);\n        washerCR.addSensor(washerCT);\n        washerCT.addRelayFunction(washerCR);\n        washerCR.addThreshold(new RelaySetting(UnitSymbol.A, 20));\n        washerCR.addTimeLimit(0.5);\n\n        CurrentRelay failsafeCR = new CurrentRelay("failsafeCR");\n        failsafeCR.addProtectedSwitch(failsafeBreaker);\n        failsafeBreaker.addRelayFunction(failsafeCR);\n        failsafeCR.addSensor(failsafeCT);\n        failsafeCT.addRelayFunction(failsafeCR);\n        failsafeCR.addThreshold(new RelaySetting(UnitSymbol.A, 90));\n        failsafeCR.addTimeLimit(1.0);\n\n        ProtectionRelayScheme mainScheme = new ProtectionRelayScheme("mainScheme");\n        mainScheme.addFunction(stoveCR);\n        mainScheme.addFunction(bathroomCR);\n        mainScheme.addFunction(washerCR);\n        stoveCR.addScheme(mainScheme);\n        bathroomCR.addScheme(mainScheme);\n        washerCR.addScheme(mainScheme);\n\n        ProtectionRelayScheme failsafeScheme = new ProtectionRelayScheme("failsafe");\n        failsafeScheme.addFunction(failsafeCR);\n        failsafeCR.addScheme(failsafeScheme);\n\n        ProtectionRelaySystem system = new ProtectionRelaySystem("system");\n        system.addScheme(mainScheme);\n        system.addScheme(failsafeScheme);\n        mainScheme.setSystem(system);\n        failsafeScheme.setSystem(system);\n    }\n}\n'))),(0,t.kt)(o.Z,{value:"kotlin",mdxType:"TabItem"},(0,t.kt)("pre",null,(0,t.kt)("code",{parentName:"pre",className:"language-kotlin"},'import com.zepben.ewb.cim.iec61970.base.auxiliaryequipment.CurrentTransformer\nimport com.zepben.ewb.cim.iec61970.base.domain.UnitSymbol\nimport com.zepben.ewb.cim.iec61970.base.protection.CurrentRelay\nimport com.zepben.ewb.cim.iec61970.base.protection.ProtectionRelayScheme\nimport com.zepben.ewb.cim.iec61970.base.protection.ProtectionRelaySystem\nimport com.zepben.ewb.cim.iec61970.base.protection.RelaySetting\nimport com.zepben.ewb.cim.iec61970.base.wires.Breaker\n\nfun main() {\n    // Breakers for stove, bathroom, and washer are for individual outlets,\n    // whereas the failsafe breaker can disconnect all appliances from power.\n    val stoveBreaker = Breaker("stoveBreaker")\n    val bathroomBreaker = Breaker("bathroomBreaker")\n    val washerBreaker = Breaker("washerBreaker")\n    val failsafeBreaker = Breaker("failsafeBreaker")\n\n    val stoveCT = CurrentTransformer("stoveCT")\n    val bathroomCT = CurrentTransformer("bathroomCT")\n    val washerCT = CurrentTransformer("washerCT")\n    val failsafeCT = CurrentTransformer("failsafeCT")\n\n    val stoveCR = CurrentRelay("stoveCR").apply {\n        addProtectedSwitch(stoveBreaker)\n        addSensor(stoveCT)\n        addThreshold(RelaySetting(UnitSymbol.A, 50.0))\n        addTimeLimit(0.5)\n    }.also {\n        stoveBreaker.addRelayFunction(it)\n        stoveCT.addRelayFunction(it)\n    }\n\n    val bathroomCR = CurrentRelay("bathroomCR").apply {\n        addProtectedSwitch(bathroomBreaker)\n        addSensor(bathroomCT)\n        addThreshold(RelaySetting(UnitSymbol.A, 50.0))\n        addTimeLimit(0.5)\n    }.also {\n        bathroomBreaker.addRelayFunction(it)\n        bathroomCT.addRelayFunction(it)\n    }\n\n    val washerCR = CurrentRelay("washerCR").apply {\n        addProtectedSwitch(washerBreaker)\n        addSensor(washerCT)\n        addThreshold(RelaySetting(UnitSymbol.A, 50.0))\n        addTimeLimit(0.5)\n    }.also {\n        washerBreaker.addRelayFunction(it)\n        washerCT.addRelayFunction(it)\n    }\n\n    val failsafeCR = CurrentRelay("failsafeCR").apply {\n        addProtectedSwitch(failsafeBreaker)\n        addSensor(failsafeCT)\n        addThreshold(RelaySetting(UnitSymbol.A, 50.0))\n        addTimeLimit(0.5)\n    }.also {\n        failsafeBreaker.addRelayFunction(it)\n        failsafeCT.addRelayFunction(it)\n    }\n\n    val mainScheme = ProtectionRelayScheme("main").apply {\n        addFunction(stoveCR)\n        addFunction(bathroomCR)\n        addFunction(washerCR)\n    }.also {\n        stoveCR.addScheme(it)\n        bathroomCR.addScheme(it)\n        washerCR.addScheme(it)\n    }\n\n    val failsafeScheme = ProtectionRelayScheme("failsafe").apply {\n        addFunction(failsafeCR)\n    }.also {\n        failsafeCR.addScheme(it)\n    }\n\n    val system = ProtectionRelaySystem("system").apply {\n        addScheme(mainScheme)\n        addScheme(failsafeScheme)\n    }.also {\n        mainScheme.system = it\n        failsafeScheme.system = it\n    }\n}\n')))),(0,t.kt)("p",null,"For brevity, this example excludes modelling of connectivity between the sensors and breakers."),(0,t.kt)("h2",{id:"grounds-and-ground-disconnectors"},"Grounds and Ground Disconnectors"),(0,t.kt)("p",null,"To aid in modelling protection systems, our network data model also supports explicit modelling of grounds and ground disconnectors:"),(0,t.kt)(i.Z,{groupId:"code-example",defaultValue:"java",values:[{label:"Java",value:"java"},{label:"Kotlin",value:"kotlin"}],mdxType:"Tabs"},(0,t.kt)(o.Z,{value:"java",mdxType:"TabItem"},(0,t.kt)("pre",null,(0,t.kt)("code",{parentName:"pre",className:"language-java"},'import com.zepben.ewb.cim.iec61970.base.core.IdentifiedObject;\nimport com.zepben.ewb.cim.iec61970.base.core.Terminal;\nimport com.zepben.ewb.cim.iec61970.base.wires.Ground;\nimport com.zepben.ewb.cim.iec61970.base.wires.GroundDisconnector;\nimport com.zepben.ewb.cim.iec61970.base.wires.Junction;\nimport com.zepben.ewb.services.network.NetworkService;\n\nclass GroundExample {\n    public static void main(String[] args) {\n        // junction --- ground disconnector --- ground\n        NetworkService networkService = new NetworkService();\n\n        Ground ground = new Ground("ground");\n        Terminal groundTerminal = new Terminal("ground-t1");\n        ground.addTerminal(groundTerminal);\n\n        GroundDisconnector gd = new GroundDisconnector("gd");\n        Terminal gdTerminal1 = new Terminal("gd-t1");\n        Terminal gdTerminal2 = new Terminal("gd-t2");\n        gd.addTerminal(gdTerminal1);\n        gd.addTerminal(gdTerminal2);\n\n        Junction junction = new Junction("junction");\n        Terminal junctionTerminal = new Terminal("junction-t1");\n        junction.addTerminal(junctionTerminal);\n\n        networkService.connect(junctionTerminal, gdTerminal1);\n        networkService.connect(gdTerminal2, groundTerminal);\n\n        for (IdentifiedObject io: new IdentifiedObject[]{ground, groundTerminal, gd, gdTerminal1, gdTerminal2, junctionTerminal}) {\n            networkService.tryAdd(io);\n        }\n    }\n}\n'))),(0,t.kt)(o.Z,{value:"kotlin",mdxType:"TabItem"},(0,t.kt)("pre",null,(0,t.kt)("code",{parentName:"pre",className:"language-kotlin"},'import com.zepben.ewb.cim.iec61970.base.core.Terminal\nimport com.zepben.ewb.cim.iec61970.base.wires.Ground\nimport com.zepben.ewb.cim.iec61970.base.wires.GroundDisconnector\nimport com.zepben.ewb.cim.iec61970.base.wires.Junction\nimport com.zepben.ewb.services.network.NetworkService\n\nfun main() {\n    // junction --- ground disconnector --- ground\n    val networkService = NetworkService()\n\n    val groundTerminal = Terminal("ground-t1")\n    val ground = Ground("ground").apply { addTerminal(groundTerminal) }\n\n    val gdTerminal1 = Terminal("gd-t1")\n    val gdTerminal2 = Terminal("gd-t2")\n    val gd = GroundDisconnector("gd").apply { addTerminal(gdTerminal1); addTerminal(gdTerminal2) }\n\n    val junctionTerminal = Terminal("junction-t1")\n    val junction = Junction("junction").apply { addTerminal(junctionTerminal) }\n\n    networkService.connect(junctionTerminal, gdTerminal1)\n    networkService.connect(gdTerminal2, groundTerminal)\n    for (io in sequenceOf(ground, groundTerminal, gd, gdTerminal1, gdTerminal2, junctionTerminal)) {\n        networkService.tryAdd(io)\n    }\n}\n')))),(0,t.kt)("h2",{id:"series-compensators"},"Series Compensators"),(0,t.kt)("p",null,"The Evolve SDK also supports modelling series compensators, which are series capacitors and reactors or an AC transmission line without charging susceptance."),(0,t.kt)(i.Z,{groupId:"code-example",defaultValue:"java",values:[{label:"Java",value:"java"},{label:"Kotlin",value:"kotlin"}],mdxType:"Tabs"},(0,t.kt)(o.Z,{value:"java",mdxType:"TabItem"},(0,t.kt)("pre",null,(0,t.kt)("code",{parentName:"pre",className:"language-java"},'import com.zepben.ewb.cim.iec61970.base.core.IdentifiedObject;\nimport com.zepben.ewb.cim.iec61970.base.core.Terminal;\nimport com.zepben.ewb.cim.iec61970.base.wires.AcLineSegment;\nimport com.zepben.ewb.cim.iec61970.base.wires.SeriesCompensator;\nimport com.zepben.ewb.services.network.NetworkService;\n\nclass SeriesCompensatorExample {\n    public static void main(String[] args) {\n        // AC line 1 --- series compensator -- AC line 2\n        NetworkService networkService = new NetworkService();\n\n        AcLineSegment acls1 = new AcLineSegment("acls1");\n        Terminal acls1Terminal1 = new Terminal("acls1-t1");\n        Terminal acls1Terminal2 = new Terminal("acls1-t2");\n        acls1.addTerminal(acls1Terminal1);\n        acls1.addTerminal(acls1Terminal2);\n\n        AcLineSegment acls2 = new AcLineSegment("acls2");\n        Terminal acls2Terminal1 = new Terminal("acls2-t1");\n        Terminal acls2Terminal2 = new Terminal("acls2-t2");\n        acls2.addTerminal(acls2Terminal1);\n        acls2.addTerminal(acls2Terminal2);\n\n        SeriesCompensator sc = new SeriesCompensator("sc");\n        // dummy (likely unrealistic) values\n        sc.setR(1.0);\n        sc.setR0(1.5);\n        sc.setX(123.0);\n        sc.setX0(125.0);\n        sc.setVaristorVoltageThreshold(10);\n        sc.setVaristorRatedCurrent(5);\n        Terminal scTerminal1 = new Terminal("sc-t1");\n        Terminal scTerminal2 = new Terminal("sc-t2");\n        sc.addTerminal(scTerminal1);\n        sc.addTerminal(scTerminal2);\n\n        networkService.connect(acls1Terminal2, scTerminal1);\n        networkService.connect(scTerminal2, acls2Terminal1);\n\n        for (IdentifiedObject io: new IdentifiedObject[]{\n            acls1, acls1Terminal1, acls1Terminal2, acls2, acls2Terminal1, acls2Terminal2, sc, scTerminal1, scTerminal2\n        }) {\n            networkService.tryAdd(io);\n        }\n    }\n}\n'))),(0,t.kt)(o.Z,{value:"kotlin",mdxType:"TabItem"},(0,t.kt)("pre",null,(0,t.kt)("code",{parentName:"pre",className:"language-kotlin"},'import com.zepben.ewb.cim.iec61970.base.core.Terminal\nimport com.zepben.ewb.cim.iec61970.base.wires.AcLineSegment\nimport com.zepben.ewb.cim.iec61970.base.wires.SeriesCompensator\nimport com.zepben.ewb.services.network.NetworkService\n\nfun main() {\n    // AC line 1 --- series compensator -- AC line 2\n    val networkService = NetworkService()\n\n    val acls1Terminal1 = Terminal("acls1-t1")\n    val acls1Terminal2 = Terminal("acls1-t2")\n    val acls1 = AcLineSegment("acls1").apply {\n        addTerminal(acls1Terminal1)\n        addTerminal(acls1Terminal2)\n    }\n\n    val acls2Terminal1 = Terminal("acls2-t1")\n    val acls2Terminal2 = Terminal("acls2-t2")\n    val acls2 = AcLineSegment("acls2").apply {\n        addTerminal(acls2Terminal1)\n        addTerminal(acls2Terminal2)\n    }\n\n    val scTerminal1 = Terminal("sc-t1")\n    val scTerminal2 = Terminal("sc-t2")\n    val sc = SeriesCompensator("sc").apply {\n        // dummy (likely unrealistic) values\n        r = 1.0\n        r0 = 1.5\n        x = 123.0\n        x0 = 125.0\n        varistorVoltageThreshold = 10\n        varistorRatedCurrent = 5\n        addTerminal(scTerminal1)\n        addTerminal(scTerminal2)\n    }\n\n    networkService.connect(acls1Terminal2, scTerminal1)\n    networkService.connect(scTerminal2, acls2Terminal1)\n\n    for (io in sequenceOf(acls1, acls1Terminal1, acls1Terminal2, acls2, acls2Terminal1, acls2Terminal2, sc, scTerminal1, scTerminal2)) {\n        networkService.tryAdd(io)\n    }\n}\n')))))}b.isMDXComponent=!0}}]);