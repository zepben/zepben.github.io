"use strict";(self.webpackChunkpower_factory_exporter_doco=self.webpackChunkpower_factory_exporter_doco||[]).push([[329],{3905:function(e,t,n){n.d(t,{Zo:function(){return u},kt:function(){return f}});var o=n(7294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);t&&(o=o.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,o)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,o,r=function(e,t){if(null==e)return{};var n,o,r={},a=Object.keys(e);for(o=0;o<a.length;o++)n=a[o],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(o=0;o<a.length;o++)n=a[o],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var l=o.createContext({}),c=function(e){var t=o.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},u=function(e){var t=c(e.components);return o.createElement(l.Provider,{value:t},e.children)},p="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return o.createElement(o.Fragment,{},t)}},m=o.forwardRef((function(e,t){var n=e.components,r=e.mdxType,a=e.originalType,l=e.parentName,u=s(e,["components","mdxType","originalType","parentName"]),p=c(n),m=r,f=p["".concat(l,".").concat(m)]||p[m]||d[m]||a;return n?o.createElement(f,i(i({ref:t},u),{},{components:n})):o.createElement(f,i({ref:t},u))}));function f(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var a=n.length,i=new Array(a);i[0]=m;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s[p]="string"==typeof e?e:r,i[1]=s;for(var c=2;c<a;c++)i[c]=n[c];return o.createElement.apply(null,i)}return o.createElement.apply(null,n)}m.displayName="MDXCreateElement"},1583:function(e,t,n){n.r(t),n.d(t,{assets:function(){return u},contentTitle:function(){return l},default:function(){return f},frontMatter:function(){return s},metadata:function(){return c},toc:function(){return p}});var o=n(7462),r=n(3366),a=(n(7294),n(3905)),i=["components"],s={},l="power-factory-exporter",c={unversionedId:"overview",id:"version-0.8.0/overview",title:"power-factory-exporter",description:"Power factory exporter library - Maps network data from Cim to power factory compatible DGS format.",source:"@site/versioned_docs/version-0.8.0/overview.mdx",sourceDirName:".",slug:"/overview",permalink:"/evolve/docs/power-factory-exporter/0.8.0/overview",draft:!1,tags:[],version:"0.8.0",frontMatter:{},sidebar:"someSidebar"},u={},p=[{value:"Starting \ud83d\ude80",id:"starting-",level:2},{value:"Maven",id:"maven",level:2},{value:"Usage",id:"usage",level:2},{value:"Configuration",id:"configuration",level:2}],d={toc:p},m="wrapper";function f(e){var t=e.components,n=(0,r.Z)(e,i);return(0,a.kt)(m,(0,o.Z)({},d,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"power-factory-exporter"},"power-factory-exporter"),(0,a.kt)("p",null,"Power factory exporter library - Maps network data from Cim to power factory compatible DGS format."),(0,a.kt)("h2",{id:"starting-"},"Starting \ud83d\ude80"),(0,a.kt)("p",null,"These instructions will allow you to get a copy of the project running\non your local machine for development and testing purposes and/or running a docker container as well."),(0,a.kt)("h2",{id:"maven"},"Maven"),(0,a.kt)("p",null,"Add to your pom.xml:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"<dependency>\n    <groupId>com.zepben.powerfactory</groupId>\n    <artifactId>exporter</artifactId>\n    <version>0.7.0</version>\n</dependency>\n")),(0,a.kt)("h2",{id:"usage"},"Usage"),(0,a.kt)("p",null,"For a basic example of using the power factory exporter refer to the demonstration code in file ",(0,a.kt)("inlineCode",{parentName:"p"},"com.zepben.powerfactory.exporter.demo.Demo.kt")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-kotlin"},'    val logger: Logger = LoggerFactory.getLogger("main")\n\n    GrpcChannelFactory.create(ConnectionConfig(demoConfig.ewb.host, demoConfig.ewb.grpcPort, demoConfig.ewb.secureConnection)).use { channel ->\n        val dgsGenerator = DgsGenerator(DgsGenerator.Config(), XlsxDgsWriter()) { NetworkConsumerClient(channel) }\n\n        when (val result = dgsGenerator.generate(demoConfig.generationConfig)) {\n            is DgsGenerationResult.Success<XSSFWorkbook> -> {\n                writeFile(result.dgs, "output/model.xlsx")\n            }\n\n            is DgsGenerationResult.Failure<*> -> {\n                logger.error("Failed to create model with the following errors:")\n                result.errors.forEach { (m, t) -> logger.error(m, t) }\n            }\n        }\n    }\n')),(0,a.kt)("h2",{id:"configuration"},"Configuration"),(0,a.kt)("p",null,"For a basic example of model generation configuration, refer to the demonstration code in file ",(0,a.kt)("inlineCode",{parentName:"p"},"com.zepben.powerfactory.exporter.demo.demo_config.json")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-kotlin"},'    {\n      "ewb": {\n        "host": "<ewb host>",\n        "grpcPort": 8080,\n        "secureConnection": false\n      },\n      "generationConfig": {\n        "equipmentContainerMrids": [\n          "<substation>",\n          "<feeder>",\n          "<lvfeeder>"\n        ],\n        "distributionTransformerConfig": {\n          "rGround": 0.01,\n          "xGround": 0.01\n        },\n        "feederMaxLoadFilePath": "<path to feeder_max_load.csv>",\n        "hvcMaxDemandFilePath": "<path to HVC_Max_Demand.csv>",\n        "nmiFilePath": "<path to nmi_File_Path.csv>",\n        "loadConfig": {\n          "spreadMaxDemand": false\n        }\n      },\n      "exporterConfig": {\n        "feederColourPath": "<path to feeder_colour.json>"\n      },\n      "scenarioConfig": {\n        "scenarioID": "scenarioID",\n        "years": [\n          2024,\n          2025\n        ],\n        "pvUpgradeThreshold": 5000,\n        "bessUpgradeThreshold": 5000\n      },\n      "databaseConfig": {\n        "system": "generic",\n        "driver": "PostgreSQL Unicode(x64)",\n        "server": "localhost",\n        "user": "postgres",\n        "password": "password",\n        "database": "postgres",\n        "schema": "schema"\n      },\n      "scenarioDatabaseConfig" :{\n        "host": "000.000.000.000",\n        "port": "0000",\n        "dbName": "dbName",\n        "schema": "schema",\n        "username": "userName",\n        "password": "passWord",\n      }\n    }\n\n## Common Commands\n\nBuilding the project and install locally:\n\n``\nmvn clean install\n``\n\nTo run the tests you must use the following command:\n\n``\nmvn test\n``\n\n\n## Documentation \ud83d\udce6\n\n### Workflow Overview ###\n[![Where the library sits](/img/PFEWorkFlow.png)](/img/PFEWorkFlow.png)\n1. User Request Power Factory Model by sending Model Config to Power Factory Model Builder\n2. Model Config sent to Power Factory Exporter<br />\n``\nThis library starts here\n``\n3. Request Network Model from Energy Work Bench\n4. Receive Network Model from Energy Work Bench\n5. Return DGS to Power Factory Model Builder<br />\n``\nThis library ends here\n``\n6. Sent DGS to Power Factory Template Service\n7. Return DGS to Power Factory Model Builder\n8. Return DGS to EWB App Server\n\n\n### Library Concept ###\n[![Where the library sits](/img/LibraryConcept.png)](/img/LibraryConcept.png)\nGiven Meta data and a list of equipment containers, this library will map CIM data of equipments belonging to the list\nof equipment containers to Power Factory Elements.\n\n### Class Inheritance ###\n[![Class Inheritance](/img/Inheritance.png)](/img/Inheritance.png)\n\n| CIM                       | DGS                                                                |\n|:-------------------------:|:------------------------------------------------------------------:|\n| ```IdentifiedObject```    | [IdObj](#idobj)                                                    |\n| ```Equipment```           | [Element](#element)                                                |\n| ```ConductingEquipment``` | [ServiceElement](#serviceelement) or [TypedElement](#typedelement) |\n\n#### IdObj ####\n| Attribute      | Mapped From              | Type and Restriction                    |\n|:--------------:|:------------------------:|:---------------------------------------:|\n| ```fID```      | identifiedObject.mRID    | String (40)                             |\n----\n[Return to Class Inheritance list](#class-inheritance)\n\n#### Element ####\n| Attribute      | Mapped From                  | Type and Restriction                    |\n|:--------------:|:----------------------------:|:---------------------------------------:|\n| ```op```       | Object operation             | [Operation](#operation)                 |\n| ```locName```  | equipment.name               | String (40)                             |\n| ```foldId```   | equipment.equipmentContainer | String (40)                             |\n| ```chrName```  | equipment.names.get(chrName) | String (40)                             |\n| ```desc```     | equipment.description        | String                                  |\n----\n[Return to Class Inheritance list](#class-inheritance)\n\n#### ServiceElement ####\n| Attribute      | Mapped From                                           | Type and Restriction                    |\n|:--------------:|:-----------------------------------------------------:|:---------------------------------------:|\n| ```outServ```  | feeder.normalHeadTerminal                             | [ServiceState](#servicestate)           |\n| ```gpsLat```   | conductingEquipment.location.points.first().yposition | Double                                  |\n| ```gpsLon```   | conductingEquipment.location.points.first().xposition | Double                                  |\n----\n[Return to Class Inheritance list](#class-inheritance)\n\n#### TypedElement ####\n| Attribute      | Mapped From                                           | Type and Restriction                    |\n|:--------------:|:-----------------------------------------------------:|:---------------------------------------:|\n| ```typId```    | feeder.normalHeadTerminal                             | String (40)                             |\n----\n[Return to Class Inheritance list](#class-inheritance)\n\n### Supported CIM Classes ###\n\n<table>\n<tr><th>Equipment Container</th><th>Conducting Equipment</th></tr>\n<tr valign="top" ><td>\n\n| CIM                      | Power Factory Element     | Typ Element |\n|:------------------------:|:-------------------------:|:-----------:|\n| ```EquipmentContainer``` | [ElmNet](#elmnet)         | -           |\n| ```Feeder```             | [ElmFeeder](#elmfeeder)   | -           |\n| ```Site```               | [ElmSite](#elmsite)       | -           |\n| ```Site (DTX)```         | [ElmTrfstat](#elmtrfstat) | -           |\n| ```Substation```         | [ElmSubstat](#elmsubstat) | -           |\n\n</td><td>\n\n| CIM                                              | Power Factory Element                                        | Typ Element                                                   |\n|:------------------------------------------------:|:------------------------------------------------------------:|:-------------------------------------------------------------:|\n| ```AcLineSegment```                              | [ElmLne](#elmlne)                                            | [TypLne](#typlne)                                             |\n| ```BatteryUnit```                                | [ElmGenStat](#elmgenstat)                                    | -                                                             |\n| ```ConnectivityNode```                           | [ElmTerm](#elmterm)                                          | -                                                             |\n| ```EquipmentContainer```                         | [ElmNet](#elmnet)                                            | -                                                             |\n| ```EnergyConsumer```                             | [ElmLod](#elmlod)                                            | [TypLod](#typlod), [TpyLodind](#typlodind)                    |\n| ```EnergySource```                               | [ElmVac](#elmvac)                                            | -                                                             |\n| ```EvChargingUnit```                             | [ElmLod](#elmlod)                                            | -                                                             |\n| ```Fuse```                                       | [RelFuse](#relfuse)                                          | [TypFuse](#typfuse)                                           |\n| ```PhotovoltaicUnit```                           | [ElmPvSys](#elmpvsys)                                        | -                                                             |\n| ```PowerElectronicsConnection```                 | [ElmPvSys](#elmpvsys)                                        | -                                                             |\n| ```PowerTransformer <br />(2 Winding)```         | [ElmTr2](#elmtr2)                                            | [TypTr2](#typtr2)                                             |\n| ```PowerTransformer <br />(3 Winding)```         | [ElmTr3](#elmtr3)                                            | [TypTr3](#typtr3)                                             |\n| ```PowerTransformer <br />(Voltage Regulator)``` | [ElmVoltreg](#elmvoltreg)                                    | [TypVoltreg](#typvoltreg)                                     |\n| ```Switch <br />(Non-Fuse)```                    | [ElmCoup](#elmcoup)                                          | -                                                             |\n| ```Switch <br />(GroundDisconnector)```          | [ElmGndSwt](#elmgndswt)                                      | -                                                             |\n| ```Terminal```                                   | [StaCubic](#stacubic)                                        | -                                                             |\n| ```ProtectionRelaySystem```                      | [ElmRelay](#elmrelay)                                        | TypRelay (default provided in template project)               |\n| ```ProtectionRelayFunction```                    | [RelIoc](#relIoc), [RelToc](#relToc), or [RelUlim](#relUlim) | TypIoc, TypToc, or TypUlim (all provided in template project) |\n\n</td></tr>\n\n<tr><th>Auxiliary Equipment</th></tr>\n<tr valign="top" ><td>\n\n| CIM                                | Power Factory Element| Typ Element     |\n|:----------------------------------:|:--------------------:|:---------------:|\n| ```CurrentTransformer```           | [StaCt](#stact)      | [TypCt](#typct) |\n| ```LinearShuntCompensator```       | [ElmShnt](#elmshnt)  |                 |\n| ```SeriesCompensator```            | [ElmSind](#elmsind)  |                 |\n\n</td></tr> </table>\n\n\n\n### Elements and Attribute Mapping ###\n#### ElmBattery ####\n| Attribute      | Mapped From                                    | Type and Restriction |\n|:--------------:|:----------------------------------------------:|:--------------------:|\n| ```bus1```     | ElmBattery.powerElectronicsConnection.terminal | String (40)          |\n| ```uNom```     | maxP                                           | Float(>=0.0f)        |\n----\n[Return to Full List of Supported CIM](#supported-cim-classes)\n\n#### ElmCoup ####\n| Attribute      | Mapped From                                         | Type and Restriction      |\n|:--------------:|:---------------------------------------------------:|:-------------------------:|\n| ```aUsage```   | switch::Class                                       | [SwitchType](#switchtype) |\n| ```onOff```    | switch.isOpen()                                     | [StateOnOff](#stateonoff) |\n| ```nPhase```   | Number of phases without neutral on switch terminal | Int (1, 2, 3)             |\n| ```nNeutral``` | Number of neutral phase on switch terminal          | Int (0, 1)                |\n----\n[Return to Full List of Supported CIM](#supported-cim-classes)\n\n#### ElmFeeder ####\n| Attribute      | Mapped From                  | Type and Restriction                    |\n|:--------------:|:----------------------------:|:---------------------------------------:|\n| ```objId```    | feeder.normalHeadTerminal    | String (40)                             |\n| ```iSet```     | Set to Power Factory Default | Double (>=0.0)                          |\n| ```iScale```   | Set to Power Factory Default | Int (0, 1, 2, 3, 4)                     |\n| ```iColor```   | Provided feeder colour file  | Int                                     |\n| ```ciOrient``` | Set to Power Factory Default | [FeederOrientation](#feederorientation) |\n----\n[Return to Full List of Supported CIM](#supported-cim-classes)\n\n#### ElmGenStat ####\n| Attribute      | Mapped From                                    | Type and Restriction |\n|:--------------:|:----------------------------------------------:|:--------------------:|\n| ```bus1```     | ElmBattery.powerElectronicsConnection.terminal | String (40)          |\n| ```uNom```     | maxP                                           | Float(>=0.0f)        |\n----\n[Return to Full List of Supported CIM](#supported-cim-classes)\n\n#### ElmGndswt ####\n| Attribute      | Mapped From                                         | Type and Restriction      |\n|:--------------:|:---------------------------------------------------:|:-------------------------:|\n| ```onOff```    | switch.isOpen()                                     | [StateOnOff](#stateonoff) |\n| ```nPhase```   | Number of phases without neutral on switch terminal | Int (1, 2, 3)             |\n| ```nNeutral``` | Number of neutral phase on switch terminal          | Int (0, 1)                |\n----\n[Return to Full List of Supported CIM](#supported-cim-classes)\n\n#### ElmLne ####\n| Attribute       | Mapped From                          | Type and Restriction      |\n|:---------------:|:------------------------------------:|:-------------------------:|\n| ```dLine```     | acLineSegment.length                 | Float (>=0.0f)            |\n| ```fLine```     | Set to Power Factory Default         | Float (>=0.0f)            |\n| ```typId```     | acLineSegment property mapped to Typ | [TypLne](#typlne)         |\n| ```nlNum```     | Set to Power Factory Default         | Int (>=1)                 |\n| ```inAir```     | Set to Power Factory Default         | [InAirState](#inairstate) |\n| ```gpsCoords``` | acLineSegment.location.points        | List of (Double, Double)  |\n----\n[Return to Full List of Supported CIM](#supported-cim-classes)\n\n#### ElmLod ####\n| Attribute      | Mapped From                         | Type and Restriction                              |\n|:--------------:|:-------------------------------------:|:-----------------------------------------------:|\n| ```sLini```    | Set to Power Factory Defa             | Float (>=0.0f)                                  |\n| ```pLini```    | Set to Power Factory Default          | Float                                           |\n| ```qLini```    | Set to Power Factory Default          | Float                                           |\n| ```cosLini```  | Set to Power Factory Default          | Float (-1.0f>=x>=1.0f)                          |\n| ```scale0```   | Set to Power Factory Default          | Float                                           |\n| ```iScale```   | Set to Power Factory Default          | Int (0, 1)                                      |\n| ```typId```    | energyConsumer property mapped to Typ | [TypLod](#typlod), [TpyLodind](#typlodind)      |\n| ```modeInp```  | acLineSegment.location.points         | [InputMode](#inputmode)                         |\n----\n[Return to Full List of Supported CIM](#supported-cim-classes)\n\n#### ElmNet ####\n| Attribute      | Mapped From                           | Type and Restriction                            |\n|:--------------:|:-------------------------------------:|:-----------------------------------------------:|\n| ```frNom```    | Set to Power Factory Defa             | Float (>=0.0f)                                  |\n| ```pDiagram``` | Set to Power Factory Default          | String (40)                                     |\n----\n[Return to Full List of Supported CIM](#supported-cim-classes)\n\n#### ElmPvsys ####\n| Attribute      | Mapped From                                          | Type and Restriction        |\n|:--------------:|:----------------------------------------------------:|:---------------------------:|\n| ```typId```    | Mapping Pending                                      | Mapping Pending             |\n| ```bus1```     | PhotoVoltaicUnit.powerElectronicsConnection.terminal | String (40)                 |\n| ```phtech```   | Set to Power Factory Default                         | [PVsysPhTech](#pvsysphtech) |\n| ```ngnum```    | Set to Power Factory Default                         | Int (>1)                    |\n| ```npnum```    | Set to Power Factory Default                         | Int (>1)                    |\n| ```sgn```      | powerElectronicsConnection.ratedS                    | Float (>0.0f)               |\n| ```cosn```     | Hard Set to 1.0f                                     | String (40)                 |\n----\n[Return to Full List of Supported CIM](#supported-cim-classes)\n\n#### ElmRelay ####\n| Attribute         | Mapped From                                                                                                                                                         | Type and Restriction                                                                   |\n|:-----------------:|:-------------------------------------------------------------------------------------------------------------------------------------------------------------------:|:--------------------------------------------------------------------------------------:|\n| ```application``` | protectionRelaySystem.name (0 if contains "P1", otherwise 1)                                                                                                        | Int (0, 1)                                                                             |\n| ```devNo```       | Index of ElmRelay in cubicle                                                                                                                                        | Int (>=1)                                                                              |\n| ```cCatCurr```    | protectionRelaySystem.protectionKind (1 if MULTI_FUNCTION, JG, GROUND_CURRENT, or NEGATIVE_OVERCURRENT)                                                             | Int (0, 1)                                                                             |\n| ```cCatDist```    | protectionRelaySystem.protectionKind (1 if MULTI_FUNCTION or DISTANCE)                                                                                              | Int (0, 1)                                                                             |\n| ```cCatDiff```    | protectionRelaySystem.protectionKind (1 if MULTI_FUNCTION or JDIFF)                                                                                                 | Int (0, 1)                                                                             |\n| ```cCatVolt```    | protectionRelaySystem.protectionKind (1 if MULTI_FUNCTION, VG, or GROUND_VOLTAGE)                                                                                   | Int (0, 1)                                                                             |\n| ```cCatFreq```    | protectionRelaySystem.protectionKind (1 if MULTI_FUNCTION, FREQG, or FREQ)                                                                                          | Int (0, 1)                                                                             |\n| ```cCatDir```     | protectionRelaySystem.protectionKind (1 if MULTI_FUNCTION)                                                                                                          | Int (0, 1)                                                                             |\n| ```phFaultMinI``` | Hard set to 0.0                                                                                                                                                     | Double (>=0.0)                                                                         |\n| ```phFaultMaxI``` | Hard set to 0.0                                                                                                                                                     | Double (>=0.0)                                                                         |\n| ```eFaultMinI```  | Hard set to 0.0                                                                                                                                                     | Double (>=0.0)                                                                         |\n| ```eFaultMaxI```  | Hard set to 0.0                                                                                                                                                     | Double (>=0.0)                                                                         |\n| ```pDisElm```     | protectionRelaySystem.schemes.flatMap { it.functions }, (CT in relayFunctions.flatmap { it.sensors })[#stact], and [relMeasure(protectionRelaySystem)](#relmeasure) | List of [StaCt](#stact), [RelIoc](#relioc), [RelToc](#reltoc), and [RelUlim](#relulim) |\n----\n[Return to Full List of Supported CIM](#supported-cim-classes)\n\n#### ElmRelay ####\n| Attribute         | Mapped From                                                                                                                                                         | Type and Restriction                                                                   |\n|:-----------------:|:-------------------------------------------------------------------------------------------------------------------------------------------------------------------:|:--------------------------------------------------------------------------------------:|\n| ```application``` | protectionRelaySystem.name (0 if contains "P1", otherwise 1)                                                                                                        | Int (0, 1)                                                                             |\n| ```devNo```       | Index of ElmRelay in cubicle                                                                                                                                        | Int (>=1)                                                                              |\n| ```cCatCurr```    | protectionRelaySystem.protectionKind (1 if MULTI_FUNCTION, JG, GROUND_CURRENT, or NEGATIVE_OVERCURRENT)                                                             | Int (0, 1)                                                                             |\n| ```cCatDist```    | protectionRelaySystem.protectionKind (1 if MULTI_FUNCTION or DISTANCE)                                                                                              | Int (0, 1)                                                                             |\n| ```cCatDiff```    | protectionRelaySystem.protectionKind (1 if MULTI_FUNCTION or JDIFF)                                                                                                 | Int (0, 1)                                                                             |\n| ```cCatVolt```    | protectionRelaySystem.protectionKind (1 if MULTI_FUNCTION, VG, or GROUND_VOLTAGE)                                                                                   | Int (0, 1)                                                                             |\n| ```cCatFreq```    | protectionRelaySystem.protectionKind (1 if MULTI_FUNCTION, FREQG, or FREQ)                                                                                          | Int (0, 1)                                                                             |\n| ```cCatDir```     | protectionRelaySystem.protectionKind (1 if MULTI_FUNCTION)                                                                                                          | Int (0, 1)                                                                             |\n| ```phFaultMinI``` | Hard set to 0.0                                                                                                                                                     | Double (>=0.0)                                                                         |\n| ```phFaultMaxI``` | Hard set to 0.0                                                                                                                                                     | Double (>=0.0)                                                                         |\n| ```eFaultMinI```  | Hard set to 0.0                                                                                                                                                     | Double (>=0.0)                                                                         |\n| ```eFaultMaxI```  | Hard set to 0.0                                                                                                                                                     | Double (>=0.0)                                                                         |\n| ```pDisElm```     | protectionRelaySystem.schemes.flatMap { it.functions }, (CT in relayFunctions.flatmap { it.sensors })[#stact], and [relMeasure(protectionRelaySystem)](#relmeasure) | List of [StaCt](#stact), [RelIoc](#relioc), [RelToc](#reltoc), and [RelUlim](#relulim) |\n----\n[Return to Full List of Supported CIM](#supported-cim-classes)\n\n#### ElmShnt ####\n| Attribute      | Mapped From                                         | Type and Restriction |\n|:--------------:|:---------------------------------------------------:|:--------------------:|\n| ```ushnm```    | linearShuntCompensator.assetInfo.ratedVoltage       | Mapping Pending      |\n| ```ctech```    | linearShuntCompensator.terminal.phases              | [CTech](#ctech)      |\n| ```qtotn```    | linearShuntCompensator.assetInfo.ratedReactivePower | Float (>=0.0f)       |\n----\n[Return to Full List of Supported CIM](#supported-cim-classes)\n\n#### ElmSind ####\n| Attribute      | Mapped From                                         | Type and Restriction |\n|:--------------:|:---------------------------------------------------:|:--------------------:|\n| ```rrea```     | seriesCompensator.r                                 | Float (>=0.0f)       |\n| ```xrea```     | seriesCompensator.x                                 | Float (>=0.0f)       |\n| ```ucn```      | ratedU of associated PowerTransformerEnd            | Float (>0.0f)        |\n| ```nPhases```  | seriesCompensator.terminal.numOfPhases()            | Int (1, 3)           |\n\n----\n[Return to Full List of Supported CIM](#supported-cim-classes)\n\n#### ElmSite ####\n| Attribute      | Mapped From                                         | Type and Restriction                        |\n|:--------------:|:---------------------------------------------------:|:-------------------------------------------:|\n| ```gpsLat```   | site.location.points.first().yPosition              | Double                                      |\n| ```gpsLon```   | site.location.points.first().xPosition              | Double                                      |\n| ```sType```    | TransformerConstructionKind of PowerTransformer     | [TransformerSiteType](#transformersitetype) |\n----\n[Return to Full List of Supported CIM](#supported-cim-classes)\n\n#### ElmSite ####\n| Attribute      | Mapped From                                         | Type and Restriction                        |\n|:--------------:|:---------------------------------------------------:|:-------------------------------------------:|\n| ```gpsLat```   | site.location.points.first().yPosition              | Double                                      |\n| ```gpsLon```   | site.location.points.first().xPosition              | Double                                      |\n| ```sType```    | TransformerConstructionKind of PowerTransformer     | [TransformerSiteType](#transformersitetype) |\n----\n[Return to Full List of Supported CIM](#supported-cim-classes)\n\n#### ElmSubstat ####\n| Attribute      | Mapped From                                         | Type and Restriction                        |\n|:--------------:|:---------------------------------------------------:|:-------------------------------------------:|\n| ```gpsLat```   | substation.location.points.first().yPosition        | Double                                      |\n| ```gpsLon```   | substation.location.points.first().xPosition        | Double                                      |\n| ```sType```    | TransformerConstructionKind of PowerTransformer     | [TransformerSiteType](#transformersitetype) |\n----\n[Return to Full List of Supported CIM](#supported-cim-classes)\n\n#### ElmTerm ####\n| Attribute      | Mapped From                                     | Type and Restriction                |\n|:--------------:|:-----------------------------------------------:|:-----------------------------------:|\n| ```iUsage```   | Is the ConnectivityNode a Busbar                | [Usage](#usage)                     |\n| ```phTech```   | Highest phases among connected terminals        | [PhaseTechnology](#phasetechnology) |\n| ```typId```    | Mapping Pending                                 | Mapping Pending                     |\n| ```ukNom```    | Highest voltage among connected terminals       | Float (>0.0f)                       |\n| ```unkNom```   | ukNom / sqrt(3)                                 | Float (>0.0f)                       |\n| ```sysType```  | Set to Power Factory Default                    | [SystemType](#systemtype)           |\n| ```iMinus```   | Set to Power Factory Default                    | Int                                 |\n| ```vTarget```  | TransformerConstructionKind of PowerTransformer | Float (>0.0f)                       |\n| ```vMax```     | Hard set to 1.1f                                | Float (>=0.0f)                      |\n| ```vMin```     | Hard set to 0.9f                                | Float (>=0.0f)                      |\n----\n[Return to Full List of Supported CIM](#supported-cim-classes)\n\n#### ElmTr2 ####\n| Attribute        | Mapped From                                           | Type and Restriction                                      |\n|:----------------:|:-----------------------------------------------------:|:---------------------------------------------------------:|\n| ```cGndH```      | PowerTransformer HV winding.isGrounded()              | [InternalGroundingStarPoint](#internalgroundingstarpoint) |\n| ```cGndL```      | PowerTransformer LV winding.isGrounded()              | [InternalGroundingStarPoint](#internalgroundingstarpoint) |\n| ```iAuto```      | Is the powerTransformer an auto transformer           | Int (0, 1)                                                |\n| ```nnTap```      | HV Winding RatioTapChanger neutral step               | Int                                                       |\n| ```nnTap2```     | LV Winding RatioTapChanger neutral step               | Int                                                       |\n| ```nTrCn```      | (In Substation) Hard set to 1                         | Int (0, 1)                                                |\n| ```ratFac```     | Set to Power Factory Default                          | Float (>0.0f)                                             |\n| ```typId```      | PowerTransformer properties                           | [TypTr2](#typtr2)                                         |\n| ```ntNum```      | Set to Power Factory Default                          | Int (>0)                                                  |\n| ```uSetP```      | Set to Power Factory Default                          | Float (>0.0f)                                             |\n| ```uspUp```      | Set to Power Factory Default                          | Float (>0.0f)                                             |\n| ```uspLow```     | Set to Power Factory Default                          | Float (>0.0f)                                             |\n| ```t2ldc```      | (In Substation) Hard set to ControllerNodeLocation.LV | [ControllerNodeLocation](#controllernodelocation)         |\n| ```re0TrH```     | HV Winding StarImpedance r                            | Float                                                     |\n| ```xe0TrH```     | HV Winding StarImpedance x                            | Float (>=0.0f)                                            |\n| ```re0TrL```     | LV Winding StarImpedance r                            | Float                                                     |\n| ```xe0TrL```     | LV Winding StarImpedance x                            | Float (>=0.0f)                                            |\n| ```cNeutCon```   | Position of grounding winding                         | Int (0, 1, 2, 3)                                          |\n| ```dutap```      | HV Winding RatioTapChanger stepVoltageIncrement       | Float                                                     |\n| ```optaplimit``` | Hard set to 1                                         | Int (0, 1)                                                |\n| ```optapmin```   | HV Winding RatioTapChanger low step                   | Int                                                       |\n| ```optapmax```   | HV Winding RatioTapChanger high step                  | Int                                                       |\n| ```ilcph```      | (In Substation) Hard set to ControlledPhase.POS       | [ControlledPhase](#controlledphase)                       |\n| ```iealv```      | Is the powerTransformer an isolation transformer      | Int (0, 1)                                                |\n| ```ilvcon```     | (Isolation Transformer) Hard set to 0                 | Int (0, 1)                                                |\n| ```iintgnd```    | State of neutral connection                           | Int (0, 1,2 ,3 ,4)                                        |\n| ```ieahv```      | Is the powerTransformer a SWER transformer            | Int (0, 1)                                                |\n| ```ihvcon```     | (SWER Transformer) Hard set to 0                      | Int (0, 1)                                                |\n| ```busHvN```     | HV Winding Terminal                                   | String                                                    |\n| ```busLvN```     | LV Winding Terminal                                   | String                                                    |\n----\n[Return to Full List of Supported CIM](#supported-cim-classes)\n\n#### ElmTr3 ####\n| Attribute        | Mapped From                                | Type and Restriction                                      |\n|:----------------:|:----------------------------------------:|:---------------------------------------------------------:|\n| ```busHV```      | HV winding terminal                      | String                                                    |\n| ```busMV```      | MV winding terminal                      | String                                                    |\n| ```busLV```      | LV winding terminal                      | String                                                    |\n| ```busHVn```     | HV winding grounding terminal            | String                                                    |\n| ```busMVn```     | MV winding grounding terminal            | String                                                    |\n| ```busLVn```     | LV winding grounding terminal            | String                                                    |\n| ```nt3nm```      | Set to Power Factory Default             | Int                                                       |\n| ```typId```      | PowerTransformer properties              | [TypTr3](#typtr3)                                         |\n| ```cNeutCon```   | Position of grounding winding            | Int (0, 1, 2, 3, 4, 5)                                    |\n| ```cgndH```      | HV winding.isGrounded()                  | [InternalGroundingStarPoint](#internalgroundingstarpoint) |\n| ```cpeterH```    | Set to Power Factory Default             | Int (0, 1)                                                |\n| ```re0h```       | Set to Power Factory Default             | Float                                                     |\n| ```xe0h```       | Set to Power Factory Default             | Float                                                     |\n| ```cgndM```      | MV winding.isGrounded()                  | [InternalGroundingStarPoint](#internalgroundingstarpoint) |\n| ```cpeterM```    | Set to Power Factory Default             | Int                                                       |\n| ```re0m```       | Set to Power Factory Default             | Int                                                       |\n| ```xe0m```       | Set to Power Factory Default             | Int                                                       |\n| ```n3TapH```     | HV winding RatioTapChanger neutral step  | Int                                                       |\n| ```n3TapM```     | Set to Power Factory Default             | Int                                                       |\n| ```n3TapL```     | Set to Power Factory Default             | Int                                                       |\n| ```maxLoad```    | Set to Power Factory Default             | Float (>=0.0f)                                            |\n| ```lossAssign``` | Set to Power Factory Default             | [LossAssignment](#lossassignment)                         |\n| ```ictrlside```  | Set to Power Factory Default             | Int (0, 1, 2)                                             |\n| ```ntrcn```      | Hard set to 1 for automatic tap changing | Int (0, 1)                                                |\n| ```iCont```      | Set to Power Factory Default             | Int (0, 1)                                                |\n| ```t3ldc```      | Hard set to 1                            | Int (0, 1, 2, 3)                                          |\n| ```uSetMode```   | Hard set to 1                            | Char (V, P, Q)                                            |\n| ```ilcph```      | Hard set to ControlledPhase.POS          | [ControlledPhase](#controlledphase)                       |\n| ```imldc```      | Set to Power Factory Default             | Int (0, 1)                                                |\n| ```tCtrl```      | Hard set to 0.01f                        | Float (>=0.0f)                                            |\n| ```ildc```       | Set to Power Factory Default             | Int (0, 1, 2)                                             |\n| ```iAutoHl```    | Set to Power Factory Default             | Int (0, 1, 2, 3)                                          |\n----\n[Return to Full List of Supported CIM](#supported-cim-classes)\n\n#### ElmTrfstat ####\n| Attribute      | Mapped From                                     | Type and Restriction                        |\n|:--------------:|:-----------------------------------------------:|:-------------------------------------------:|\n| ```sShort```   | site.description                                | String (6)                                  |\n| ```gpsLat```   | substation.location.points.first().yPosition    | Double                                      |\n| ```gpsLon```   | substation.location.points.first().xPosition    | Double                                      |\n| ```sType```    | TransformerConstructionKind of PowerTransformer | [TransformerSiteType](#transformersitetype) |\n----\n[Return to Full List of Supported CIM](#supported-cim-classes)\n\n#### ElmVac ####\n| Attribute      | Mapped From                                     | Type and Restriction                    |\n|:--------------:|:-----------------------------------------------:|:---------------------------------------:|\n| ```nPhase```   | energySource terminal\'s phases.withoutNeutral() | Int (1, 2, 3)                           |\n| ```uNom```     | (energySource base voltage) / 1000              | Float (>0,0f)                           |\n| ```iType```    | Set to Power Factory Default                    | [VoltageSourceType](#voltagesourcetype) |\n| ```bus1```     | energySource terminal                           | String                                  |\n| ```uSetP```    | Hard set to 1.0f                                | Float (>=0,0f)                          |\n| ```phiSetP```  | Hard set to 0.0f                                | Float                                   |\n| ```r1```       | energySource.r                                  | Double                                  |\n| ```x1```       | energySource.x                                  | Double                                  |\n| ```uSetP0```   | Hard set to 0.0f                                | Float (>=0,0f)                          |\n| ```phiSetP0``` | Hard set to 0.0f                                | Float                                   |\n| ```r0```       | energySource.r0                                 | Double                                  |\n| ```x0```       | energySource.x0                                 | Double                                  |\n| ```uSetP2```   | Hard set to 0.0f                                | Float (>=0,0f)                          |\n| ```phiSetP2``` | Hard set to 0.0f                                | Float                                   |\n| ```r2```       | energySource.rn                                 | Double                                  |\n| ```x2```       | energySource.xn                                 | Double                                  |\n----\n[Return to Full List of Supported CIM](#supported-cim-classes)\n\n#### ElmVoltreg ####\n| Attribute      | Mapped From                       | Type and Restriction      |\n|:--------------:|:---------------------------------:|:-------------------------:|\n| ```nnTap1```   | HV winding RatioTapChanger.step   | Int                       |\n| ```nnTap2```   | LV winding RatioTapChanger.step   | Int                       |\n| ```nTrCn```    | Hard set to 1                     | Int (0, 1)                |\n| ```ratFac```   | Set to Power Factory Default      | Float (>0.0f)             |\n| ```typId```    | Hard set to 1.0f                  | [TypVoltreg](#typvoltreg) |\n| ```uSetP```    | Hard set to 0.0f                  | Float (>0.0f)             |\n| ```re0```      | Voltage regulator StarImpedance.r | Float (>=0.0f)            |\n| ```xe0```      | Voltage regulator StarImpedance.x | Float (>=0.0f)            |\n| ```cNeutCon``` | Set to Power Factory Default      | Int (0, 1, 3)             |\n----\n[Return to Full List of Supported CIM](#supported-cim-classes)\n\n#### RelFuse ####\n| Attribute      | Mapped From                                       | Type and Restriction      |\n|:--------------:|:-------------------------------------------------:|:-------------------------:|\n| ```aUsage```   | Hard set to SwitchType.Fuse                       | [SwitchType](#switchtype) |\n| ```onOff```    | fuse.isOpen()                                     | [StateOnOff](#stateonoff) |\n| ```typId```    | fuse properties                                   | [TypFuse](#typfuse)       |\n| ```nPhase```   | Number of phases without neutral on fuse terminal | Int (1, 2, 3)             |\n| ```nNeutral``` | Number of neutral phase on fuse terminal          | Int (0, 1)                |\n----\n[Return to Full List of Supported CIM](#supported-cim-classes)\n\n#### RelIoc ####\n| Attribute          | Mapped From                                                                        | Type and Restriction          |\n|:------------------:|:----------------------------------------------------------------------------------:|:-----------------------------:|\n| ```ipSet```        | Hard set to 1.0f                                                                   | Float (>0.0f)                 |\n| ```ipSetR```       | protectionRelayFunction.thresholds.firstOrNull().value                             | Float (>0.0f)                 |\n| ```tSet```         | protectionRelayFunction.timeLimits.firstOrNull()                                   | Float (>=0.0f)                |\n| ```cTSet```        | Hard set to tSet * 50 (frequency)                                                  | Float (>=0.0f)                |\n| ```calcUse```      | Hard set to 0                                                                      | Int (0, 1)                    |\n| ```tRelBlock```    | Hard set to 9999999.0f                                                             | Float (>0.0f)                 |\n| ```iAcceptBlock``` | Hard set to 0                                                                      | Int (0, 1)                    |\n| ```outServ```      | Hard set to ServiceState.InService                                                 | [ServiceState](#servicestate) |\n----\n[Return to Full List of Supported CIM](#supported-cim-classes)\n\n#### RelMeasure ####\n| Attribute  | Mapped From     | Type and Restriction |\n|:----------:|:---------------:|:--------------------:|\n| ```iNom``` | Hard set to 1.0 | Double (>0.0f)       |\n| ```uNom``` | Hard set to 1.0 | Double (>0.0f)       |\n----\n[Return to Full List of Supported CIM](#supported-cim-classes)\n\n#### RelToc ####\n| Attribute          | Mapped From                                                                                         | Type and Restriction          |\n|:------------------:|:---------------------------------------------------------------------------------------------------:|:-----------------------------:|\n| ```ipSet```        | Hard set to 1.0f                                                                                    | Float (>0.0f)                 |\n| ```ipSetR```       | protectionRelayFunction.thresholds.firstOrNull().value                                              | Float (>0.0f)                 |\n| ```tpSet```        | protectionRelayFunction.timeLimits.firstOrNull()                                                    | Float (>=0.0f)                |\n| ```iDir```         | protectionRelayFunction.powerDirection                                                              | Int (0, 1, 2)                 |\n| ```pCharac```      | protectionRelayFunction.assetInfo?.curveSetting                                                     | String (40)                   |\n| ```resetT```       | Hard set to 0.0f                                                                                    | Float (>=0.0f)                |\n| ```cResetT```      | Hard set to resetT * 50 (frequency)                                                                 | Float (>=0.0f)                |\n| ```uDefTMin```     | Hard set to 0.0f                                                                                    | Float (>=0.0f)                |\n| ```uDefTMax```     | Hard set to 9999999.0f                                                                              | Float (>0.0f)                 |\n| ```tShift```       | Hard set to 1.0f                                                                                    | Float (>=0.0f)                |\n| ```calcUse```      | Hard set to 0                                                                                       | Int (0, 1)                    |\n| ```tRelBlock```    | Hard set to 9999999.0f                                                                              | Float (>0.0f)                 |\n| ```iAcceptBlock``` | Hard set to 0                                                                                       | Int (0, 1)                    |\n| ```modFrame```     | Hard set to true                                                                                    | Boolean                       |\n| ```resetDis```     | Hard set to false                                                                                   | Boolean                       |\n| ```outServ```      | ServiceState.InService unless prf.assetInfo?.recloseFast == true and prf.protectionKind is JG or J0 | [ServiceState](#servicestate) |\n----\n[Return to Full List of Supported CIM](#supported-cim-classes)\n\n#### RelUlim ####\n| Attribute      | Mapped From                                            | Type and Restriction          |\n|:--------------:|:------------------------------------------------------:|:-----------------------------:|\n| ```cSfIEC```   | protectionRelayFunction.protectionKind                 | String (U<<, U<, U>, U>>)     |\n| ```cSfANSI```  | protectionRelayFunction.protectionKind                 | String ("27", "59")           |\n| ```cType```    | Hard set to 1                                          | Int (0, 1, 2, 3, 4, 5)        |\n| ```cFunc```    | protectionRelayFunction.protectionKind                 | Int (0, 1)                    |\n| ```uSet```     | Hard set to 1.0f                                       | Float (>0.0)                  |\n| ```uSetR```    | protectionRelayFunction.thresholds.firstOrNull().value | Float (>0.0)                  |\n| ```cuSet```    | protectionRelayFunction.thresholds.firstOrNull().value | Float (>0.0)                  |\n| ```tDel```     | protectionRelayFunction.timeLimits.firstOrNull()       | Float (>0.0)                  |\n| ```cTDel```    | Hard set to tDel * 50 (frequency)                      | Float (>0.0)                  |\n| ```usedLoop``` | Hard set to 0                                          | Int (0, 1)                    |\n| ```outServ```  | Hard set to ServiceState.InService                     | [ServiceState](#servicestate) |\n----\n[Return to Full List of Supported CIM](#supported-cim-classes)\n\n#### RelUlim ####\n| Attribute      | Mapped From                                            | Type and Restriction          |\n|:--------------:|:------------------------------------------------------:|:-----------------------------:|\n| ```cSfIEC```   | protectionRelayFunction.protectionKind                 | String (U<<, U<, U>, U>>)     |\n| ```cSfANSI```  | protectionRelayFunction.protectionKind                 | String ("27", "59")           |\n| ```cType```    | Hard set to 1                                          | Int (0, 1, 2, 3, 4, 5)        |\n| ```cFunc```    | protectionRelayFunction.protectionKind                 | Int (0, 1)                    |\n| ```uSet```     | Hard set to 1.0f                                       | Float (>0.0)                  |\n| ```uSetR```    | protectionRelayFunction.thresholds.firstOrNull().value | Float (>0.0)                  |\n| ```cuSet```    | protectionRelayFunction.thresholds.firstOrNull().value | Float (>0.0)                  |\n| ```tDel```     | protectionRelayFunction.timeLimits.firstOrNull()       | Float (>0.0)                  |\n| ```cTDel```    | Hard set to tDel * 50 (frequency)                      | Float (>0.0)                  |\n| ```usedLoop``` | Hard set to 0                                          | Int (0, 1)                    |\n| ```outServ```  | Hard set to ServiceState.InService                     | [ServiceState](#servicestate) |\n----\n[Return to Full List of Supported CIM](#supported-cim-classes)\n\n#### StaCt ####\n| Attribute      | Mapped From                                                                          | Type and Restriction            |\n|:--------------:|:------------------------------------------------------------------------------------:|:-------------------------------:|\n| ```typId```    | currentTransformer properties, or CT Type 1-1 when creating default CT for a cubicle | [TypCt](#typct)                 |\n| ```cnBus```    | Set to Power Factory Default                                                         | String (40)                     |\n| ```cBranch```  | Set to Power Factory Default                                                         | String (40)                     |\n| ```pBranch```  | currentTransformer terminal                                                          | String (40)                     |\n| ```pTapSet```  | Set to Power Factory Default                                                         | Double (>0.0)                   |\n| ```sTapSet```  | Set to Power Factory Default                                                         | Double (>0.0)                   |\n| ```stapCon```  | Set to Power Factory Default                                                         | String (Y, D)                   |\n| ```rPhase```   | Set to Power Factory Default                                                         | [PhaseRotation](#phaserotation) |\n----\n[Return to Full List of Supported CIM](#supported-cim-classes)\n\n#### StaCubic ####\n| Attribute      | Mapped From                                                         | Type and Restriction |\n|:--------------:|:-------------------------------------------------------------------:|:--------------------:|\n| ```objBus```   | Index number of terminal from connected conductingEquipment         | Int (> -1)           |\n| ```objId```    | terminal.conductingEquipment                                        | String (40)          |\n| ```it2p1```    | Set as the first remaining phase if terminal has less than 3 phase  | Int (0, 1, 2, 3, 4)  |\n| ```it2p2```    | Set as the second remaining phase if terminal has less than 3 phase | Int (0, 1, 2, 3, 4)  |\n| ```it2p3```    | Set to Power Factory Default                                        | Int (0, 1, 2, 3, 4)  |\n----\n[Return to Full List of Supported CIM](#supported-cim-classes)\n\n#### StaVt ####\n| Attribute     | Mapped From                   | Type and Restriction            |\n|:-------------:|:-----------------------------:|:-------------------------------:|\n| ```typId```   | Hard set to VT Type 1-1       | [TypVt](#typvt)                 |\n| ```cnBus```   | staCubic                      | String (40)                     |\n| ```cBranch``` | switch for staCubic           | String (40)                     |\n| ```pBusBar``` | Set to Power Factory Default  | String (40)                     |\n| ```pTapSet``` | Hard set to 1                 | Int (>0)                        |\n| ```sTepSet``` | Hard set to 1                 | Int (>0)                        |\n| ```iPhase```  | Hard set to 3                 | Int (1, 2, 3)                   |\n| ```rPhase```  | Hard set to PhaseRotation.ABC | [PhaseRotation](#phaserotation) |\n| ```sTapCon``` | Hard set to Y                 | String (D, Y)                   |\n----\n[Return to Full List of Supported CIM](#supported-cim-classes)\n\n#### TypCt ####\n| Attribute      | Mapped From                  | Type and Restriction       |\n|:--------------:|:----------------------------:|:--------------------------:|\n| ```ioptSat```  | Set to Power Factory Default | String (iec, anscb, anscv) |\n| ```snom```     | Set to Power Factory Default | Double (>=0.0)             |\n| ```raClass```  | Set to Power Factory Default | Double (>0.0)              |\n| ```acLimit```  | Set to Power Factory Default | Double                     |\n----\n[Return to Full List of Supported CIM](#supported-cim-classes)\n\n#### TypFuse ####\n| Attribute      | Mapped From                                   | Type and Restriction |\n|:--------------:|:---------------------------------------------:|:--------------------:|\n| ```frq```      | Hard set to 50.0f                             | Float                |\n| ```iRat```     | voltage greater than 11kv = 20.0f else 400.0f | Float                |\n| ```uRat```     | fuse.baseVoltage / 1000                       | Float                |\n----\n[Return to Full List of Supported CIM](#supported-cim-classes)\n\n#### TypLne ####\n| Attribute      | Mapped From                          | Type and Restriction                  |\n|:--------------:|:------------------------------------:|:-------------------------------------:|\n| ```ithR```     | Set to Power Factory Default         | Float (>=0.0f)                        |\n| ```nlnPh```    | Number of phases without Neutral     | Int (1, 2, 3)                         |\n| ```nNeutral``` | Number of Neutral phase              | Int (0, 1)                            |\n| ```rLine```    | PerLengthSequenceImpedance.r * 1000  | Float (>=0.0f)                        |\n| ```rLine0```   | PerLengthSequenceImpedance.r0 * 1000 | Float (>=0.0f)                        |\n| ```rTemp```    | Set to Power Factory Default         | Float (>0.0f)                         |\n| ```sLine```    | wireInfo.ratedCurrent / 1000         | Float (>0.0f)                         |\n| ```uLine```    | acLineSegment.ratedVoltage           | Float (>=0.0f)                        |\n| ```xLine```    | PerLengthSequenceImpedance.x * 1000  | Float                                 |\n| ```xLine0```   | PerLengthSequenceImpedance.x0 * 1000 | Float (>=0.0f)                        |\n| ```iNomAir```  | Set to Power Factory Default         | Float (>0.0f)                         |\n| ```cOhL```     | wireInfo::Class                      | [LinePositionType](#linepositiontype) |\n| ```tMax```     | Set to Power Factory Default         | Float (>0.0f)                         |\n| ```sysTp```    | Set to Power Factory Default         | [SystemType](#systemtype)             |\n| ```frNom```    | Set to Power Factory Default         | Float (>0.0f)                         |\n| ```mlei```     | Set to Power Factory Default         | String (2)                            |\n| ```bLine```    | Set to Power Factory Default         | Float                                 |\n| ```bLine0```   | Set to Power Factory Default         | Float                                 |\n----\n[Return to Full List of Supported CIM](#supported-cim-classes)\n\n#### TypLod ####\n| Attribute      | Mapped From                  | Type and Restriction            |\n|:--------------:|:----------------------------:|:-------------------------------:|\n| ```phTech```   | load.terminal.phases         | [LoadPhaseTech](#loadphasetech) |\n| ```aP```       | Hard set to 1.0f             | Float                           |\n| ```bP```       | Set to Power Factory Default | Float                           |\n| ```kpu0```     | Hard set to 0.0f             | Float                           |\n| ```kpu1```     | Set to Power Factory Default | Float                           |\n| ```kpu```      | Set to Power Factory Default | Float                           |\n| ```aQ```       | Hard set to 1.0f             | Float                           |\n| ```bQ```       | Set to Power Factory Default | Float                           |\n| ```kqu0```     | Hard set to 0.0f             | Float                           |\n| ```kqu1```     | Set to Power Factory Default | Float                           |\n| ```kqu```      | Set to Power Factory Default | Float                           |\n----\n[Return to Full List of Supported CIM](#supported-cim-classes)\n\n#### TypLodind ####\n| Attribute      | Mapped From                  | Type and Restriction            |\n|:--------------:|:----------------------------:|:-------------------------------:|\n| ```scr```      | Set to Power Factory Default | Float (>=0.0f)                  |\n| ```s0```       | Set to Power Factory Default | Float (>=0.0f)                  |\n| ```aP```       | Hard set to 1.0f             | Float                           |\n| ```bP```       | Set to Power Factory Default | Float                           |\n| ```kpu0```     | Hard set to 0.0f             | Float                           |\n| ```kpu1```     | Set to Power Factory Default | Float                           |\n| ```kpu```      | Set to Power Factory Default | Float                           |\n| ```aQ```       | Hard set to 1.0f             | Float                           |\n| ```bQ```       | Set to Power Factory Default | Float                           |\n| ```kqu0```     | Hard set to 0.0f             | Float                           |\n| ```kqu1```     | Set to Power Factory Default | Float                           |\n| ```kqu```      | Set to Power Factory Default | Float                           |\n----\n[Return to Full List of Supported CIM](#supported-cim-classes)\n\n#### TypTr2 ####\n| Attribute      | Mapped From                                                      | Type and Restriction        |\n|:--------------:|:----------------------------------------------------------------:|:---------------------------:|\n| ```curMg```    | HV winding StarImpedance.energisedEndNoLoadTests.excitingCurrent | Float (>0.0f)               |\n| ```duTap```    | Hard set to 2.5f if LV winding base voltage is < 1000            | Float                       |\n| ```frNom```    | Set to Power Factory Default                                     | Float (>0.0f)               |\n| ```nnTap0```   | HV winding ratioTapChanger.normalStep                            | Int                         |\n| ```nt2ag```    | LV winding phaseAngleClock                                       | Float (12.0f> x >0.0f)      |\n| ```ntpMn```    | HV winding ratioTapChanger.lowStep                               | Int                         |\n| ```ntpMx```    | HV winding ratioTapChanger.highStep                              | Int                         |\n| ```pCuTr```    | Calculated from HV StarImpedance                                 | Float                       |\n| ```pFe```      | HV winding StarImpedance.energisedEndNoLoadTests.loss            | Float (>=0.0f)              |\n| ```phiTr```    | Set to Power Factory Default                                     | Float                       |\n| ```sTrn```     | LV winding ratedS / 1000000                                      | Float (>0.0f)               |\n| ```tapSide```  | Set to Power Factory Default                                     | [TapSide](#tapside)         |\n| ```tr2cnH```   | HV winding WindingConnection & isGrounded()?                     | [VectorGroup](#vectorgroup) |\n| ```tr2cnL```   | LV winding WindingConnection & isGrounded()?                     | [VectorGroup](#vectorgroup) |\n| ```uk0Tr```    | Calculated from HV StarImpedance                                 | Float                       |\n| ```ukTr```     | Calculated from HV StarImpedance                                 | Float                       |\n| ```ur0Tr```    | Calculated from HV StarImpedance                                 | Float                       |\n| ```nt2Ph```    | Number of phases going through PowerTransformer                  | Int (1, 2, 3)               |\n| ```uTrnH```    | HV winding ratedU / 1000                                         | Float (>0.0f)               |\n| ```uTrnL```    | LV winding ratedU / 1000                                         | Float (>0.0f)               |\n| ```zx0hlN```   | Set to Power Factory Default                                     | Float (>0.0f)               |\n| ```iTapCh```   | Set to Power Factory Default                                     | Int (0, 1)                  |\n----\n[Return to Full List of Supported CIM](#supported-cim-classes)\n\n#### TypTr3 ####\n| Attribute         | Mapped From                                                      | Type and Restriction        |\n|:-----------------:|:----------------------------------------------------------------:|:---------------------------:|\n| ```nt3ph```       | Number of phases going through PowerTransformer                  | Int (2, 3)                  |\n| ```strn3H```      | HV winding ratedS / 1000000                                      | Float (>0.0f)               |\n| ```strn3M```      | MV winding ratedS / 1000000                                      | Float (>0.0f)               |\n| ```strn3L```      | LV winding ratedS / 1000000                                      | Float (>0.0f)               |\n| ```utrn3H```      | HV winding ratedU / 1000                                         | Float (>=0.0f)              |\n| ```utrn3M```      | MV winding ratedU / 1000                                         | Float (>0.0f)               |\n| ```utrn3L```      | LV winding ratedU / 1000                                         | Float (>0.0f)               |\n| ```tr3cnH```      | HV winding WindingConnection & isGrounded()?                     | [VectorGroup](#vectorgroup) |\n| ```tr3cnM```      | MV winding WindingConnection & isGrounded()?                     | [VectorGroup](#vectorgroup) |\n| ```tr3cnL```      | LV winding WindingConnection & isGrounded()?                     | [VectorGroup](#vectorgroup) |\n| ```nt3agH```      | HV winding phaseAngleClock                                       | Float (12.0f > x > 0.0f)    |\n| ```nt3agM```      | MV winding phaseAngleClock                                       | Float (12.0f > x > 0.0f)    |\n| ```nt3agL```      | LV winding phaseAngleClock                                       | Float (12.0f > x > 0.0f)    |\n| ```uktr3H```      | Calculated from HV StarImpedance                                 | Float (>=0.0f)              |\n| ```uktr3M```      | Calculated from MV StarImpedance                                 | Float (>=0.0f)              |\n| ```uktr3L```      | Calculated from LV StarImpedance                                 | Float (>=0.0f)              |\n| ```xtor3H```      | Calculated from HV StarImpedance                                 | Float (>=0.0f)              |\n| ```xtor3M```      | Calculated from MV StarImpedance                                 | Float (>=0.0f)              |\n| ```xtor3L```      | Calculated from LV StarImpedance                                 | Float (>=0.0f)              |\n| ```uk0hm```       | Calculated from HV StarImpedance                                 | Float (>=0.0f)              |\n| ```uk0ml```       | Calculated from MV StarImpedance                                 | Float (>=0.0f)              |\n| ```uk0hl```       | Calculated from LV StarImpedance                                 | Float (>=0.0f)              |\n| ```xtr0hm```      | Calculated from HV StarImpedance                                 | Float (>=0.0f)              |\n| ```xtr0ml```      | Calculated from MV StarImpedance                                 | Float (>=0.0f)              |\n| ```xtr0hl```      | Calculated from LV StarImpedance                                 | Float (>=0.0f)              |\n| ```du3tpH```      | HV winding ratioTapChanger.stepVoltageIncrement                  | Float                       |\n| ```ph3trH```      | Set to Power Factory Default                                     | Float                       |\n| ```n3tp0H```      | HV winding ratioTapChanger.neutralStep                           | Int                         |\n| ```n3tmnH```      | HV winding ratioTapChanger.lowStep                               | Int                         |\n| ```n3tmxH```      | HV winding ratioTapChanger.highStep                              | Int                         |\n| ```du3tpM```      | Set to Power Factory Default                                     | Float                       |\n| ```ph3trM```      | Set to Power Factory Default                                     | Float                       |\n| ```n3tp0M```      | Set to Power Factory Default                                     | Int                         |\n| ```n3tmnM```      | Set to Power Factory Default                                     | Int                         |\n| ```n3tmxM```      | Set to Power Factory Default                                     | Int                         |\n| ```du3tpL```      | Set to Power Factory Default                                     | Float                       |\n| ```ph3trL```      | Set to Power Factory Default                                     | Float                       |\n| ```n3tp0L```      | Set to Power Factory Default                                     | Int                         |\n| ```n3tmnL```      | Set to Power Factory Default                                     | Int                         |\n| ```n3tmxL```      | Set to Power Factory Default                                     | Int                         |\n| ```i3loc```       | Set to Power Factory Default                                     | Int (0, 1, 2, 3)            |\n| ```curm3```       | Hv winding StarImpedance.energisedEndNoLoadTests.excitingCurrent | Float (>=0/0f)              |\n| ```pfe```         | Hv winding StarImpedance.energisedEndNoLoadTests.loss            | Float (>=0/0f)              |\n| ```i30lc```       | Set to Power Factory Default                                     | Int (0, 1, 2, 3)            |\n| ```cr0m3```       | Set to Power Factory Default                                     | Float (>=0/0f)              |\n| ```rtox0n```      | Set to Power Factory Default                                     | Float (>=0/0f)              |\n| ```itapos```      | Set to Power Factory Default                                     | Int (0, 1)                  |\n| ```iTapLoading``` | Set to Power Factory Default                                     | Int (0, 1, 2)               |\n----\n[Return to Full List of Supported CIM](#supported-cim-classes)\n\n#### TypVoltreg ####\n| Attribute      | Mapped From                        | Type and Restriction |\n|:--------------:|:----------------------------------:|:--------------------:|\n| ```frNom```    | Set to Power Factory Default       | Float (>0.0f)        |\n| ```nnTap0```   | Set to Power Factory Default       | Int                  |\n| ```pcu```      | Set to Power Factory Default       | Float (>=0.0f)       |\n| ```uk```       | Set to Power Factory Default       | Float (>=0.0f)       |\n| ```ukr```      | Set to Power Factory Default       | Float (>=0.0f)       |\n| ```un```       | HV winding ratedU / 1000 / sqrt(3) | Float (>0.0f)        |\n| ```iN```       | HV winding ratedS / 1000 / un      | Float (>0.0f)        |\n| ```config```   | Hard set to 3                      | Int (1, 2, 3, 4)     |\n----\n[Return to Full List of Supported CIM](#supported-cim-classes)\n\n#### TypVt ####\n| Attribute      | Mapped From                        | Type and Restriction |\n|:--------------:|:----------------------------------:|:--------------------:|\n| ```iOptMod```  | Hard set to 0                      | Int (0, 1, 2)        |\n| ```primTaps``` | Hard set to [1]                    | List of Int          |\n----\n[Return to Full List of Supported CIM](#supported-cim-classes)\n\n### Other Supported Power Factory Objects ###\n\n| Graphical               | Power Factory Element       |\n|:-----------------------:|:---------------------------:|\n| [IntFolder](#intfolder) | [ChaRef](#charef)           |\n| [IntGrfnet](#intgrfnet) | [ChaTime](#chatime)         |\n|                         | [SetDatabase](#setdatabase) |\n|                         | [IntVersion](#intversion)   |\n\n#### IntFolder ####\n| Attribute      | Type and Restriction |\n|:--------------:|:--------------------:|\n| ```ioptTyp```  | Int(0, 1, 2, 3)      |\n----\n[Return to Full List of Other Objects](#other-supported-power-factory-objects)\n\n#### IntGrfnet ####\n| Attribute         | Type and Restriction |\n|:-----------------:|:--------------------:|\n| ```orthoOn```     | Int(0, 1, 2)         |\n| ```snapOn```      | Int(0, 1)            |\n| ```pDataFolder``` | String (40)          |\n| ```iType```       | Int (>0)             |\n----\n[Return to Full List of Other Objects](#other-supported-power-factory-objects)\n\n#### IntVersion ####\n| Attribute      | Type and Restriction |\n|:--------------:|:--------------------:|\n\n----\n[Return to Full List of Other Objects](#other-supported-power-factory-objects)\n\n#### ChaRef ####\n| Attribute      | Type and Restriction |\n|:--------------:|:--------------------:|\n| ```typId```    | [ChaTime](#chatime)  |\n----\n[Return to Full List of Other Objects](#other-supported-power-factory-objects)\n\n#### ChaTime ####\n| Attribute          | Type and Restriction                                        |\n|:------------------:|:-----------------------------------------------------------:|\n| ```source```       | Int (0, 1, 2, 3)                                            |\n| ```cioptStamp```   | Int (0, 1)                                                  |\n| ```database```     | String                                                      |\n| ```dbTableMode```  | Int (0, 1)                                                  |\n| ```dbTable```      | String                                                      |\n| ```dbTimeCol```    | String                                                      |\n| ```dbTimeOffset``` | Float                                                       |\n| ```dbIdCol```      | String                                                      |\n| ```dbIdColValue``` | String                                                      |\n| ```dbValueCol```   | String                                                      |\n| ```usage```        | [DatabaseUsage](#databaseusage)                             |\n| ```approx```       | [CharacteristicApproximation](#characteristicapproximation) |\n| ```useExponent```  | [TimeCharacteristicUnit](#timecharacteristicunit)           |\n----\n[Return to Full List of Other Objects](#other-supported-power-factory-objects)\n\n#### SetDatabase ####\n| Attribute          | Type and Restriction |\n|:------------------:|:--------------------:|\n| ```system```       | String (15)          |\n| ```dbOdbcDriver``` | String               |\n| ```dbService```    | String               |\n| ```dbUser```       | String               |\n| ```dbPassword```   | String               |\n| ```dbDatabase```   | String               |\n| ```dbSchema```     | String               |\n----\n[Return to Full List of Other Objects](#other-supported-power-factory-objects)\n\n### List of Enum ###\n| Enum                                                          | Enum value Type |\n|:-------------------------------------------------------------:|:---------------:|\n| [BusType](#bustype)                                           | String          |\n| [CharacteristicApproximation](#characteristicapproximation)   | Int             |\n| [ControlledPhase](#controlledphase)                           | String          |\n| [ControllerNodeLocation](#controllernodelocation)             | Int             |\n| [CTech](#ctech)                                               | Int             |\n| [DatabaseUsage](#databaseusage)                               | Int             |\n| [FeederOrientation](#feederorientation)                       | Int             |\n| [InAirState](#inairstate)                                     | Int             |\n| [InputMode](#inputmode)                                       | String          |\n| [InternalGroundingStarPoint](#internalgroundingstarpoint)     | Int             |\n| [LinePositionType](#linepositiontype)                         | Int             |\n| [LoadPhaseTech](#loadphasetech)                               | Int             |\n| [LossAssignment](#lossassignment)                             | Int             |\n| [NConnection](#nconnection)                                   | Int             |\n| [Operation](#operation)                                       | String          |\n| [PhaseRotation](#phaserotation)                               | Int             |\n| [PhaseTechnology](#phasetechnology)                           | Int             |\n| [PVsysPhTech](#pvsysphtech)                                   | String          |\n| [ServiceState](#servicestate)                                 | Int             |\n| [StateOnOff](#stateonoff)                                     | Int             |\n| [SwitchType](#switchtype)                                     | String          |\n| [SystemType](#systemtype)                                     | Int             |\n| [TapSide](#tapside)                                           | Int             |\n| [TimeCharacteristicUnit](#timecharacteristicunit)                                           | Int             |\n| [TransformerSiteType](#transformersitetype)                   | String          |\n| [Usage](#usage)                                               | Int             |\n| [VectorGroup](#vectorgroup)                                   | String          |\n| [VoltageSourceType](#voltagesourcetype)                       | Int             |\n\n#### BusType ####\n| Entry       | ID |\n|:-----------:|:--:|\n| ```PQ```    | PQ |\n| ```PV```    | PV |\n| ```SL```    | SL |\n----\n[Return to Full List of Enum](#list-of-enum)\n\n#### CharacteristicApproximation ####\n| Entry             | ID |\n|:-----------------:|:--:|\n| ```None```        | 0  |\n| ```Linear```      | 1  |\n| ```Polynominal``` | 2  |\n| ```Spline```      | 3  |\n| ```Hermite```     | 4  |\n----\n[Return to Full List of Enum](#list-of-enum)\n\n#### ControlledPhase ####\n| Entry       | ID        |\n|:-----------:|:---------:|\n| ```A```     | a         |\n| ```B```     | b         |\n| ```C```     | c         |\n| ```AB```    | a-b       |\n| ```BC```    | b-c       |\n| ```CA```    | c-a       |\n| ```POS```   | Pos.Seq.  |\n----\n[Return to Full List of Enum](#list-of-enum)\n\n#### ControllerNodeLocation ####\n| Entry       | ID |\n|:-----------:|:--:|\n| ```HV```    | 0  |\n| ```LV```    | 1  |\n| ```EXT```   | 2  |\n----\n[Return to Full List of Enum](#list-of-enum)\n\n#### DatabaseUsage ####\n| Entry                   | ID |\n|:-----------------------:|:--:|\n| ```RelativeInPercent``` | 0  |\n| ```Relative```          | 1  |\n| ```Absolute```          | 2  |\n----\n[Return to Full List of Enum](#list-of-enum)\n\n#### CTech ####\n| Entry           | ID |\n|:---------------:|:--:|\n| ```PH3_D```     | 0  |\n| ```PH3_Y```     | 1  |\n| ```PH3_YN```    | 2  |\n| ```PH2_Y```     | 3  |\n| ```PH2_YN```    | 4  |\n| ```PH1_PH_PH``` | 5  |\n| ```PH1_PH_N```  | 6  |\n| ```PH1_PH_E```  | 7  |\n----\n[Return to Full List of Enum](#list-of-enum)\n\n#### FeederOrientation ####\n| Entry           | ID |\n|:---------------:|:--:|\n| ```Busbar```    | 0  |\n| ```Branch```    | 1  |\n----\n[Return to Full List of Enum](#list-of-enum)\n\n#### InAirState ####\n| Entry           | ID |\n|:---------------:|:--:|\n| ```Ground```    | 0  |\n| ```Air```       | 1  |\n----\n[Return to Full List of Enum](#list-of-enum)\n\n#### InAirState ####\n| Entry           | ID  |\n|:---------------:|:---:|\n| ```DEF```       | DEF |\n| ```PQ```        | PQ  |\n| ```PC```        | PC  |\n| ```IC```        | IC  |\n| ```SC```        | SC  |\n| ```QC```        | QC  |\n| ```IP```        | IP  |\n| ```SP```        | SP  |\n| ```SQ```        | SQ  |\n----\n[Return to Full List of Enum](#list-of-enum)\n\n#### InternalGroundingStarPoint ####\n| Entry              | ID |\n|:------------------:|:--:|\n| ```Connected```    | 0  |\n| ```NotConnected``` | 1  |\n----\n[Return to Full List of Enum](#list-of-enum)\n\n#### LinePositionType ####\n| Entry              | ID |\n|:------------------:|:--:|\n| ```Cable```        | 0  |\n| ```OverheadWire``` | 1  |\n----\n[Return to Full List of Enum](#list-of-enum)\n\n#### LoadPhaseTech ####\n| Entry           | ID |\n|:---------------:|:--:|\n| ```PH3_D```     | 0  |\n| ```PH3_PH_E```  | 2  |\n| ```PH3_YN```    | 3  |\n| ```PH2_PH_E```  | 4  |\n| ```PH2_YN```    | 5  |\n| ```PH1_PH_PH``` | 7  |\n| ```PH1_PH_N```  | 8  |\n| ```PH1_PH_E```  | 9  |\n----\n[Return to Full List of Enum](#list-of-enum)\n\n#### LossAssignment ####\n| Entry                      | ID |\n|:--------------------------:|:--:|\n| ```AccordingToGrouping```  | 0  |\n| ```UniformlyDistributed``` | 1  |\n| ```ToHVSide```             | 2  |\n| ```ToMVSide```             | 3  |\n| ```ToLVSide```             | 4  |\n----\n[Return to Full List of Enum](#list-of-enum)\n\n#### NConnection ####\n| Entry                  | ID |\n|:----------------------:|:--:|\n| ```None```             | 0  |\n| ```AtTerminalABCN```   | 1  |\n| ```SeparateTerminal``` | 2  |\n----\n[Return to Full List of Enum](#list-of-enum)\n\n#### Operation ####\n| Entry         | ID |\n|:-------------:|:--:|\n| ```Create```  | C  |\n| ```Update```  | U  |\n| ```Delete```  | D  |\n| ```Merge```   | M  |\n| ```Ignore```  | I  |\n----\n[Return to Full List of Enum](#list-of-enum)\n\n#### PhaseRotation ####\n| Entry       | ID |\n|:-----------:|:--:|\n| ```ABC```   | 0  |\n| ```BCA```   | 1  |\n| ```CAB```   | 2  |\n| ```BAC```   | 3  |\n| ```CBA```   | 4  |\n| ```ACB```   | 5  |\n----\n[Return to Full List of Enum](#list-of-enum)\n\n#### PhaseTechnology ####\n| Entry       | ID |\n|:-----------:|:--:|\n| ```ABC```   | 0  |\n| ```ABC_N``` | 1  |\n| ```BI```    | 2  |\n| ```BI_N```  | 3  |\n| ```PH2```   | 4  |\n| ```PH2_N``` | 5  |\n| ```PH1```   | 6  |\n| ```PH1_N``` | 7  |\n| ```N```     | 8  |\n----\n[Return to Full List of Enum](#list-of-enum)\n\n#### PVsysPhTech ####\n| Entry       | ID       |\n|:-----------:|:--------:|\n| ```PH3```   | 3PH      |\n| ```PH3E```  | 3PH-E    |\n| ```PH1E```  | 1PH PH-E |\n| ```PH1N```  | 1PH PH-N |\n----\n[Return to Full List of Enum](#list-of-enum)\n\n#### ServiceState ####\n| Entry            | ID  |\n|:----------------:|:---:|\n| ```InService```  | 0   |\n| ```OutService``` | 1   |\n----\n[Return to Full List of Enum](#list-of-enum)\n\n#### StateOnOff ####\n| Entry            | ID  |\n|:----------------:|:---:|\n| ```Open```       | 0   |\n| ```Closed```     | 1   |\n----\n[Return to Full List of Enum](#list-of-enum)\n\n#### SwitchType ####\n| Entry                             | ID    |\n|:---------------------------------:|:-----:|\n| ```CircuitBreaker```              | cbk   |\n| ```Disconnector```                | dct   |\n| ```DisconnectingCircuitBreaker``` | dcb   |\n| ```SwitchDisconnector```          | sdc   |\n| ```LoadSwitch```                  | swt   |\n| ```Fuse```                        | fus   |\n----\n[Return to Full List of Enum](#list-of-enum)\n\n#### SystemType ####\n| Entry       | ID  |\n|:-----------:|:---:|\n| ```AC```    | 0   |\n| ```DC```    | 1   |\n| ```AC_BI``` | 2   |\n----\n[Return to Full List of Enum](#list-of-enum)\n\n#### TapSide ####\n| Entry       | ID  |\n|:-----------:|:---:|\n| ```HV```    | 0   |\n| ```LV```    | 1   |\n----\n[Return to Full List of Enum](#list-of-enum)\n\n#### TimeCharacteristicUnit ####\n| Entry         | ID  |\n|:-------------:|:---:|\n| ```DEFAULT``` | 0   |\n| ```USER```    | 1   |\n----\n[Return to Full List of Enum](#list-of-enum)\n\n#### TransformerSiteType ####\n| Entry                      | ID       |\n|:--------------------------:|:--------:|\n| ```Pad```                  | PAD      |\n| ```Pole```                 | POLE     |\n| ```ZoneSub```              | ZS       |\n| ```TransmissionSupplier``` | TS       |\n| ```TransGridSupplier```    | BSP      |\n| ```SWERIso```              | SWER ISO |\n| ```SWER```                 | SWER     |\n| ```HVCustomer```           | HV_CCP   |\n----\n[Return to Full List of Enum](#list-of-enum)\n\n#### Usage ####\n| Entry               | ID  |\n|:-------------------:|:---:|\n| ```Busbar```        | 0   |\n| ```JunctionNode```  | 1   |\n| ```InternalNode```  | 2   |\n----\n[Return to Full List of Enum](#list-of-enum)\n\n#### VectorGroup ####\n| Entry       | ID  |\n|:-----------:|:---:|\n| ```Y```     | Y   |\n| ```YN```    | YN  |\n| ```Z```     | Z   |\n| ```ZN```    | ZN  |\n| ```D```     | D   |\n----\n[Return to Full List of Enum](#list-of-enum)\n\n#### VoltageSourceType ####\n| Entry                          | ID  |\n|:------------------------------:|:---:|\n| ```VOLTAGE_SOURCE```           | 0   |\n| ```IDEAL_RC_SOURCE```          | 1   |\n| ```WARD_EQUIVALENT```          | 2   |\n| ```EXTENDED_WARD_EQUIVALENT``` | 3   |\n----\n[Return to Full List of Enum](#list-of-enum)\n\n### List of Available Processors ###\nDgsService post mapping can be put through a list of processors. These processors can improves\nthe clarity of geographic diagrams or help guide the auto draw function of power\nfactory to produce better schematics diagrams. Some of these processors will help with\nload flow study set up or timescale database linkage.\n\n| Processors                                                                      | Functionality                                                                                                        |\n|:-------------------------------------------------------------------------------:|:---------------------------------------------------------------------------------------------------------------------|\n| [AdditionalVariablesProcessor](#additionalvariablesprocessor)                   | Processor that adds mapping for additional variables based on request.                                               |\n| [DatabaseProcessor](#databaseprocessor)                                         | Processor create characteristic object to line up ElmLod and timescale database entries.                             |\n| [DefaultLoadProcessor](#defaultloadprocessor)                                   | Processor that assign loads to ElmLod base on the instruction or data provided.                                      |\n| [ElementGapperProcessor](#elementgapperprocessor)                               | Processor attempt to put gapping distance between ElmTerm and the Object inbetween it, so it looks presentable and can be toggled in power factory. |\n| [ElmCoupProcessor](#elmcoupprocessor)                                           | Processor assigning the correct ElmCoup usage so correct custom icon shows up in the model.                          |\n| [ElmFeederColourProcessor](#elmfeedercolourprocessor)                           | Processor assigning feeder colour base on an input file so network of same feeder has the same colour.               |\n| [ElmNetNameProcessor](#elmnetnameprocessor)                                     | Processor renaming LV Elmnet for clarity and organization. Part of the aesthetic clean-up.                           |\n| [FinalCleanUpProcessor](#finalcleanupprocessor)                                 | Processor that does a round of final clean up of the model to remove potential error and cluster.                    |\n| [LoadSiteProcessor](#loadsiteprocessor)                                         | Processor creating sites and putting Elmlod in them, so they show up as a circle on the main map.                    |\n| [LvConsolidationProcessor](#lvconsolidationprocessor)                           | Processor consolidating LV grid into their respective HV grid.                                                       |\n| [LvElmTermProcessor](#lvelmtermprocessor)                                       | Processor that normalize Elmterms downstream of distribution transformers.                                           |\n| [NERProcessor](#nerprocessor)                                                   | Processor that creates an ElmGndswt and place it downstream of ElmSind.                                              |\n| [OverlappingNodesAndEquipmentProcessor](#overlappingnodesandequipmentprocessor) | Processor to fix overlapping nodes and equipments that are not directly connected.                                   |\n| [RecloserProcessor](#recloserprocessor)                                         | This is the second half of the recloser site processor, first part is in the importer.                               |\n| [RemoveGpsSiteCoordsProcessor](#removegpssitecoordsprocessor)                   | Processor removing GPS co-ord from equipment in a substation site or energy consumer site so it doesn\'t clutter the main geographic map.|\n| [RemoveHangingElmCoupProcessor](#removehangingelmcoupprocessor)                 | Processor removing Elmcoup (switch) that is only connected on one side. This just remove noise from the substation.  |\n| [StarPointProcessor](#starpointprocessor)                                       | Processor assigning resistance of internal grounding value for distribution transformers.                            |\n| [SubstationEdgeElmTermSortingProcessor](#substationedgeelmtermsortingprocessor) | Processor that sort all Elmterm connected to equipments in substations into the substation for diagram clarity.      |\n| [SubtransProcessor](#subtransprocessor)                                         | Processor that consolidate Subtrans circuits into loops and disable non-BSP energy sources.                          |\n| [TransformerProcessor](#transformerprocessor)                                   | Processor fix up distribution transformer sites and isolation transformers.                                          |\n| [TriSwitchProcessor](#triswitchprocessor)                                       | Processor that moves tri switch set up from their original point to between their flanking lines.                    |\n| [VariantProcessor](#variantprocessor)                                           | Processor to sort objects created in hosting capacity scenarios into variant stages (IntSstage).                     |\n\n#### AdditionalVariablesProcessor ####\n1. Assign more information label to Open Switches.\n2. Assign more information label to Sites.\n----\n[Return to Full List of Processors](#list-of-available-processors)\n\n#### DatabaseProcessor ####\nRequired: [databaseConfig](#configuration) and [nmiDatabaseList](#configuration) are set in the config.\n1. A [SetDatabase](#setdatabase) object is created and added to the DgsService base on details provided in the config file.\n2. A [ChaTime](#chatime) and [ChaRef](#charef) object is created for each EnergyConsumer if its NMI matches an entry in the provided [nmiDatabaseList](#configuration).\n----\n[Return to Full List of Processors](#list-of-available-processors)\n\n#### DefaultLoadProcessor ####\nOptional: feederMax and hvcMaxDemand set in the config.\n1. If [feederMax](#configuration) and [hvcMaxDemand](#configuration) are set in config, load value will be distributed to each ElmLod base on placement.\n[![Assign load value](/img/DefaultLoadProcessor.png)](/img/DefaultLoadProcessor.png)\n    **Subtrans Model**: An aggregated load is created at the feeder head and provided value is assigned to the aggregated load. <br />\n    **HV Model**: Provided value is split into downstream aggregated load placed immediately downstream of DTX base on DTX size, and HV customer is assigned value base on [hvcMaxDemand](#configuration). <br />\n    **LV Model**: Value that would\'ve been assigned to the DTX aggregated load is instead evenly split up and assigned to all downstream [ElmLod](#elmlod).\n\n2. When [feederMax](#configuration) and [hvcMaxDemand](#configuration) are not provided, a default load value is assigned to each [ElmLod](#elmlod).\n----\n[Return to Full List of Processors](#list-of-available-processors)\n\n#### ElementGapperProcessor ####\n[![Rearrange Objects](/img/ElementGapper.png)](/img/ElementGapper.png)\nConnectivity nodes in CIM does not carry location data, thus their placement must be determined by the conducting equipment attached to it. Unfortunately,\nthis will result in overlapping elements in the power factory model. The ElementGapperProcessor will go through objects in the geographic diagram and create\nproper spacing between these objects to improve model clarity and allow user interaction.\n\n----\n[Return to Full List of Processors](#list-of-available-processors)\n\n#### ElmCoupProcessor ####\nThe processor goes through each [ElmCoup](#elmcoup) in the DgsService and assign the correct elmCoup.aUsage value base on elmCoup.chrName value.\n\n----\n[Return to Full List of Processors](#list-of-available-processors)\n\n#### ElmFeederColourProcessor ####\nThe processor goes through each [ElmFeeder](#elmfeeder) in the DgsService and assign the correct elmFeeder.iColor value base on the file provided by [feederColourPath](#configuration).\n\n----\n[Return to Full List of Processors](#list-of-available-processors)\n\n#### ElmNetNameProcessor ####\nThe processor goes through each [ElmNet](#elmnet) in the DgsService and clean up all DTX names.\n\n----\n[Return to Full List of Processors](#list-of-available-processors)\n\n#### FinalCleanUpProcessor ####\nThe processor does a final pass on the model to clean up potential errors and reduce cluster. <br />\n1. Remove all energy source with no source impedance<br />\n2. Final pass to ensure elements are sorted into the correct folder<br />\n3. Remove Current transformers that were attached to elements removed during clean-up/post process<br />\n4. Remove unused StaCubic and ElmTerm from grounding switches and assign correct objBus to staCubic that is in use<br />\n5. Remove all Auxiliary equipments from zone sub because they are just clutter<br />\n6. Remove any Stacubic (Terminals) that are not being used by any equipment<br />\n7. Remove any equipment that is not connected to anything<br />\n8. Remove and Elmterm(Connectivity node) that has nothing attached to it<br />\n9. Disable all isolation transformer and auxiliary transformer in substations\n\n----\n[Return to Full List of Processors](#list-of-available-processors)\n\n#### LoadSiteProcessor ####\nThe processor goes through each [ElmLod](#elmlod) in the DgsService and create an [ElmSite](#elmsite) and move it out of the geographic diagram if\nthe [ElmLod](#elmlod) doesn\'t belong in an [ElmSubstat](#elmsubstat) or [ElmTrfstat](#elmtrfstat).\n\n----\n[Return to Full List of Processors](#list-of-available-processors)\n\n#### LvConsolidationProcessor ####\nThe processor goes through each LvFeeder in the NetworkService and assign their upstream feeder to the corresponding ElmNet.foldId. This will consolidate all LV\ngrid into the HV grid to lower clustering. This processor should be disabled if user want a model with LV section in their own toggleable grid.\n\n----\n[Return to Full List of Processors](#list-of-available-processors)\n\n#### LvElmTermProcessor ####\nThe processor goes through all DTX in the NetworkService and standardize all downstream [ElmTerm](#elmterm) ukNom and unkNom value for\nload flow studies.\n\n----\n[Return to Full List of Processors](#list-of-available-processors)\n\n#### NERProcessor ####\nProcessor creates an ElmGndswt and place it downstream of ElmSind.\n\n----\n[Return to Full List of Processors](#list-of-available-processors)\n\n#### OverlappingNodesAndEquipmentProcessor ####\nThe processor goes through all [ElmTerm](#elmterm) and find [ServiceElement](#serviceelement) with exact identical gpsLat and gpsLon and separates them.\n1. Currently only support movement of [ElmCoup](#elmcoup)\n\n----\n[Return to Full List of Processors](#list-of-available-processors)\n\n#### RecloserProcessor ####\n[![Reorganize recloser sites](/img/RecloserProcessor.png)](/img/RecloserProcessor.png)\nThe processor goes through all reclosers and voltage regulators in the dgsService to rearrange/create/remove components for geographic diagram clarity.\n\n----\n[Return to Full List of Processors](#list-of-available-processors)\n\n#### RemoveGpsSiteCoordsProcessor ####\nThe processor goes through all [ElmTrfstat](#elmtrfstat) and [ElmSubstat](#elmsubstat) in the DgsService and remove all gpsLon and gpsLat value from [ServiceElement](#serviceelement)\nbelonging to these equipment containers to improve geographic diagram clarity.\n\n----\n[Return to Full List of Processors](#list-of-available-processors)\n\n#### RemoveHangingElmCoupProcessor ####\nThe processor goes through all elmCoup and relFuse in the DgsService and remove them if they meet all of the following criteria: <br />\n1. Only connected on one side<br />\n2. Does not have an auxiliary equipment attached to their terminal<br />\n3. Doesn\'t belong to a feeder<br />\n4. If it belongs to a feeder, it must not contain the feeder head terminal<br />\nThis should improve visual cluttering of auto-drawn internal schematics diagram, and remove unnecessary noise on the geographic diagram.\n\n----\n[Return to Full List of Processors](#list-of-available-processors)\n\n#### StarPointProcessor ####\nRequired: [distributionTransformerConfig](#configuration)\nThe processor takes the rGround and xGround value from the configuration and assign them to every DTX.\n\n----\n[Return to Full List of Processors](#list-of-available-processors)\n\n#### SubstationEdgeElmTermSortingProcessor ####\nThe processor sorts all [ElmTerm](#elmterm) that is associated with [StaCubic](#stacubic) belonging to [ServiceElement](#serviceelement) within an [ElmSubstat](#elmsubstat) into the [ElmSubstat](#elmsubstat) by assigning the\nthe [ElmSubstat](#elmsubstat)\'s fID to the [ElmTerm](#elmterm)\'s foldID.\n\n----\n[Return to Full List of Processors](#list-of-available-processors)\n\n#### SubtransProcessor ####\nThe processor cleans up the following subtrans related issues:<br />\n1. Consolidate all circuit grid and all their equipment into their respective loop grid to lower grid clusters.<br />\n2. If BSP substations exists in the model, all energy sources in non-BSP substations are disabled for load flow studies.\n\n----\n[Return to Full List of Processors](#list-of-available-processors)\n\n#### TransformerProcessor ####\nThe processor cleans up the following PowerTransformer related issues:<br />\n1. Ensure Flanking ElmTerm of ElmTr2 has matching phase technology for its vectors<br />\n2. Specific [ElmTerm](#elmterm) is assigned as Busbar to allow better power factory internal drawing<br />\n3. Phase technology of [ElmTerm](#elmterm) and immediate [StaCubic](#stacubic) (LV side) is fixed up for different transformer functions (within the ElmSubstat for non-LV models which are processed by the [LvElmTermProcessor](#lvelmtermprocessor)<br />\n4. Site type is updated for DTX for geographic diagram symbol assignment<br />\n5. Set [ElmTerm](#elmterm) and [ElmCoup](#elmcoup) post PowerTransformer neutral connection to be PHH1_N for phase consistency<br />\n6. Adapting values from NER (Ground from CIM) as zone substation impedance\n\n----\n[Return to Full List of Processors](#list-of-available-processors)\n\n#### TriSwitchProcessor ####\n[![Reorganize Tri-Switch Formation](/img/TriSwitchProcessor.png)](/img/TriSwitchProcessor.png)\nThe processor cleans up tri-switch formation for better geographic diagram clarity.\n\n----\n[Return to Full List of Processors](#list-of-available-processors)\n\n#### VariantProcessor ####\nThis is a processor to sort objects created in hosting capacity scenarios into variant stages (IntSstage).\n\n----\n[Return to Full List of Processors](#list-of-available-processors)\n')))}f.isMDXComponent=!0}}]);