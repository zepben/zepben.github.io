(window.webpackJsonp=window.webpackJsonp||[]).push([[3],{52:function(e,a,t){"use strict";t.r(a),t.d(a,"frontMatter",(function(){return s})),t.d(a,"metadata",(function(){return l})),t.d(a,"rightToc",(function(){return d})),t.d(a,"default",(function(){return b}));var r=t(2),i=t(6),n=(t(0),t(77)),c=t(79),o=t(80),s={id:"sdk-persistence",title:"Persisting Models"},l={unversionedId:"sdk-persistence",id:"sdk-persistence",isDocsHomePage:!1,title:"Persisting Models",description:"Local database",source:"@site/docs\\persistence.mdx",slug:"/sdk-persistence",permalink:"/evolve/docs/evolve-sdk-jvm/sdk-persistence",editUrl:"https://github.com/zepben/docs/persistence.mdx",version:"current",sidebar:"someSidebar",previous:{title:"Tracing",permalink:"/evolve/docs/evolve-sdk-jvm/sdk-tracing"},next:{title:"Requesting Models",permalink:"/evolve/docs/evolve-sdk-jvm/sdk-consumer"}},d=[{value:"Local database",id:"local-database",children:[]},{value:"Evolve data service",id:"evolve-data-service",children:[]}],v={rightToc:d};function b(e){var a=e.components,t=Object(i.a)(e,["components"]);return Object(n.b)("wrapper",Object(r.a)({},v,t,{components:a,mdxType:"MDXLayout"}),Object(n.b)("h2",{id:"local-database"},"Local database"),Object(n.b)("p",null,"The SDK provides the ability to save your model to a local SQLite database. This may be handy for situations such as saving a\nmodel in a specific state / configuration or it may be quicker to persist the model to a local database and reload than\nit is rebuilding your model from a source data system every time you want to build it."),Object(n.b)(c.a,{groupId:"code-example",defaultValue:"java",values:[{label:"Java",value:"java"},{label:"Kotlin",value:"kotlin"}],mdxType:"Tabs"},Object(n.b)(o.a,{value:"java",mdxType:"TabItem"},Object(n.b)("pre",null,Object(n.b)("code",Object(r.a)({parentName:"pre"},{className:"language-java"}),"void saveToDb(String dbFile, NetworkService networkService, DiagramService diagramService, CustomerService customerService) {\n    // All service are saved to the given dbFile file\n    new DatabaseWriter(dbFile).save(listOf(networkService, diagramService, customerService));\n}\n\nvoid readFromDb(String dbFile, NetworkService networkService, DiagramService diagramService, CustomerService customerService) {\n    // All the services will be loaded with their respective objects from dbFile\n    new DatabaseReader(dbFile).load(networkService, diagramService, customerService)\n}\n"))),Object(n.b)(o.a,{value:"kotlin",mdxType:"TabItem"},Object(n.b)("pre",null,Object(n.b)("code",Object(r.a)({parentName:"pre"},{className:"language-kotlin"}),"fun saveToDb(dbFile: String, networkService: NetworkService, diagramService: DiagramService, customerService: CustomerService) {\n    // All service are saved to the given dbFile file\n    DatabaseWriter(dbFile).save(listOf(networkService, diagramService, customerService))\n}\n\nfun readFromDb(dbFile: String, networkService: NetworkService, diagramService: DiagramService, customerService: CustomerService) {\n    // All the services will be loaded with their respective objects from dbFile\n    DatabaseReader(dbFile).load(networkService, diagramService, customerService)\n}\n")))),Object(n.b)("h2",{id:"evolve-data-service"},"Evolve data service"),Object(n.b)("div",{className:"admonition admonition-warning alert alert--danger"},Object(n.b)("div",Object(r.a)({parentName:"div"},{className:"admonition-heading"}),Object(n.b)("h5",{parentName:"div"},Object(n.b)("span",Object(r.a)({parentName:"h5"},{className:"admonition-icon"}),Object(n.b)("svg",Object(r.a)({parentName:"span"},{xmlns:"http://www.w3.org/2000/svg",width:"12",height:"16",viewBox:"0 0 12 16"}),Object(n.b)("path",Object(r.a)({parentName:"svg"},{fillRule:"evenodd",d:"M5.05.31c.81 2.17.41 3.38-.52 4.31C3.55 5.67 1.98 6.45.9 7.98c-1.45 2.05-1.7 6.53 3.53 7.7-2.2-1.16-2.67-4.52-.3-6.61-.61 2.03.53 3.33 1.94 2.86 1.39-.47 2.3.53 2.27 1.67-.02.78-.31 1.44-1.13 1.81 3.42-.59 4.78-3.42 4.78-5.56 0-2.84-2.53-3.22-1.25-5.61-1.52.13-2.03 1.13-1.89 2.75.09 1.08-1.02 1.8-1.86 1.33-.67-.41-.66-1.19-.06-1.78C8.18 5.31 8.68 2.45 5.05.32L5.03.3l.02.01z"})))),"warning")),Object(n.b)("div",Object(r.a)({parentName:"div"},{className:"admonition-content"}),Object(n.b)("p",{parentName:"div"},"The API for persisting data to a remote server is currently in alpha and very likely to experience breaking changes\nin the future. Please provide any feedback about this API to ",Object(n.b)("a",Object(r.a)({parentName:"p"},{href:"www.zepben.com"}),"Zepben"),"."))),Object(n.b)("p",null,"The SDK provides a client to send models to a remote data server via ",Object(n.b)("a",Object(r.a)({parentName:"p"},{href:"https://grpc.io/"}),"gRPC"),". The service and proto\ndefinitions for this API can be found ",Object(n.b)("a",Object(r.a)({parentName:"p"},{href:"https://github.com/zepben/evolve-grpc"}),"here"),". An implementation of the server for\nthe services is provided with the Evolve platform data services."),Object(n.b)("p",null,"Here is an example of how to connect to and send a model to the evolve data server:"),Object(n.b)(c.a,{groupId:"code-example",defaultValue:"java",values:[{label:"Java",value:"java"},{label:"Kotlin",value:"kotlin"}],mdxType:"Tabs"},Object(n.b)(o.a,{value:"java",mdxType:"TabItem"},Object(n.b)("pre",null,Object(n.b)("code",Object(r.a)({parentName:"pre"},{className:"language-java"}),"Channel channel = GrpcChannelFactory.create(new ConnectionConfig(host, port));\n\nNetworkService networkService = new NetworkService();\nCustomerService customerService = new CustomerService();\nDiagramService diagramService = new DiagramService();\npopulateNetworkObjects(networkService)\n\nnew NetworkProducerClient(channel).send(networkService);\nnew CustomerProducerClient(channel).send(customerService);\nnew DiagramProducerClient(channel).send(diagramService);\n"))),Object(n.b)(o.a,{value:"kotlin",mdxType:"TabItem"},Object(n.b)("pre",null,Object(n.b)("code",Object(r.a)({parentName:"pre"},{className:"language-kotlin"}),"val channel = GrpcChannelFactory.create(ConnectionConfig(host, port))\n\nval networkService = NetworkService()\nval customerService = CustomerService()\nval diagramService = DiagramService()\npopulateNetworkObjects(networkService)\n\nNetworkProducerClient(channel).send(networkService)\nCustomerProducerClient(channel).send(customerService)\nDiagramProducerClient(channel).send(diagramService)\n")))))}b.isMDXComponent=!0}}]);