"use strict";(self.webpackChunkevolve_sdk_python_doco=self.webpackChunkevolve_sdk_python_doco||[]).push([[4737],{3905:function(e,t,n){n.d(t,{Zo:function(){return u},kt:function(){return h}});var a=n(67294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},i=Object.keys(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var s=a.createContext({}),p=function(e){var t=a.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},u=function(e){var t=p(e.components);return a.createElement(s.Provider,{value:t},e.children)},c="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},m=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,i=e.originalType,s=e.parentName,u=l(e,["components","mdxType","originalType","parentName"]),c=p(n),m=r,h=c["".concat(s,".").concat(m)]||c[m]||d[m]||i;return n?a.createElement(h,o(o({ref:t},u),{},{components:n})):a.createElement(h,o({ref:t},u))}));function h(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var i=n.length,o=new Array(i);o[0]=m;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l[c]="string"==typeof e?e:r,o[1]=l;for(var p=2;p<i;p++)o[p]=n[p];return a.createElement.apply(null,o)}return a.createElement.apply(null,n)}m.displayName="MDXCreateElement"},85162:function(e,t,n){n(67294)},65488:function(e,t,n){n(67294),n(72389)},21782:function(e,t,n){n.r(t),n.d(t,{assets:function(){return u},contentTitle:function(){return s},default:function(){return h},frontMatter:function(){return l},metadata:function(){return p},toc:function(){return c}});var a=n(87462),r=n(63366),i=(n(67294),n(3905)),o=(n(65488),n(85162),["components"]),l={id:"update-network-state-client",title:"Update Network State Client"},s=void 0,p={unversionedId:"update-network-state-client",id:"version-0.46.0/update-network-state-client",title:"Update Network State Client",description:"The UpdateNetworkStateClient will allow you to interact with a server running the UpdateNetworkStateService (e.g. EWB). It provides an object-oriented",source:"@site/versioned_docs/version-0.46.0/update-network-state-client.mdx",sourceDirName:".",slug:"/update-network-state-client",permalink:"/evolve/docs/python-sdk/0.46.0/update-network-state-client",draft:!1,tags:[],version:"0.46.0",frontMatter:{id:"update-network-state-client",title:"Update Network State Client"},sidebar:"someSidebar",previous:{title:"Query Network State Service",permalink:"/evolve/docs/python-sdk/0.46.0/query-network-state-service"},next:{title:"Update Network State Service",permalink:"/evolve/docs/python-sdk/0.46.0/update-network-state-service"}},u={},c=[{value:"Creating a gRPC channel",id:"creating-a-grpc-channel",level:2},{value:"Using a gRPC channel with your client",id:"using-a-grpc-channel-with-your-client",level:2},{value:"Using your client to update the network state",id:"using-your-client-to-update-the-network-state",level:2},{value:"Updating current network state",id:"updating-current-network-state",level:3},{value:"Updating current switch state",id:"updating-current-switch-state",level:4},{value:"Adding cuts",id:"adding-cuts",level:4},{value:"Removing cuts",id:"removing-cuts",level:4},{value:"Adding jumpers",id:"adding-jumpers",level:4},{value:"Removing jumpers",id:"removing-jumpers",level:4},{value:"Multiple Requests",id:"multiple-requests",level:4},{value:"Batch result responses",id:"batch-result-responses",level:3}],d={toc:c},m="wrapper";function h(e){var t=e.components,n=(0,r.Z)(e,o);return(0,i.kt)(m,(0,a.Z)({},d,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("p",null,"The ",(0,i.kt)("inlineCode",{parentName:"p"},"UpdateNetworkStateClient")," will allow you to interact with a server running the ",(0,i.kt)("inlineCode",{parentName:"p"},"UpdateNetworkStateService")," (e.g. EWB). It provides an object-oriented\nwrapper for the gRPC library, with the ability to update information about the state of the network. This is done with the following 3 steps:"),(0,i.kt)("ol",null,(0,i.kt)("li",{parentName:"ol"},"Create a gRPC connection to the server."),(0,i.kt)("li",{parentName:"ol"},"Create an instance of the ",(0,i.kt)("inlineCode",{parentName:"li"},"UpdateNetworkStateClient")," using your gRPC connection."),(0,i.kt)("li",{parentName:"ol"},"Use your ",(0,i.kt)("inlineCode",{parentName:"li"},"UpdateNetworkStateClient")," to update the state of the network.")),(0,i.kt)("h2",{id:"creating-a-grpc-channel"},"Creating a gRPC channel"),(0,i.kt)("p",null,"The channel gRPC channel can be directly from the gRPC library, or using our ",(0,i.kt)("inlineCode",{parentName:"p"},"GrpcChannelBuilder")," helper. At its most basic, this can be achieved with:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-python"},"from zepben.evolve import GrpcChannelBuilder\n\nchannel = GrpcChannelBuilder().for_address(host, port).build()\n")),(0,i.kt)("p",null,"For more in depth options for using a gRPC channel, see the ",(0,i.kt)("a",{parentName:"p",href:"https://grpc.io/docs/languages/"},"gRPC documentation"),", or look up a tutorial."),(0,i.kt)("h2",{id:"using-a-grpc-channel-with-your-client"},"Using a gRPC channel with your client"),(0,i.kt)("p",null,"Using your gRPC channel with the ",(0,i.kt)("inlineCode",{parentName:"p"},"UpdateNetworkStateClient")," is as simple as passing it to the constructor."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-python"},"from zepben.evolve import UpdateNetworkStateClient\n\nclient = UpdateNetworkStateClient(channel)\n")),(0,i.kt)("h2",{id:"using-your-client-to-update-the-network-state"},"Using your client to update the network state"),(0,i.kt)("p",null,"Now that you have a client, you can use it to update the state of the network on the connected server."),(0,i.kt)("h3",{id:"updating-current-network-state"},"Updating current network state"),(0,i.kt)("p",null,"The current state of the network can be updated using the ",(0,i.kt)("inlineCode",{parentName:"p"},"set_current_states")," function on the ",(0,i.kt)("inlineCode",{parentName:"p"},"UpdateNetworkStateClient"),". All events passed in the same list will\nbe executed as a batch."),(0,i.kt)("h4",{id:"updating-current-switch-state"},"Updating current switch state"),(0,i.kt)("p",null,"The current state of switches can be updating by passing a ",(0,i.kt)("inlineCode",{parentName:"p"},"SwitchStateEvent")," to the ",(0,i.kt)("inlineCode",{parentName:"p"},"set_current_states")," function."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-python"},'from datetime import datetime\n\nfrom zepben.evolve import SwitchStateEvent, SwitchAction\n\nevent1 = SwitchStateEvent("event1", datetime.now(), "switch_id_1", SwitchAction.OPEN)\nevent2 = SwitchStateEvent("event2", datetime.now(), "switch_id_2", SwitchAction.CLOSE)\nresponse = client.set_current_states(1, (event1, event2))\n')),(0,i.kt)("h4",{id:"adding-cuts"},"Adding cuts"),(0,i.kt)("p",null,"You can cut an AcLineSegment in the current state of the network by passing an ",(0,i.kt)("inlineCode",{parentName:"p"},"AddCutEvent")," to the ",(0,i.kt)("inlineCode",{parentName:"p"},"set_current_states")," function."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-python"},'from datetime import datetime\n\nfrom zepben.evolve import AddCutEvent\n\nevent1 = AddCutEvent("event1", datetime.now(), "cut_id", "acls_id")\nresponse = client.set_current_states(1, (event1))\n')),(0,i.kt)("h4",{id:"removing-cuts"},"Removing cuts"),(0,i.kt)("p",null,"You can remove a previously added cut from the current state of the network by passing a ",(0,i.kt)("inlineCode",{parentName:"p"},"RemoveCutEvent")," to the ",(0,i.kt)("inlineCode",{parentName:"p"},"set_current_states")," function."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-python"},'from datetime import datetime\n\nfrom zepben.evolve import RemoveCutEvent\n\nevent1 = RemoveCutEvent("event1", datetime.now(), "cut_id")\nresponse = client.set_current_states(1, (event1))\n')),(0,i.kt)("h4",{id:"adding-jumpers"},"Adding jumpers"),(0,i.kt)("p",null,"You can add a jumper between two other pieces of equipment in the current state of the network by passing an ",(0,i.kt)("inlineCode",{parentName:"p"},"AddJumperEvent")," to the ",(0,i.kt)("inlineCode",{parentName:"p"},"set_current_states")," function."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-python"},'from datetime import datetime\n\nfrom zepben.evolve import AddJumperEvent, JumperConnection\n\nevent1 = AddJumperEvent("event1", datetime.now(), "jumper_id", JumperConnection("from_id", JumperConnection("to_id")))\nresponse = client.set_current_states(1, (event1))\n')),(0,i.kt)("h4",{id:"removing-jumpers"},"Removing jumpers"),(0,i.kt)("p",null,"You can remove a previously added jumper from the current state of the network by passing a ",(0,i.kt)("inlineCode",{parentName:"p"},"RemoveJumperEvent")," to the ",(0,i.kt)("inlineCode",{parentName:"p"},"set_current_states")," function."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-python"},'from datetime import datetime\n\nfrom zepben.evolve import RemoveJumperEvent\n\nevent1 = RemoveJumperEvent("event1", datetime.now(), "jumper_id")\nresponse = client.set_current_states(1, (event1))\n')),(0,i.kt)("h4",{id:"multiple-requests"},"Multiple Requests"),(0,i.kt)("p",null,"If you have multiple batches to send, you can use ",(0,i.kt)("inlineCode",{parentName:"p"},"set_current_states_in_batches")," rather than calling ",(0,i.kt)("inlineCode",{parentName:"p"},"set_current_states")," multiple times"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-python"},'from datetime import datetime\n\nfrom zepben.evolve import SwitchStateEvent, SwitchAction\n\nevent1 = SwitchStateEvent("event1", datetime.now(), "switch_id_1", SwitchAction.OPEN)\nevent2 = SwitchStateEvent("event2", datetime.now(), "switch_id_2", SwitchAction.CLOSE)\n\nasync def events_in_batches():\n    yield UpdateNetworkStateClient.SetCurrentStatesRequest(1, (event1,))\n    yield UpdateNetworkStateClient.SetCurrentStatesRequest(2, (event2,))\n\nasync for response in client.set_current_states_in_batches(events_in_batches()):\n    # Process your responses here. You will get a response per batch.\n')),(0,i.kt)("h3",{id:"batch-result-responses"},"Batch result responses"),(0,i.kt)("p",null,"Each batch will receive its own response, which will be one of the following:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"BatchSuccessful")," - Indicates that all events in the batch were processed successfully. Events that are ignored because they set the state to one that is\nalready present, or are skipped due to a later event applying the opposite action, will be marked as successful."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"ProcessingPaused")," - Indicates the entire batch was ignore as current state processing in teh server is currently paused. The response will include the time\nthe server was paused."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"BatchFailure")," - Indicates at least one event in the batch could not be applied. Each event that failed will indicate why it failed, some of which will have\nmore impact than others.",(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"StateEventUnknownMrid")," - The ",(0,i.kt)("inlineCode",{parentName:"li"},"mRID")," of the event could not be found in the network hosted by this server."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"StateEventDuplicateMrid")," - The ",(0,i.kt)("inlineCode",{parentName:"li"},"mRID")," of an item being added to the network is already in use."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"StateEventInvalidMrid")," - The ",(0,i.kt)("inlineCode",{parentName:"li"},"mRID")," of the item being addressed in the event is of a different type than expected. e.g. You can't remove a ",(0,i.kt)("inlineCode",{parentName:"li"},"Jumper")," with an\n",(0,i.kt)("inlineCode",{parentName:"li"},"mRID")," that belongs to a ",(0,i.kt)("inlineCode",{parentName:"li"},"Cut"),"."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"StateEventUnsupportedPhasing")," - You tried to specify phases that do not make sense to the item being updated. When using the default phasing of ",(0,i.kt)("inlineCode",{parentName:"li"},"NONE")," you\nwill never receive this error. Until un-ganged switching is supported, this error will be returned for all events that specify phases.")))),(0,i.kt)("p",null,"You can check the type of response or failure by checking against the types above."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-python"},"from zepben.evolve import BatchFailure, StateEventUnknownMrid\n\nif isinstance(response, BatchFailure):\n    response.partial_failure # Will be true if all event failed, otherwise false.\n    for failure in response.failures:\n        if isinstance(failure, StateEventUnknownMrid):\n            # Process failure\n")))}h.isMDXComponent=!0}}]);