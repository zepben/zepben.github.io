"use strict";(self.webpackChunkevolve_sdk_python_doco=self.webpackChunkevolve_sdk_python_doco||[]).push([[1814],{3905:function(e,n,t){t.d(n,{Zo:function(){return d},kt:function(){return p}});var r=t(67294);function a(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function o(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function i(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?o(Object(t),!0).forEach((function(n){a(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):o(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function s(e,n){if(null==e)return{};var t,r,a=function(e,n){if(null==e)return{};var t,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)t=o[r],n.indexOf(t)>=0||(a[t]=e[t]);return a}(e,n);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)t=o[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(a[t]=e[t])}return a}var c=r.createContext({}),l=function(e){var n=r.useContext(c),t=n;return e&&(t="function"==typeof e?e(n):i(i({},n),e)),t},d=function(e){var n=l(e.components);return r.createElement(c.Provider,{value:n},e.children)},m="mdxType",_={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},u=r.forwardRef((function(e,n){var t=e.components,a=e.mdxType,o=e.originalType,c=e.parentName,d=s(e,["components","mdxType","originalType","parentName"]),m=l(t),u=a,p=m["".concat(c,".").concat(u)]||m[u]||_[u]||o;return t?r.createElement(p,i(i({ref:n},d),{},{components:t})):r.createElement(p,i({ref:n},d))}));function p(e,n){var t=arguments,a=n&&n.mdxType;if("string"==typeof e||a){var o=t.length,i=new Array(o);i[0]=u;var s={};for(var c in n)hasOwnProperty.call(n,c)&&(s[c]=n[c]);s.originalType=e,s[m]="string"==typeof e?e:a,i[1]=s;for(var l=2;l<o;l++)i[l]=t[l];return r.createElement.apply(null,i)}return r.createElement.apply(null,t)}u.displayName="MDXCreateElement"},24082:function(e,n,t){t.r(n),t.d(n,{assets:function(){return d},contentTitle:function(){return c},default:function(){return p},frontMatter:function(){return s},metadata:function(){return l},toc:function(){return m}});var r=t(87462),a=t(63366),o=(t(67294),t(3905)),i=["components"],s={id:"sdk-protection",title:"Protection Relays"},c=void 0,l={unversionedId:"sdk-protection",id:"version-0.40.0/sdk-protection",title:"Protection Relays",description:"Protection Relay Functions, Schemes, and Systems",source:"@site/versioned_docs/version-0.40.0/protection.mdx",sourceDirName:".",slug:"/sdk-protection",permalink:"/evolve/docs/python-sdk/0.40.0/sdk-protection",draft:!1,tags:[],version:"0.40.0",frontMatter:{id:"sdk-protection",title:"Protection Relays"},sidebar:"someSidebar",previous:{title:"Requesting Models",permalink:"/evolve/docs/python-sdk/0.40.0/sdk-consumer"},next:{title:"EWB Database Paths",permalink:"/evolve/docs/python-sdk/0.40.0/sdk-ewb-file-paths"}},d={},m=[{value:"Protection Relay Functions, Schemes, and Systems",id:"protection-relay-functions-schemes-and-systems",level:2},{value:"Grounds and Ground Disconnectors",id:"grounds-and-ground-disconnectors",level:2},{value:"Series Compensators",id:"series-compensators",level:2}],_={toc:m},u="wrapper";function p(e){var n=e.components,t=(0,a.Z)(e,i);return(0,o.kt)(u,(0,r.Z)({},_,t,{components:n,mdxType:"MDXLayout"}),(0,o.kt)("h2",{id:"protection-relay-functions-schemes-and-systems"},"Protection Relay Functions, Schemes, and Systems"),(0,o.kt)("p",null,"Each protection relay in the CIM model is implemented in a ",(0,o.kt)("inlineCode",{parentName:"p"},"ProtectionRelayFunction"),", which is composed of a collection of ",(0,o.kt)("inlineCode",{parentName:"p"},"Sensor"),"s, thresholds that determine\nthe conditions that activate the relay, the time limits for each condition before activation, and the ",(0,o.kt)("inlineCode",{parentName:"p"},"ProtectedSwitch"),"es to open when the relay is activated."),(0,o.kt)("p",null,(0,o.kt)("inlineCode",{parentName:"p"},"ProtectionRelayFunction"),"s may be grouped into ",(0,o.kt)("inlineCode",{parentName:"p"},"ProtectionRelayScheme"),"s, each of which belong to a ",(0,o.kt)("inlineCode",{parentName:"p"},"ProtectionRelaySystem"),". A ",(0,o.kt)("inlineCode",{parentName:"p"},"ProtectionRelaySystem")," is a\nphysical piece of equipment containing a suite of ",(0,o.kt)("inlineCode",{parentName:"p"},"ProtectionRelayFunction"),"s, such as a circuit breaker panel. They typically comprise two schemes: main and\nfailsafe."),(0,o.kt)("p",null,"Here is a contrived example of such a system modelled using the Evolve SDK:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},'from zepben.evolve import Breaker, CurrentTransformer, CurrentRelay, RelaySetting, UnitSymbol, ProtectionRelayScheme, ProtectionRelaySystem\n\n\ndef main():\n    # Breakers for stove, bathroom, and washer are for individual outlets,\n    # whereas the failsafe breaker can disconnect all appliances from power.\n    stove_breaker = Breaker("stoveBreaker")\n    bathroom_breaker = Breaker("bathroomBreaker")\n    washer_breaker = Breaker("washerBreaker")\n    failsafe_breaker = Breaker("failsafeBreaker")\n\n    stove_ct = CurrentTransformer("stoveCT")\n    bathroom_ct = CurrentTransformer("bathroomCT")\n    washer_ct = CurrentTransformer("washerCT")\n    failsafe_ct = CurrentTransformer("failsafeCT")\n\n    stove_cr = (CurrentRelay("stoveCR")\n                .add_protected_switch(stove_breaker)\n                .add_sensor(stove_ct)\n                .add_threshold(RelaySetting(UnitSymbol.A, 50.0))\n                .add_time_limit(0.5))\n    stove_breaker.add_relay_function(stove_cr)\n    stove_ct.add_relay_function(stove_cr)\n\n    bathroom_cr = (CurrentRelay("bathroomCR")\n                   .add_protected_switch(bathroom_breaker)\n                   .add_sensor(bathroom_ct)\n                   .add_threshold(RelaySetting(UnitSymbol.A, 50.0))\n                   .add_time_limit(0.5))\n    bathroom_breaker.add_relay_function(bathroom_cr)\n    bathroom_ct.add_relay_function(bathroom_cr)\n\n    washer_cr = (CurrentRelay("washerCR")\n                 .add_protected_switch(washer_breaker)\n                 .add_sensor(washer_ct)\n                 .add_threshold(RelaySetting(UnitSymbol.A, 50.0))\n                 .add_time_limit(0.5))\n    washer_breaker.add_relay_function(washer_cr)\n    washer_ct.add_relay_function(washer_cr)\n\n    failsafe_cr = (CurrentRelay("failsafeCR")\n                   .add_protected_switch(failsafe_breaker)\n                   .add_sensor(failsafe_ct)\n                   .add_threshold(RelaySetting(UnitSymbol.A, 50.0))\n                   .add_time_limit(0.5))\n    failsafe_breaker.add_relay_function(failsafe_cr)\n    failsafe_ct.add_relay_function(failsafe_cr)\n\n    main_scheme = (ProtectionRelayScheme("main")\n                   .add_function(stove_cr)\n                   .add_function(bathroom_cr)\n                   .add_function(washer_cr))\n    stove_cr.add_scheme(main_scheme)\n    bathroom_cr.add_scheme(main_scheme)\n    washer_cr.add_scheme(main_scheme)\n\n    failsafe_scheme = (ProtectionRelayScheme("failsafe")\n                       .add_function(failsafe_cr))\n\n    failsafe_cr.add_scheme(failsafe_scheme)\n\n    system = (ProtectionRelaySystem("system")\n              .add_scheme(main_scheme)\n              .add_scheme(failsafe_scheme))\n    main_scheme.system = system\n    failsafe_scheme.system = system\n')),(0,o.kt)("p",null,"For brevity, this example excludes modelling of connectivity between the sensors and breakers."),(0,o.kt)("h2",{id:"grounds-and-ground-disconnectors"},"Grounds and Ground Disconnectors"),(0,o.kt)("p",null,"To aid in modelling protection systems, our network data model also supports explicit modelling of grounds and ground disconnectors:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},'from zepben.evolve import NetworkService, Terminal, Ground, GroundDisconnector, Junction\n\n\ndef main():\n    # junction --- ground disconnector --- ground\n    network_service = NetworkService()\n\n    ground_terminal = Terminal("ground-t1")\n    ground = (Ground("ground")\n              .add_terminal(ground_terminal))\n\n    gd_terminal1 = Terminal("gd-t1")\n    gd_terminal2 = Terminal("gd-t2")\n    gd = (GroundDisconnector("gd")\n          .add_terminal(gd_terminal1)\n          .add_terminal(gd_terminal2))\n\n    junction_terminal = Terminal("junction-t1")\n    junction = (Junction("junction")\n                .add_terminal(junction_terminal))\n\n    network_service.connect_terminals(junction_terminal, gd_terminal1)\n    network_service.connect_terminals(gd_terminal2, ground_terminal)\n    for io in [ground, ground_terminal, gd, gd_terminal1, gd_terminal2, junction, junction_terminal]:\n        network_service.add(io)\n')),(0,o.kt)("h2",{id:"series-compensators"},"Series Compensators"),(0,o.kt)("p",null,"The Evolve SDK also supports modelling series compensators, which are series capacitors and reactors or an AC transmission line without charging susceptance."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},'from zepben.evolve import NetworkService, Terminal, AcLineSegment, SeriesCompensator\n\n\ndef main():\n    # AC line 1 --- series compensator -- AC line 2\n    network_service = NetworkService()\n\n    acls1_terminal1 = Terminal("acls1-t1")\n    acls1_terminal2 = Terminal("acls1-t2")\n    acls1 = (AcLineSegment("acls1")\n             .add_terminal(acls1_terminal1)\n             .add_terminal(acls1_terminal2))\n\n    acls2_terminal1 = Terminal("acls2-t1")\n    acls2_terminal2 = Terminal("acls2-t2")\n    acls2 = (AcLineSegment("acls2")\n             .add_terminal(acls2_terminal1)\n             .add_terminal(acls2_terminal2))\n\n    sc_terminal1 = Terminal("sc-t1")\n    sc_terminal2 = Terminal("sc-t2")\n    sc = SeriesCompensator("sc")\n    # dummy (likely unrealistic) values\n    sc.r = 1.0\n    sc.r0 = 1.5\n    sc.x = 123.0\n    sc.x0 = 125.0\n    sc.varistor_voltage_threshold = 10\n    sc.varistor_rated_current = 5\n    sc.add_terminal(sc_terminal1)\n    sc.add_terminal(sc_terminal2)\n\n    network_service.connect_terminals(acls1_terminal2, sc_terminal1)\n    network_service.connect_terminals(sc_terminal2, acls2_terminal1)\n\n    for io in [acls1, acls1_terminal1, acls1_terminal2, acls2, acls2_terminal1, acls2_terminal2, sc, sc_terminal1, sc_terminal2]:\n        network_service.add(io)\n')))}p.isMDXComponent=!0}}]);