"use strict";(self.webpackChunkevolve_sdk_python_doco=self.webpackChunkevolve_sdk_python_doco||[]).push([[4231],{3905:function(e,t,n){n.d(t,{Zo:function(){return p},kt:function(){return m}});var r=n(67294);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function c(e,t){if(null==e)return{};var n,r,o=function(e,t){if(null==e)return{};var n,r,o={},a=Object.keys(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var s=r.createContext({}),l=function(e){var t=r.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},p=function(e){var t=l(e.components);return r.createElement(s.Provider,{value:t},e.children)},u="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},v=r.forwardRef((function(e,t){var n=e.components,o=e.mdxType,a=e.originalType,s=e.parentName,p=c(e,["components","mdxType","originalType","parentName"]),u=l(n),v=o,m=u["".concat(s,".").concat(v)]||u[v]||d[v]||a;return n?r.createElement(m,i(i({ref:t},p),{},{components:n})):r.createElement(m,i({ref:t},p))}));function m(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var a=n.length,i=new Array(a);i[0]=v;var c={};for(var s in t)hasOwnProperty.call(t,s)&&(c[s]=t[s]);c.originalType=e,c[u]="string"==typeof e?e:o,i[1]=c;for(var l=2;l<a;l++)i[l]=n[l];return r.createElement.apply(null,i)}return r.createElement.apply(null,n)}v.displayName="MDXCreateElement"},85162:function(e,t,n){n(67294)},65488:function(e,t,n){n(67294),n(72389)},7374:function(e,t,n){n.r(t),n.d(t,{assets:function(){return p},contentTitle:function(){return s},default:function(){return m},frontMatter:function(){return c},metadata:function(){return l},toc:function(){return u}});var r=n(87462),o=n(63366),a=(n(67294),n(3905)),i=(n(65488),n(85162),["components"]),c={id:"sdk-persistence",title:"Persisting Models"},s=void 0,l={unversionedId:"sdk-persistence",id:"sdk-persistence",title:"Persisting Models",description:"Evolve data service",source:"@site/docs/persistence.mdx",sourceDirName:".",slug:"/sdk-persistence",permalink:"/evolve/docs/python-sdk/next/sdk-persistence",draft:!1,tags:[],version:"current",frontMatter:{id:"sdk-persistence",title:"Persisting Models"},sidebar:"someSidebar",previous:{title:"Tracing",permalink:"/evolve/docs/python-sdk/next/sdk-tracing"},next:{title:"Requesting Models",permalink:"/evolve/docs/python-sdk/next/sdk-consumer"}},p={},u=[{value:"Evolve data service",id:"evolve-data-service",level:2}],d={toc:u},v="wrapper";function m(e){var t=e.components,n=(0,o.Z)(e,i);return(0,a.kt)(v,(0,r.Z)({},d,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h2",{id:"evolve-data-service"},"Evolve data service"),(0,a.kt)("admonition",{type:"warning"},(0,a.kt)("p",{parentName:"admonition"},"The API for persisting data to a remote server is currently in alpha and very likely to experience breaking changes\nin the future. Please provide any feedback about this API to ",(0,a.kt)("a",{parentName:"p",href:"http://www.zepben.com"},"Zepben"),".")),(0,a.kt)("p",null,"The SDK provides a client to send models to a remote data server via ",(0,a.kt)("a",{parentName:"p",href:"http://grpc.io/"},"gRPC"),". The service and proto\ndefinitions for this API can be found ",(0,a.kt)("a",{parentName:"p",href:"http://github.com/zepben/evolve-grpc"},"here"),". An implementation of the server for\nthe services is provided with the Evolve platform data services."),(0,a.kt)("p",null,"Here is an example of how to connect to and send a model to the evolve data server:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-python"},'from zepben.evolve import connect_async, connect, ProducerClient, NetworkService, CustomerService, DiagramService\n\nasync with connect_async(host="localhost", rpc_port=50051) as channel:\n    client = ProducerClient(channel)\n\n    network_service = NetworkService()\n    customer_service = CustomerService()\n    diagram_service = DiagramService()\n    populate_network_objects(network_service)\n\n    await client.send([network_service, customer_service, diagram_service])\n\n# Or using the synchronous API:\nwith connect(host="localhost", rpc_port=50051) as channel:\n    client = ProducerClient(channel)\n\n    network_service = NetworkService()\n    customer_service = CustomerService()\n    diagram_service = DiagramService()\n    populate_network_objects(network_service)\n\n    client.send([network_service, customer_service, diagram_service])\n')),(0,a.kt)("p",null,"The ",(0,a.kt)("inlineCode",{parentName:"p"},"ProducerClient")," is an abstraction layer that allows sending all services at once (useful for a server that exposes\nmore than one service), however typically you'll want to use a dedicated service for the data you are working with.\nFor these cases there are the following classes:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"NetworkProducerClient")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"CustomerProducerClient")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"DiagramProducerClient"))),(0,a.kt)("p",null,"These classes expose a similar API to ",(0,a.kt)("inlineCode",{parentName:"p"},"ProducerClient"),", however accepting a single service of the named type rather than a list.\nFor example:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-python"},'from zepben.evolve import connect_async, NetworkService, CustomerService, DiagramService, NetworkProducerClient, CustomerProducerClient, DiagramProducerClient\n\nasync with connect_async(host="localhost", rpc_port=50051) as channel:\n    network_client = NetworkProducerClient(channel)\n\n    network_service = NetworkService()\n    populate_network_objects(network_service)\n\n    await client.send([network_service, customer_service, diagram_service])\n\nasync with connect_async(host="localhost", rpc_port=50052) as channel:\n    customer_client = CustomerProducerClient(channel)\n\n    customer_service = CustomerService()\n    populate_customer_objects(customer_service)\n\n    await client.send(customer_service)\n\nasync with connect_async(host="localhost", rpc_port=50052) as channel:\n    diagram_client = DiagramProducerClient(channel)\n\n    diagram_service = DiagramService()\n    populate_diagram_objects(diagram_service)\n\n    await client.send(diagram_service)\n')))}m.isMDXComponent=!0}}]);