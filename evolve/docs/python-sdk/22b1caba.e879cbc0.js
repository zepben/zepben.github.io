(window.webpackJsonp=window.webpackJsonp||[]).push([[5],{64:function(e,t,n){"use strict";n.r(t),n.d(t,"frontMatter",(function(){return i})),n.d(t,"metadata",(function(){return o})),n.d(t,"rightToc",(function(){return s})),n.d(t,"default",(function(){return d}));var r=n(2),a=n(6),c=(n(0),n(79)),i=(n(83),n(84),{id:"sdk-persistence",title:"Persisting Models"}),o={unversionedId:"sdk-persistence",id:"sdk-persistence",isDocsHomePage:!1,title:"Persisting Models",description:"Evolve data service",source:"@site/docs/persistence.mdx",slug:"/sdk-persistence",permalink:"/evolve/docs/python-sdk/sdk-persistence",editUrl:"https://github.com/zepben/docs/persistence.mdx",version:"current",sidebar:"someSidebar",previous:{title:"Tracing",permalink:"/evolve/docs/python-sdk/sdk-tracing"},next:{title:"Requesting Models",permalink:"/evolve/docs/python-sdk/sdk-consumer"}},s=[{value:"Evolve data service",id:"evolve-data-service",children:[]}],l={rightToc:s};function d(e){var t=e.components,n=Object(a.a)(e,["components"]);return Object(c.b)("wrapper",Object(r.a)({},l,n,{components:t,mdxType:"MDXLayout"}),Object(c.b)("h2",{id:"evolve-data-service"},"Evolve data service"),Object(c.b)("div",{className:"admonition admonition-warning alert alert--danger"},Object(c.b)("div",Object(r.a)({parentName:"div"},{className:"admonition-heading"}),Object(c.b)("h5",{parentName:"div"},Object(c.b)("span",Object(r.a)({parentName:"h5"},{className:"admonition-icon"}),Object(c.b)("svg",Object(r.a)({parentName:"span"},{xmlns:"http://www.w3.org/2000/svg",width:"12",height:"16",viewBox:"0 0 12 16"}),Object(c.b)("path",Object(r.a)({parentName:"svg"},{fillRule:"evenodd",d:"M5.05.31c.81 2.17.41 3.38-.52 4.31C3.55 5.67 1.98 6.45.9 7.98c-1.45 2.05-1.7 6.53 3.53 7.7-2.2-1.16-2.67-4.52-.3-6.61-.61 2.03.53 3.33 1.94 2.86 1.39-.47 2.3.53 2.27 1.67-.02.78-.31 1.44-1.13 1.81 3.42-.59 4.78-3.42 4.78-5.56 0-2.84-2.53-3.22-1.25-5.61-1.52.13-2.03 1.13-1.89 2.75.09 1.08-1.02 1.8-1.86 1.33-.67-.41-.66-1.19-.06-1.78C8.18 5.31 8.68 2.45 5.05.32L5.03.3l.02.01z"})))),"warning")),Object(c.b)("div",Object(r.a)({parentName:"div"},{className:"admonition-content"}),Object(c.b)("p",{parentName:"div"},"The API for persisting data to a remote server is currently in alpha and very likely to experience breaking changes\nin the future. Please provide any feedback about this API to ",Object(c.b)("a",Object(r.a)({parentName:"p"},{href:"http://www.zepben.com"}),"Zepben"),"."))),Object(c.b)("p",null,"The SDK provides a client to send models to a remote data server via ",Object(c.b)("a",Object(r.a)({parentName:"p"},{href:"http://grpc.io/"}),"gRPC"),". The service and proto\ndefinitions for this API can be found ",Object(c.b)("a",Object(r.a)({parentName:"p"},{href:"http://github.com/zepben/evolve-grpc"}),"here"),". An implementation of the server for\nthe services is provided with the Evolve platform data services."),Object(c.b)("p",null,"Here is an example of how to connect to and send a model to the evolve data server:"),Object(c.b)("pre",null,Object(c.b)("code",Object(r.a)({parentName:"pre"},{className:"language-python"}),'from zepben.evolve import connect_async, connect, ProducerClient, NetworkService, CustomerService, DiagramService\n\nasync with connect_async(host="localhost", rpc_port=50051) as channel:\n    client = ProducerClient(channel)\n\n    network_service = NetworkService()\n    customer_service = CustomerService()\n    diagram_service = DiagramService()\n    populate_network_objects(network_service)\n\n    await client.send([network_service, customer_service, diagram_service])\n\n# Or using the synchronous API:\nwith connect(host="localhost", rpc_port=50051) as channel:\n    client = ProducerClient(channel)\n\n    network_service = NetworkService()\n    customer_service = CustomerService()\n    diagram_service = DiagramService()\n    populate_network_objects(network_service)\n\n    client.send([network_service, customer_service, diagram_service])\n')),Object(c.b)("p",null,"The ",Object(c.b)("inlineCode",{parentName:"p"},"ProducerClient")," is an abstraction layer that allows sending all services at once (useful for a server that exposes\nmore than one service), however typically you'll want to use a dedicated service for the data you are working with.\nFor these cases there are the following classes:"),Object(c.b)("ul",null,Object(c.b)("li",{parentName:"ul"},Object(c.b)("inlineCode",{parentName:"li"},"NetworkProducerClient")),Object(c.b)("li",{parentName:"ul"},Object(c.b)("inlineCode",{parentName:"li"},"CustomerProducerClient")),Object(c.b)("li",{parentName:"ul"},Object(c.b)("inlineCode",{parentName:"li"},"DiagramProducerClient"))),Object(c.b)("p",null,"These classes expose a similar API to ",Object(c.b)("inlineCode",{parentName:"p"},"ProducerClient"),", however accepting a single service of the named type rather than a list.\nFor example:"),Object(c.b)("pre",null,Object(c.b)("code",Object(r.a)({parentName:"pre"},{className:"language-python"}),'from zepben.evolve import connect_async, NetworkService, CustomerService, DiagramService, NetworkProducerClient, CustomerProducerClient, DiagramProducerClient\n\nasync with connect_async(host="localhost", rpc_port=50051) as channel:\n    network_client = NetworkProducerClient(channel)\n\n    network_service = NetworkService()\n    populate_network_objects(network_service)\n\n    await client.send([network_service, customer_service, diagram_service])\n\nasync with connect_async(host="localhost", rpc_port=50052) as channel:\n    customer_client = CustomerProducerClient(channel)\n\n    customer_service = CustomerService()\n    populate_customer_objects(customer_service)\n\n    await client.send(customer_service)\n\nasync with connect_async(host="localhost", rpc_port=50052) as channel:\n    diagram_client = DiagramProducerClient(channel)\n\n    diagram_service = DiagramService()\n    populate_diagram_objects(diagram_service)\n\n    await client.send(diagram_service)\n')))}d.isMDXComponent=!0}}]);