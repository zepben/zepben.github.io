"use strict";(self.webpackChunkewb_sdk_examples_python_doco=self.webpackChunkewb_sdk_examples_python_doco||[]).push([[217],{3905:(e,t,n)=>{n.d(t,{Zo:()=>l,kt:()=>h});var r=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function s(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var c=r.createContext({}),p=function(e){var t=r.useContext(c),n=t;return e&&(n="function"==typeof e?e(t):s(s({},t),e)),n},l=function(e){var t=p(e.components);return r.createElement(c.Provider,{value:t},e.children)},m="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},u=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,o=e.originalType,c=e.parentName,l=i(e,["components","mdxType","originalType","parentName"]),m=p(n),u=a,h=m["".concat(c,".").concat(u)]||m[u]||d[u]||o;return n?r.createElement(h,s(s({ref:t},l),{},{components:n})):r.createElement(h,s({ref:t},l))}));function h(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=n.length,s=new Array(o);s[0]=u;var i={};for(var c in t)hasOwnProperty.call(t,c)&&(i[c]=t[c]);i.originalType=e,i[m]="string"==typeof e?e:a,s[1]=i;for(var p=2;p<o;p++)s[p]=n[p];return r.createElement.apply(null,s)}return r.createElement.apply(null,n)}u.displayName="MDXCreateElement"},5162:(e,t,n)=>{n(7294)},5488:(e,t,n)=>{n(7294),n(2389)},1971:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>c,contentTitle:()=>s,default:()=>d,frontMatter:()=>o,metadata:()=>i,toc:()=>p});var r=n(7462),a=(n(7294),n(3905));n(5488),n(5162);const o={id:"examples-downstream-and-upstream-trace",title:"Downstream and Upstream Tracing Use Cases"},s=void 0,i={unversionedId:"examples-downstream-and-upstream-trace",id:"examples-downstream-and-upstream-trace",title:"Downstream and Upstream Tracing Use Cases",description:"In this example, we demonstrate the use cases for downstream and upstream tracing within a power network. Specifically, the code performs the following two tasks:",source:"@site/docs/downstream_and_upstream_trace_use_case.mdx",sourceDirName:".",slug:"/examples-downstream-and-upstream-trace",permalink:"/evolve/docs/ewb-sdk-examples-python/examples-downstream-and-upstream-trace",draft:!1,tags:[],version:"current",frontMatter:{id:"examples-downstream-and-upstream-trace",title:"Downstream and Upstream Tracing Use Cases"},sidebar:"someSidebar",previous:{title:"Creating and Uploading Studies",permalink:"/evolve/docs/ewb-sdk-examples-python/examples-creating-and-uploading-studies"}},c={},p=[{value:"Overview of the Code",id:"overview-of-the-code",level:2},{value:"Key Imports",id:"key-imports",level:2},{value:"Configuration",id:"configuration",level:2},{value:"Code Breakdown",id:"code-breakdown",level:2},{value:"Step 1: Connect to the EWB Server",id:"step-1-connect-to-the-ewb-server",level:3},{value:"Step 2: Fetch Feeder Network",id:"step-2-fetch-feeder-network",level:3},{value:"Step 3: Perform Downstream Trace",id:"step-3-perform-downstream-trace",level:3},{value:"Step 4: Perform Upstream Trace",id:"step-4-perform-upstream-trace",level:3},{value:"Step 5: Define Trace Actions",id:"step-5-define-trace-actions",level:3},{value:"Step 6: Run the Tracing Process",id:"step-6-run-the-tracing-process",level:3},{value:"Output",id:"output",level:2},{value:"Downstream Trace",id:"downstream-trace",level:3},{value:"Upstream trace",id:"upstream-trace",level:3}],l={toc:p},m="wrapper";function d(e){let{components:t,...o}=e;return(0,a.kt)(m,(0,r.Z)({},l,o,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("p",null,"In this example, we demonstrate the use cases for downstream and upstream tracing within a power network. Specifically, the code performs the following two tasks:"),(0,a.kt)("ol",null,(0,a.kt)("li",{parentName:"ol"},(0,a.kt)("strong",{parentName:"li"},"Downstream Trace"),": For each transformer, it counts the number of Energy Consumers (ECs) downstream of it. The downstream trace calculates how many Energy Consumers are connected downstream from each transformer, and this count is printed for each transformer."),(0,a.kt)("li",{parentName:"ol"},(0,a.kt)("strong",{parentName:"li"},"Upstream Trace"),": For each Energy Consumer, the code calculates the upstream length from the Energy Consumer to the feeder head. This upstream trace calculates the total length of the cables (in kilometers or meters) that lead upstream from each Energy Consumer.")),(0,a.kt)("h2",{id:"overview-of-the-code"},"Overview of the Code"),(0,a.kt)("p",null,"The code in this example connects to a Network Consumer Client, uses ",(0,a.kt)("inlineCode",{parentName:"p"},"normal_downstream_trace")," to trace downstream from each ",(0,a.kt)("inlineCode",{parentName:"p"},"PowerTransformer"),", and uses ",(0,a.kt)("inlineCode",{parentName:"p"},"normal_upstream_trace")," to trace upstream from each ",(0,a.kt)("inlineCode",{parentName:"p"},"EnergyConsumer"),". It fetches data for the specified feeder, processes the network objects (PowerTransformers and EnergyConsumers), and performs the respective traces."),(0,a.kt)("p",null,"The results are printed as follows:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},"Downstream Trace"),": For each ",(0,a.kt)("inlineCode",{parentName:"li"},"PowerTransformer"),", it prints the number of ",(0,a.kt)("inlineCode",{parentName:"li"},"EnergyConsumers")," downstream."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},"Upstream Trace"),": For each ",(0,a.kt)("inlineCode",{parentName:"li"},"EnergyConsumer"),", it prints the total length of the upstream cables to the feeder head.")),(0,a.kt)("h2",{id:"key-imports"},"Key Imports"),(0,a.kt)("p",null,"To run/test this example, ensure that you have installed the following libraries as they are used to interact with the Evolve API, perform network tracing, and work with the network equipment models."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-python"},"import asyncio\nimport json\nfrom zepben.evolve import NetworkConsumerClient, PhaseStep, PhaseCode, AcLineSegment, normal_downstream_trace, connect_with_token, EnergyConsumer, PowerTransformer, normal_upstream_trace\nfrom zepben.evolve.services.network.tracing.phases.phase_step import start_at\nfrom zepben.protobuf.nc.nc_requests_pb2 import IncludedEnergizedContainers\n")),(0,a.kt)("h2",{id:"configuration"},"Configuration"),(0,a.kt)("p",null,"The ",(0,a.kt)("inlineCode",{parentName:"p"},"config.json")," file contains the connection details for the server. It includes the server's host address, access token, and the RPC port. Ensure that you have replaced ",(0,a.kt)("inlineCode",{parentName:"p"},"your_server_host"),", ",(0,a.kt)("inlineCode",{parentName:"p"},"your_access_token"),", and ",(0,a.kt)("inlineCode",{parentName:"p"},"rpc_port")," with the specific details."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-json"},'{\n  "host": "your_server_host",\n  "access_token": "your_access_token",\n  "rpc_port": 1234\n}\n')),(0,a.kt)("h2",{id:"code-breakdown"},"Code Breakdown"),(0,a.kt)("h3",{id:"step-1-connect-to-the-ewb-server"},"Step 1: Connect to the EWB Server"),(0,a.kt)("p",null,"The code first loads the connection configuration from ",(0,a.kt)("inlineCode",{parentName:"p"},"config.json"),", then establishes a connection to the server using ",(0,a.kt)("inlineCode",{parentName:"p"},"connect_with_token"),":"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-python"},'channel = connect_with_token(host=c["host"], access_token=c["access_token"], rpc_port=c["rpc_port"])\n')),(0,a.kt)("p",null,"A ",(0,a.kt)("inlineCode",{parentName:"p"},"NetworkConsumerClient")," object is created, which will be used to interact with the network data."),(0,a.kt)("h3",{id:"step-2-fetch-feeder-network"},"Step 2: Fetch Feeder Network"),(0,a.kt)("p",null,"Once connected, the code retrieves the network hierarchy of the feeders using the ",(0,a.kt)("inlineCode",{parentName:"p"},"get_network_hierarchy")," method:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-python"},"result = (await client.get_network_hierarchy()).throw_on_error().result\n")),(0,a.kt)("p",null,"The network data for each feeder is processed and fetched through the ",(0,a.kt)("inlineCode",{parentName:"p"},"get_feeder_network")," function, which includes energized LV feeders."),(0,a.kt)("h3",{id:"step-3-perform-downstream-trace"},"Step 3: Perform Downstream Trace"),(0,a.kt)("p",null,"For each ",(0,a.kt)("inlineCode",{parentName:"p"},"PowerTransformer"),", the downstream trace is performed using ",(0,a.kt)("inlineCode",{parentName:"p"},"normal_downstream_trace"),". The ",(0,a.kt)("inlineCode",{parentName:"p"},"get_downstream_customer_count")," function is called for each ",(0,a.kt)("inlineCode",{parentName:"p"},"PowerTransformer")," to determine the number of ",(0,a.kt)("inlineCode",{parentName:"p"},"EnergyConsumers")," downstream:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-python"},'for io in network.objects(PowerTransformer):\n    customers = await get_downstream_customer_count(start_at(io, PhaseCode.ABCN))\n    print(f"Transformer {io.mrid} has {customers} Energy Consumer(s)")\n')),(0,a.kt)("p",null,"Here, ",(0,a.kt)("inlineCode",{parentName:"p"},"start_at(io, PhaseCode.ABCN)")," indicates that the trace starts from the ",(0,a.kt)("inlineCode",{parentName:"p"},"PowerTransformer")," ",(0,a.kt)("inlineCode",{parentName:"p"},"io"),", using the ",(0,a.kt)("inlineCode",{parentName:"p"},"ABCN")," phase configuration."),(0,a.kt)("h3",{id:"step-4-perform-upstream-trace"},"Step 4: Perform Upstream Trace"),(0,a.kt)("p",null,"For each ",(0,a.kt)("inlineCode",{parentName:"p"},"EnergyConsumer"),", the upstream trace is performed using ",(0,a.kt)("inlineCode",{parentName:"p"},"normal_upstream_trace"),". The ",(0,a.kt)("inlineCode",{parentName:"p"},"get_upstream_length")," function calculates the total upstream length for each ",(0,a.kt)("inlineCode",{parentName:"p"},"EnergyConsumer"),":"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-python"},'for ec in network.objects(EnergyConsumer):\n    upstream_length = await get_upstream_length(start_at(ec, PhaseCode.ABCN))\n    print(f"Energy Consumer {ec.mrid} --\x3e Upstream Length: {upstream_length}")\n')),(0,a.kt)("p",null,"The upstream length is calculated by adding up the length of each ",(0,a.kt)("inlineCode",{parentName:"p"},"AcLineSegment")," that leads upstream from the ",(0,a.kt)("inlineCode",{parentName:"p"},"EnergyConsumer")," until the feeder head is reached."),(0,a.kt)("h3",{id:"step-5-define-trace-actions"},"Step 5: Define Trace Actions"),(0,a.kt)("p",null,"The ",(0,a.kt)("inlineCode",{parentName:"p"},"get_downstream_customer_count")," and ",(0,a.kt)("inlineCode",{parentName:"p"},"get_upstream_length")," functions use trace action definitions to perform the downstream and upstream traces."),(0,a.kt)("p",null,"For downstream tracing:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-python"},"async def get_downstream_customer_count(ce: PhaseStep) -> int:\n    trace = normal_downstream_trace()\n    customer_count = 0\n\n    def collect_eq_in():\n        async def add_eq(ps, _):\n            nonlocal customer_count\n            if isinstance(ps.conducting_equipment, EnergyConsumer):\n                customer_count += 1\n        return add_eq\n\n    trace.add_step_action(collect_eq_in())\n    await trace.run(ce)\n    return customer_count\n")),(0,a.kt)("p",null,"For upstream tracing:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-python"},"async def get_upstream_length(ce: PhaseStep) -> int:\n    trace = normal_upstream_trace()\n    upstream_length = 0\n\n    def collect_eq_in():\n        async def add_eq(ps, _):\n            nonlocal upstream_length\n            if isinstance(ps.conducting_equipment, AcLineSegment):\n                if ps.conducting_equipment.length is not None:\n                    upstream_length = upstream_length + ps.conducting_equipment.length\n        return add_eq\n\n    trace.add_step_action(collect_eq_in())\n    await trace.run(ce)\n    return upstream_length\n")),(0,a.kt)("h3",{id:"step-6-run-the-tracing-process"},"Step 6: Run the Tracing Process"),(0,a.kt)("p",null,"Finally, the main function runs the process using ",(0,a.kt)("inlineCode",{parentName:"p"},"asyncio"),". It processes the specified feeder, performs downstream traces for ",(0,a.kt)("inlineCode",{parentName:"p"},"PowerTransformers"),", and upstream traces for ",(0,a.kt)("inlineCode",{parentName:"p"},"EnergyConsumers"),"."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-python"},'if __name__ == "__main__":\n    loop = asyncio.get_event_loop()\n    loop.run_until_complete(main())\n')),(0,a.kt)("h2",{id:"output"},"Output"),(0,a.kt)("h3",{id:"downstream-trace"},"Downstream Trace"),(0,a.kt)("p",null,"The following is a sample output for the downstream trace.\n",(0,a.kt)("img",{src:n(4285).Z,width:"1117",height:"211"})),(0,a.kt)("h3",{id:"upstream-trace"},"Upstream trace"),(0,a.kt)("p",null,"The following is a sample output for the upstream trace.\n",(0,a.kt)("img",{src:n(9003).Z,width:"1062",height:"287"})))}d.isMDXComponent=!0},4285:(e,t,n)=>{n.d(t,{Z:()=>r});const r=n.p+"assets/images/downstream-b678463307fc24a51eb46e5c7c6db2be.png"},9003:(e,t,n)=>{n.d(t,{Z:()=>r});const r=n.p+"assets/images/upstream-bf3e4086619bb27530f66d746b0c41db.png"}}]);