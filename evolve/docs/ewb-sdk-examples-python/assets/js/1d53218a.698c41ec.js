"use strict";(self.webpackChunkewb_sdk_examples_python_doco=self.webpackChunkewb_sdk_examples_python_doco||[]).push([[910],{3905:(e,t,n)=>{n.d(t,{Zo:()=>h,kt:()=>m});var r=n(7294);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function c(e,t){if(null==e)return{};var n,r,o=function(e,t){if(null==e)return{};var n,r,o={},a=Object.keys(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var l=r.createContext({}),s=function(e){var t=r.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},h=function(e){var t=s(e.components);return r.createElement(l.Provider,{value:t},e.children)},p="mdxType",u={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},d=r.forwardRef((function(e,t){var n=e.components,o=e.mdxType,a=e.originalType,l=e.parentName,h=c(e,["components","mdxType","originalType","parentName"]),p=s(n),d=o,m=p["".concat(l,".").concat(d)]||p[d]||u[d]||a;return n?r.createElement(m,i(i({ref:t},h),{},{components:n})):r.createElement(m,i({ref:t},h))}));function m(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var a=n.length,i=new Array(a);i[0]=d;var c={};for(var l in t)hasOwnProperty.call(t,l)&&(c[l]=t[l]);c.originalType=e,c[p]="string"==typeof e?e:o,i[1]=c;for(var s=2;s<a;s++)i[s]=n[s];return r.createElement.apply(null,i)}return r.createElement.apply(null,n)}d.displayName="MDXCreateElement"},4499:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>i,default:()=>u,frontMatter:()=>a,metadata:()=>c,toc:()=>s});var r=n(7462),o=(n(7294),n(3905));const a={id:"examples-fetching-network-hierarchy",title:"Fetching Network Hierarchy"},i=void 0,c={unversionedId:"examples-fetching-network-hierarchy",id:"examples-fetching-network-hierarchy",title:"Fetching Network Hierarchy",description:"This tutorial demonstrates how to use the SyncNetworkConsumerClient to connect to a gRPC service and fetch information about a network hierarchy from the EWB server.",source:"@site/docs/fetching_network_hierarchy.mdx",sourceDirName:".",slug:"/examples-fetching-network-hierarchy",permalink:"/evolve/docs/ewb-sdk-examples-python/examples-fetching-network-hierarchy",draft:!1,tags:[],version:"current",frontMatter:{id:"examples-fetching-network-hierarchy",title:"Fetching Network Hierarchy"},sidebar:"someSidebar",previous:{title:"Building a Network Hierarchy",permalink:"/evolve/docs/ewb-sdk-examples-python/examples-build-network-hierarchy"},next:{title:"Fetching Network Model",permalink:"/evolve/docs/ewb-sdk-examples-python/examples-fetching-network-model"}},l={},s=[{value:"Getting Started",id:"getting-started",level:2},{value:"Establish Connection",id:"establish-connection",level:2},{value:"Create a Consumer Client",id:"create-a-consumer-client",level:2},{value:"Fetch and Display Network Hierarchy",id:"fetch-and-display-network-hierarchy",level:2}],h={toc:s},p="wrapper";function u(e){let{components:t,...a}=e;return(0,o.kt)(p,(0,r.Z)({},h,a,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("p",null,"This tutorial demonstrates how to use the ",(0,o.kt)("inlineCode",{parentName:"p"},"SyncNetworkConsumerClient")," to connect to a gRPC service and fetch information about a network hierarchy from the EWB server.\nThe code is organized to demonstrate how to establish a connection, retrieve the network hierarchy, and print the information in a structured manner."),(0,o.kt)("h2",{id:"getting-started"},"Getting Started"),(0,o.kt)("p",null,"Ensure that you have imported necessary modules from the Zepben library."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},"from zepben.evolve import SyncNetworkConsumerClient, connect_insecure\n")),(0,o.kt)("h2",{id:"establish-connection"},"Establish Connection"),(0,o.kt)("p",null,"Ensure that you have connected to the EWB Server. In this example, the ",(0,o.kt)("inlineCode",{parentName:"p"},"connect_insecure")," function is used to connect to the EWB Server."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},'channel = connect_insecure(host="EWB Hostname", rpc_port=1234)\n')),(0,o.kt)("p",null,"You will need to replace the host and port with the appropriate values for your environment.\nMore information about connecting to the EWB Server using different methods can be found in the ",(0,o.kt)("a",{parentName:"p",href:"https://zepben.github.io/evolve/docs/python-sdk/next/sdk-consumer#connecting-to-a-server"},"Connecting to the EWB Server")," guide."),(0,o.kt)("h2",{id:"create-a-consumer-client"},"Create a Consumer Client"),(0,o.kt)("p",null,"After establishing the connection, create a ",(0,o.kt)("inlineCode",{parentName:"p"},"SyncNetworkConsumerClient")," using the provided channel."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},"client = SyncNetworkConsumerClient(channel=channel)\n")),(0,o.kt)("h2",{id:"fetch-and-display-network-hierarchy"},"Fetch and Display Network Hierarchy"),(0,o.kt)("p",null,"You can fetch the network hierarchy by calling the ",(0,o.kt)("inlineCode",{parentName:"p"},"get_network_hierarchy")," method on the ",(0,o.kt)("inlineCode",{parentName:"p"},"SyncNetworkConsumerClient")," instance.\nOnce you have fetched the network hierarchy, you can iterate through the hierarchical structure and print information about each level (that is the geographical regions, sub-geographical regions, substations, and feeders).\nIn this example, indentation is used to help represent the hierarchical relationships clearly."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},'network_hierarchy = client.get_network_hierarchy()\nprint("Network hierarchy:")\nfor gr in network_hierarchy.result.geographical_regions.values():\nprint(f"- {gr.name}")\nfor sgr in gr.sub_geographical_regions:\n    print(f"  - {sgr.name}")\n    for sub in sgr.substations:\n        print(f"    - {sub.name}")\n        for fdr in sub.feeders:\n            print(f"      - {fdr.name}")\n')),(0,o.kt)("p",null,"Sample Output:"),(0,o.kt)("p",null,(0,o.kt)("img",{src:n(7415).Z,width:"1281",height:"687"})))}u.isMDXComponent=!0},7415:(e,t,n)=>{n.d(t,{Z:()=>r});const r=n.p+"assets/images/fetch_network_hierarchy_ex1-8b345218388b84e482f8961f99110449.png"}}]);