"use strict";(self.webpackChunkewb_sdk_examples_python_doco=self.webpackChunkewb_sdk_examples_python_doco||[]).push([[27],{3905:(e,t,n)=>{n.d(t,{Zo:()=>h,kt:()=>m});var r=n(7294);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function c(e,t){if(null==e)return{};var n,r,o=function(e,t){if(null==e)return{};var n,r,o={},a=Object.keys(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var s=r.createContext({}),l=function(e){var t=r.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},h=function(e){var t=l(e.components);return r.createElement(s.Provider,{value:t},e.children)},p="mdxType",u={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},d=r.forwardRef((function(e,t){var n=e.components,o=e.mdxType,a=e.originalType,s=e.parentName,h=c(e,["components","mdxType","originalType","parentName"]),p=l(n),d=o,m=p["".concat(s,".").concat(d)]||p[d]||u[d]||a;return n?r.createElement(m,i(i({ref:t},h),{},{components:n})):r.createElement(m,i({ref:t},h))}));function m(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var a=n.length,i=new Array(a);i[0]=d;var c={};for(var s in t)hasOwnProperty.call(t,s)&&(c[s]=t[s]);c.originalType=e,c[p]="string"==typeof e?e:o,i[1]=c;for(var l=2;l<a;l++)i[l]=n[l];return r.createElement.apply(null,i)}return r.createElement.apply(null,n)}d.displayName="MDXCreateElement"},5162:(e,t,n)=>{n(7294)},5488:(e,t,n)=>{n(7294),n(2389)},3514:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>i,default:()=>u,frontMatter:()=>a,metadata:()=>c,toc:()=>l});var r=n(7462),o=(n(7294),n(3905));n(5488),n(5162);const a={id:"examples-fetching-network-hierarchy",title:"Fetching Network Hierarchy"},i=void 0,c={unversionedId:"examples-fetching-network-hierarchy",id:"version-0.2.0/examples-fetching-network-hierarchy",title:"Fetching Network Hierarchy",description:"This tutorial demonstrates how to use the NetworkConsumerClient to connect to a gRPC service and fetch information about a network hierarchy from the EWB server.",source:"@site/versioned_docs/version-0.2.0/fetching_network_hierarchy.mdx",sourceDirName:".",slug:"/examples-fetching-network-hierarchy",permalink:"/evolve/docs/ewb-sdk-examples-python/0.2.0/examples-fetching-network-hierarchy",draft:!1,tags:[],version:"0.2.0",frontMatter:{id:"examples-fetching-network-hierarchy",title:"Fetching Network Hierarchy"},sidebar:"someSidebar",previous:{title:"Building a Network Hierarchy",permalink:"/evolve/docs/ewb-sdk-examples-python/0.2.0/examples-build-network-hierarchy"},next:{title:"Fetching Network Model",permalink:"/evolve/docs/ewb-sdk-examples-python/0.2.0/examples-fetching-network-model"}},s={},l=[{value:"Getting Started",id:"getting-started",level:2},{value:"Establish Connection",id:"establish-connection",level:2},{value:"Create a Consumer Client",id:"create-a-consumer-client",level:2},{value:"Fetch and Display Network Hierarchy",id:"fetch-and-display-network-hierarchy",level:2}],h={toc:l},p="wrapper";function u(e){let{components:t,...a}=e;return(0,o.kt)(p,(0,r.Z)({},h,a,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("p",null,"This tutorial demonstrates how to use the ",(0,o.kt)("inlineCode",{parentName:"p"},"NetworkConsumerClient")," to connect to a gRPC service and fetch information about a network hierarchy from the EWB server.\nThe code is organized to demonstrate how to establish a connection, retrieve the network hierarchy, and print the information in a structured manner."),(0,o.kt)("h2",{id:"getting-started"},"Getting Started"),(0,o.kt)("p",null,"Ensure that you have imported necessary modules from the Zepben library."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},"from zepben.evolve import NetworkConsumerClient, connect_with_token\nimport json\n")),(0,o.kt)("h2",{id:"establish-connection"},"Establish Connection"),(0,o.kt)("p",null,"Before connecting, ensure that you have a ",(0,o.kt)("inlineCode",{parentName:"p"},"config.json")," file that includes the connection parameters, such as ",(0,o.kt)("inlineCode",{parentName:"p"},"host"),", ",(0,o.kt)("inlineCode",{parentName:"p"},"access_token"),", and ",(0,o.kt)("inlineCode",{parentName:"p"},"rpc_port"),".\nHere is an example of the ",(0,o.kt)("inlineCode",{parentName:"p"},"config.json")," file format."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-json"},'{\n    "host": "your-ewb-hostname",\n    "access_token": "your-access-token",\n    "rpc_port": 1234\n}\n')),(0,o.kt)("p",null,"Now, establish the connection by using the ",(0,o.kt)("inlineCode",{parentName:"p"},"connect_with_token")," function, which securely connects to the EWB server using an access token."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},'with open("config.json") as f:\n    c = json.loads(f.read())\n\nchannel = connect_with_token(host=c["host"], access_token=c["access_token"], rpc_port=c["rpc_port"])\n\n')),(0,o.kt)("h2",{id:"create-a-consumer-client"},"Create a Consumer Client"),(0,o.kt)("p",null,"After establishing the connection, create a ",(0,o.kt)("inlineCode",{parentName:"p"},"NetworkConsumerClient")," using the provided channel."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},"client = NetworkConsumerClient(channel=channel)\n")),(0,o.kt)("h2",{id:"fetch-and-display-network-hierarchy"},"Fetch and Display Network Hierarchy"),(0,o.kt)("p",null,"You can fetch the network hierarchy by calling the ",(0,o.kt)("inlineCode",{parentName:"p"},"get_network_hierarchy")," method on the ",(0,o.kt)("inlineCode",{parentName:"p"},"NetworkConsumerClient")," instance.\nOnce you have fetched the network hierarchy, you can iterate through the hierarchical structure and print information about each level (that is the geographical regions, sub-geographical regions, substations, and feeders).\nIn this example, indentation is used to help represent the hierarchical relationships clearly."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},'network_hierarchy = await client.get_network_hierarchy()\nprint("Network hierarchy:")\nfor gr in network_hierarchy.result.geographical_regions.values():\nprint(f"- {gr.name}")\nfor sgr in gr.sub_geographical_regions:\n    print(f"  - {sgr.name}")\n    for sub in sgr.substations:\n        print(f"    - {sub.name}")\n        for fdr in sub.feeders:\n            print(f"      - {fdr.name}")\n')),(0,o.kt)("p",null,"Sample Output:"),(0,o.kt)("p",null,(0,o.kt)("img",{src:n(9938).Z,width:"1281",height:"687"})))}u.isMDXComponent=!0},9938:(e,t,n)=>{n.d(t,{Z:()=>r});const r=n.p+"assets/images/fetch_network_hierarchy_ex1-8b345218388b84e482f8961f99110449.png"}}]);