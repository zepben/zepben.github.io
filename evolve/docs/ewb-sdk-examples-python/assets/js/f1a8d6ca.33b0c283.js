"use strict";(self.webpackChunkewb_sdk_examples_python_doco=self.webpackChunkewb_sdk_examples_python_doco||[]).push([[907],{3905:(e,n,_)=>{_.d(n,{Zo:()=>c,kt:()=>h});var t=_(7294);function r(e,n,_){return n in e?Object.defineProperty(e,n,{value:_,enumerable:!0,configurable:!0,writable:!0}):e[n]=_,e}function a(e,n){var _=Object.keys(e);if(Object.getOwnPropertySymbols){var t=Object.getOwnPropertySymbols(e);n&&(t=t.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),_.push.apply(_,t)}return _}function l(e){for(var n=1;n<arguments.length;n++){var _=null!=arguments[n]?arguments[n]:{};n%2?a(Object(_),!0).forEach((function(n){r(e,n,_[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(_)):a(Object(_)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(_,n))}))}return e}function i(e,n){if(null==e)return{};var _,t,r=function(e,n){if(null==e)return{};var _,t,r={},a=Object.keys(e);for(t=0;t<a.length;t++)_=a[t],n.indexOf(_)>=0||(r[_]=e[_]);return r}(e,n);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(t=0;t<a.length;t++)_=a[t],n.indexOf(_)>=0||Object.prototype.propertyIsEnumerable.call(e,_)&&(r[_]=e[_])}return r}var s=t.createContext({}),o=function(e){var n=t.useContext(s),_=n;return e&&(_="function"==typeof e?e(n):l(l({},n),e)),_},c=function(e){var n=o(e.components);return t.createElement(s.Provider,{value:n},e.children)},m="mdxType",p={inlineCode:"code",wrapper:function(e){var n=e.children;return t.createElement(t.Fragment,{},n)}},d=t.forwardRef((function(e,n){var _=e.components,r=e.mdxType,a=e.originalType,s=e.parentName,c=i(e,["components","mdxType","originalType","parentName"]),m=o(_),d=r,h=m["".concat(s,".").concat(d)]||m[d]||p[d]||a;return _?t.createElement(h,l(l({ref:n},c),{},{components:_})):t.createElement(h,l({ref:n},c))}));function h(e,n){var _=arguments,r=n&&n.mdxType;if("string"==typeof e||r){var a=_.length,l=new Array(a);l[0]=d;var i={};for(var s in n)hasOwnProperty.call(n,s)&&(i[s]=n[s]);i.originalType=e,i[m]="string"==typeof e?e:r,l[1]=i;for(var o=2;o<a;o++)l[o]=_[o];return t.createElement.apply(null,l)}return t.createElement.apply(null,_)}d.displayName="MDXCreateElement"},7664:(e,n,_)=>{_.r(n),_.d(n,{assets:()=>s,contentTitle:()=>l,default:()=>p,frontMatter:()=>a,metadata:()=>i,toc:()=>o});var t=_(7462),r=(_(7294),_(3905));const a={id:"examples-ieee-13-node-feeder",title:"Building an IEEE Test Feeder"},l=void 0,i={unversionedId:"examples-ieee-13-node-feeder",id:"examples-ieee-13-node-feeder",title:"Building an IEEE Test Feeder",description:"Sometimes you do not want to pull a model from the EWB server, and instead want to build it locally.",source:"@site/docs/ieee_example.mdx",sourceDirName:".",slug:"/examples-ieee-13-node-feeder",permalink:"/evolve/docs/ewb-sdk-examples-python/examples-ieee-13-node-feeder",draft:!1,tags:[],version:"current",frontMatter:{id:"examples-ieee-13-node-feeder",title:"Building an IEEE Test Feeder"},sidebar:"someSidebar",previous:{title:"Examine Connectivity of a Power Network",permalink:"/evolve/docs/ewb-sdk-examples-python/examples-examine-connectivity"},next:{title:"Building a Network Hierarchy",permalink:"/evolve/docs/ewb-sdk-examples-python/examples-build-network-hierarchy"}},s={},o=[{value:"Getting Started",id:"getting-started",level:2},{value:"Define Base Voltages",id:"define-base-voltages",level:2},{value:"Create Equipment and Terminals",id:"create-equipment-and-terminals",level:2},{value:"Set Line Impedance",id:"set-line-impedance",level:2},{value:"Define Containers",id:"define-containers",level:2},{value:"Build Network Model",id:"build-network-model",level:2},{value:"Connect Terminals",id:"connect-terminals",level:2}],c={toc:o},m="wrapper";function p(e){let{components:n,...a}=e;return(0,r.kt)(m,(0,t.Z)({},c,a,{components:n,mdxType:"MDXLayout"}),(0,r.kt)("p",null,"Sometimes you do not want to pull a model from the EWB server, and instead want to build it locally.\nThis tutorial demonstrates how to build a model locally. In this example, we will build the IEEE 13 node test feeder (shown below) using the ",(0,r.kt)("inlineCode",{parentName:"p"},"zepben.evolve")," framework.\nThe detailed information about the IEEE 13 node test feeder can be found ",(0,r.kt)("a",{parentName:"p",href:"https://cmte.ieee.org/pes-testfeeders/resources/"},"here"),"."),(0,r.kt)("p",null,(0,r.kt)("img",{src:_(3451).Z,width:"1755",height:"1240"})),(0,r.kt)("h2",{id:"getting-started"},"Getting Started"),(0,r.kt)("p",null,"Ensure that you have installed and imported the required dependencies."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},'from typing import Tuple\n\nimport numpy\nfrom zepben.evolve import AcLineSegment, Disconnector, PowerTransformer, TransformerFunctionKind, NetworkService, Terminal, PowerTransformerEnd, EnergyConsumer, \\\n    PerLengthSequenceImpedance, PhaseCode, EnergyConsumerPhase, SinglePhaseKind, LinearShuntCompensator, ShuntCompensatorInfo, Feeder, \\\n    LvFeeder, BaseVoltage, Breaker\n\n__all__ = ["network"]\n')),(0,r.kt)("p",null,"Also ensure that you have correctly defined the constants ",(0,r.kt)("inlineCode",{parentName:"p"},"METRES_PER_FOOT")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"FEET_PER_MILE"),".\nIn this example, the constant named ",(0,r.kt)("inlineCode",{parentName:"p"},"METRES_PER_FOOT")," is defined with a value of 0.3048. This constant represents the conversion factor from feet to meters, and will be used later in the code when setting the lengths of various power lines in the network model.\nThe constant named ",(0,r.kt)("inlineCode",{parentName:"p"},"FEET_PER_MILE")," is defined with a value of 5280. This constant represents the number of feet in a mile. It is used in the calculation of per-meter impedance values for the power lines in the network model."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"FEET_PER_MILE = 5280\nMETRES_PER_FOOT = 0.3048\n")),(0,r.kt)("h2",{id:"define-base-voltages"},"Define Base Voltages"),(0,r.kt)("p",null,"We define base voltages for medium voltage (mv) and low voltage (lv).\nThese are crucial for specifying the nominal voltage of various components in the network.\nThe medium and low voltages of the IEEE 13 node network are defined at 4.16kV and 0.48kV, respectively."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},'mv = BaseVoltage(mrid="mv", nominal_voltage=4_160)\nlv = BaseVoltage(mrid="lv", nominal_voltage=480)\n')),(0,r.kt)("h2",{id:"create-equipment-and-terminals"},"Create Equipment and Terminals"),(0,r.kt)("p",null,"In this step, we will create instances of various electrical equipment such as Power Transformers, Power Transformer Ends, AC Line Segments, Disconnectors, Energy Consumers, Energy Consumer Phases, Liner Shunt Compensators, and Terminals.\nEach piece of equipment is assigned a unique identifier (mRID), and terminals are created for each equipment to associate connectivity (later in this tutorial).\nFor more details about creating specific power system equipment and terminals, refer to the ",(0,r.kt)("a",{parentName:"p",href:"/evolve/docs/ewb-sdk-examples-python/examples-examine-connectivity"},"Examine Connectivity of a Power Network")," tutorial."),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Create the Voltage Regulator")),(0,r.kt)("p",null,"Note that we will use the ",(0,r.kt)("inlineCode",{parentName:"p"},"PowerTransformer")," class to create a Power Transformer and then select the function as ",(0,r.kt)("inlineCode",{parentName:"p"},"TransformerFunctionKind.voltageRegulator")," to create a Voltage Regulator.\nFor each Power Transformer you create, you will need to also create the Power Transformer Ends to associate the primary and secondary winding details about the transformer. For example, for a two-winding transformer, you will need to create two ends (a primary and a secondary end)."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},'vr_650_632_t1, vr_650_632_t2 = Terminal(mrid="vr_650_632_t1"), Terminal(mrid="vr_650_632_t2")\nvr_650_632_e1 = PowerTransformerEnd(mrid="vr_650_632_e1", terminal=vr_650_632_t1, rated_u=mv.nominal_voltage)\nvr_650_632_e2 = PowerTransformerEnd(mrid="vr_650_632_e2", terminal=vr_650_632_t2, rated_u=mv.nominal_voltage)\nvr_650_632 = PowerTransformer(mrid="vr_650_632", function=TransformerFunctionKind.voltageRegulator, terminals=[vr_650_632_t1, vr_650_632_t2],\n                              power_transformer_ends=[vr_650_632_e1, vr_650_632_e2])\n')),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Create AC Line Segments")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},'# Line 632 to 645\nl_632_645_t1, l_632_645_t2 = Terminal(mrid="l_632_645_t1", phases=PhaseCode.BCN), Terminal(mrid="l_632_645_t2", phases=PhaseCode.BCN)\nl_632_645 = AcLineSegment(mrid="l_632_645", length=500 * METRES_PER_FOOT, terminals=[l_632_645_t1, l_632_645_t2], base_voltage=mv)\n\n# Line 632 to 633\nl_632_633_t1, l_632_633_t2 = Terminal(mrid="l_632_633_t1", phases=PhaseCode.ABCN), Terminal(mrid="l_632_633_t2", phases=PhaseCode.ABCN)\nl_632_633 = AcLineSegment(mrid="l_632_633", length=500 * METRES_PER_FOOT, terminals=[l_632_633_t1, l_632_633_t2], base_voltage=mv)\n\n# Line 645 to 646\nl_645_646_t1, l_645_646_t2 = Terminal(mrid="l_645_646_t1", phases=PhaseCode.BCN), Terminal(mrid="l_645_646_t2", phases=PhaseCode.BCN)\nl_645_646 = AcLineSegment(mrid="l_645_646", length=300 * METRES_PER_FOOT, terminals=[l_645_646_t1, l_645_646_t2], base_voltage=mv)\n\n# Line 650 to 632\nl_650_632_t1, l_650_632_t2 = Terminal(mrid="l_650_632_t1", phases=PhaseCode.ABCN), Terminal(mrid="l_650_632_t2", phases=PhaseCode.ABCN)\nl_650_632 = AcLineSegment(mrid="l_650_632", length=2000 * METRES_PER_FOOT, terminals=[l_650_632_t1, l_650_632_t2], base_voltage=mv)\n\n# Line 684 to 652\nl_684_652_t1, l_684_652_t2 = Terminal(mrid="l_684_652_t1", phases=PhaseCode.AN), Terminal(mrid="l_684_652_t2", phases=PhaseCode.AN)\nl_684_652 = AcLineSegment(mrid="l_684_652", length=800 * METRES_PER_FOOT, terminals=[l_684_652_t1, l_684_652_t2], base_voltage=mv)\n\n# Line 632 to 671\nl_632_671_t1, l_632_671_t2 = Terminal(mrid="l_632_671_t1", phases=PhaseCode.ABCN), Terminal(mrid="l_632_671_t2", phases=PhaseCode.ABCN)\nl_632_671 = AcLineSegment(mrid="l_632_671", length=2000 * METRES_PER_FOOT, terminals=[l_632_671_t1, l_632_671_t2], base_voltage=mv)\n\n# Line 671 to 684\nl_671_684_t1, l_671_684_t2 = Terminal(mrid="l_671_684_t1", phases=PhaseCode.ACN), Terminal(mrid="l_671_684_t2", phases=PhaseCode.ACN)\nl_671_684 = AcLineSegment(mrid="l_671_684", length=300 * METRES_PER_FOOT, terminals=[l_671_684_t1, l_671_684_t2], base_voltage=mv)\n\n# Line 671 to 680\nl_671_680_t1, l_671_680_t2 = Terminal(mrid="l_671_680_t1", phases=PhaseCode.ABCN), Terminal(mrid="l_671_680_t2", phases=PhaseCode.ABCN)\nl_671_680 = AcLineSegment(mrid="l_671_680", length=1000 * METRES_PER_FOOT, terminals=[l_671_680_t1, l_671_680_t2], base_voltage=mv)\n\n# Line 684 to 611\nl_684_611_t1, l_684_611_t2 = Terminal(mrid="l_684_611_t1", phases=PhaseCode.CN), Terminal(mrid="l_684_611_t2", phases=PhaseCode.CN)\nl_684_611 = AcLineSegment(mrid="l_684_611", length=300 * METRES_PER_FOOT, terminals=[l_684_611_t1, l_684_611_t2], base_voltage=mv)\n\n# Line 692 to 675\nl_692_675_t1, l_692_675_t2 = Terminal(mrid="l_692_675_t1", phases=PhaseCode.ABCN), Terminal(mrid="l_692_675_t2", phases=PhaseCode.ABCN)\nl_692_675 = AcLineSegment(mrid="l_692_675", length=500 * METRES_PER_FOOT, terminals=[l_692_675_t1, l_692_675_t2], base_voltage=mv)\n')),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Create Power Transformers and Power Transformer Ends")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},'tx_633_634_t1, tx_633_634_t2 = Terminal(mrid="tx_633_634_t1", phases=PhaseCode.ABCN), Terminal(mrid="tx_633_634_t2", phases=PhaseCode.ABCN)\ntx_633_634_e1 = PowerTransformerEnd(mrid="tx_633_634_e1", terminal=tx_633_634_t1, rated_u=mv.nominal_voltage)\ntx_633_634_e2 = PowerTransformerEnd(mrid="tx_633_634_e2", terminal=tx_633_634_t2, rated_u=lv.nominal_voltage)\ntx_633_634 = PowerTransformer(mrid="tx_633_634", terminals=[tx_633_634_t1, tx_633_634_t2], power_transformer_ends=[tx_633_634_e1, tx_633_634_e2])\n')),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Create the ",(0,r.kt)("inlineCode",{parentName:"li"},"Disconnector")," (Switch)")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},'sw_671_692_t1, sw_671_692_t2 = Terminal(mrid="sw_671_692_t1", phases=PhaseCode.ABCN), Terminal(mrid="sw_671_692_t2", phases=PhaseCode.ABCN)\nsw_671_692 = Disconnector(mrid="sw_671_692", terminals=[sw_671_692_t1, sw_671_692_t2], base_voltage=mv)\n')),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Create Shunt Compensators")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},'lsc_675_t= Terminal(mrid="lsc_675_t1", phases=PhaseCode.ABCN)\nlsc_675_info = ShuntCompensatorInfo(mrid="lsc_675_info", rated_voltage=4160, rated_current=48.077, rated_reactive_power=200000)\nlsc_675 = LinearShuntCompensator(mrid="lsc_675", terminals=[lsc_675_t], asset_info=lsc_675_info)\n\nlsc_611_t = Terminal(mrid="lsc_611_t1", phases=PhaseCode.CN)\nlsc_611_info = ShuntCompensatorInfo(mrid="lsc_611_info", rated_voltage=4160, rated_current=24.048, rated_reactive_power=100000)\nlsc_611 = LinearShuntCompensator(mrid="lsc_611", terminals=[lsc_611_t], asset_info=lsc_611_info)\n')),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Create Energy Consumers and Energy Consumer Phases")),(0,r.kt)("p",null,"Note that you will need specify the phases for the ",(0,r.kt)("inlineCode",{parentName:"p"},"EnergyConsumer"),". `EnergyConsumerPhase is a single phase of an energy consumer, which takes the following arguments."),(0,r.kt)("blockquote",null,(0,r.kt)("ul",{parentName:"blockquote"},(0,r.kt)("li",{parentName:"ul"},"phase: SinglePhaseKind = SinglePhaseKind.X - Phase of this energy consumer component."),(0,r.kt)("li",{parentName:"ul"},"p: Optional","[float]"," = None - Active power of the load."),(0,r.kt)("li",{parentName:"ul"},"q: Optional","[float]"," = None - Reactive power of the load."),(0,r.kt)("li",{parentName:"ul"},"p_fixed: Optional","[float]"," = None - Active power of the load that is a fixed quantity."),(0,r.kt)("li",{parentName:"ul"},"q_fixed: Optional","[float]"," = None - Reactive power of the load that is a fixed quantity."))),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},'ec_634_t = Terminal(mrid="ec_634_t", phases=PhaseCode.ABCN)\nec_634_pha = EnergyConsumerPhase(mrid="ec_634_pha", phase=SinglePhaseKind.A, p_fixed=160000, q_fixed=110000)\nec_634_phb = EnergyConsumerPhase(mrid="ec_634_phb", phase=SinglePhaseKind.B, p_fixed=120000, q_fixed=90000)\nec_634_phc = EnergyConsumerPhase(mrid="ec_634_phc", phase=SinglePhaseKind.C, p_fixed=120000, q_fixed=90000)\nec_634 = EnergyConsumer(mrid="ec_634", terminals=[ec_634_t], energy_consumer_phases=[ec_634_pha, ec_634_phb, ec_634_phc], base_voltage=lv)\n\nec_645_t = Terminal(mrid="ec_645_t", phases=PhaseCode.ABCN)\nec_645_pha = EnergyConsumerPhase(mrid="ec_645_pha", phase=SinglePhaseKind.A, p_fixed=0, q_fixed=0)\nec_645_phb = EnergyConsumerPhase(mrid="ec_645_phb", phase=SinglePhaseKind.B, p_fixed=170000, q_fixed=125000)\nec_645_phc = EnergyConsumerPhase(mrid="ec_645_phc", phase=SinglePhaseKind.C, p_fixed=0, q_fixed=0)\nec_645 = EnergyConsumer(mrid="ec_645", terminals=[ec_645_t], energy_consumer_phases=[ec_645_pha, ec_645_phb, ec_645_phc], base_voltage=mv)\n\nec_646_t = Terminal(mrid="ec_646_t", phases=PhaseCode.ABC)\nec_646_pha = EnergyConsumerPhase(mrid="ec_646_pha", phase=SinglePhaseKind.A, p=0, q=0)\nec_646_phb = EnergyConsumerPhase(mrid="ec_646_phb", phase=SinglePhaseKind.B, p=230000, q=132000)\nec_646_phc = EnergyConsumerPhase(mrid="ec_646_phc", phase=SinglePhaseKind.C, p=0, q=0)\nec_646 = EnergyConsumer(mrid="ec_646", terminals=[ec_646_t], energy_consumer_phases=[ec_646_pha, ec_646_phb, ec_646_phc], base_voltage=mv)\n\nec_652_t = Terminal(mrid="ec_652_t", phases=PhaseCode.ABCN)\nec_652_pha = EnergyConsumerPhase(mrid="ec_652_pha", phase=SinglePhaseKind.A, p=128000, q=86000)\nec_652_phb = EnergyConsumerPhase(mrid="ec_652_phb", phase=SinglePhaseKind.B, p=0, q=0)\nec_652_phc = EnergyConsumerPhase(mrid="ec_652_phc", phase=SinglePhaseKind.C, p=0, q=0)\nec_652 = EnergyConsumer(mrid="ec_652", terminals=[ec_652_t], energy_consumer_phases=[ec_652_pha, ec_652_phb, ec_652_phc], base_voltage=mv)\n\nec_671_t = Terminal(mrid="ec_671_t", phases=PhaseCode.ABC)\nec_671_pha = EnergyConsumerPhase(mrid="ec_671_pha", phase=SinglePhaseKind.A, p_fixed=385000, q_fixed=220000)\nec_671_phb = EnergyConsumerPhase(mrid="ec_671_phb", phase=SinglePhaseKind.B, p_fixed=385000, q_fixed=220000)\nec_671_phc = EnergyConsumerPhase(mrid="ec_671_phc", phase=SinglePhaseKind.C, p_fixed=385000, q_fixed=220000)\nec_671 = EnergyConsumer(mrid="ec_671", terminals=[ec_671_t], energy_consumer_phases=[ec_671_pha, ec_671_phb, ec_671_phc], base_voltage=mv)\n\nec_675_t = Terminal(mrid="ec_675_t", phases=PhaseCode.ABCN)\nec_675_pha = EnergyConsumerPhase(mrid="ec_675_pha", phase=SinglePhaseKind.A, p_fixed=485000, q_fixed=190000)\nec_675_phb = EnergyConsumerPhase(mrid="ec_675_phb", phase=SinglePhaseKind.B, p_fixed=68000, q_fixed=60000)\nec_675_phc = EnergyConsumerPhase(mrid="ec_675_phc", phase=SinglePhaseKind.C, p_fixed=290000, q_fixed=212000)\nec_675 = EnergyConsumer(mrid="ec_675", terminals=[ec_675_t], energy_consumer_phases=[ec_675_pha, ec_675_phb, ec_675_phc], base_voltage=mv)\n\nec_692_t = Terminal(mrid="ec_692_t", phases=PhaseCode.ABC)\nec_692_pha = EnergyConsumerPhase(mrid="ec_692_pha", phase=SinglePhaseKind.A, p=0, q=0)\nec_692_phb = EnergyConsumerPhase(mrid="ec_692_phb", phase=SinglePhaseKind.B, p=0, q=0)\nec_692_phc = EnergyConsumerPhase(mrid="ec_692_phc", phase=SinglePhaseKind.C, p=170000, q=151000)\nec_692 = EnergyConsumer(mrid="ec_692", terminals=[ec_692_t], energy_consumer_phases=[ec_692_pha, ec_692_phb, ec_692_phc], base_voltage=mv)\n\nec_611_t = Terminal(mrid="ec_611_t", phases=PhaseCode.ABCN)\nec_611_pha = EnergyConsumerPhase(mrid="ec_611_pha", phase=SinglePhaseKind.A, p=0, q=0)\nec_611_phb = EnergyConsumerPhase(mrid="ec_611_phb", phase=SinglePhaseKind.B, p=0, q=0)\nec_611_phc = EnergyConsumerPhase(mrid="ec_611_phc", phase=SinglePhaseKind.C, p=170000, q=80000)\nec_611 = EnergyConsumer(mrid="ec_611", terminals=[ec_611_t], energy_consumer_phases=[ec_611_pha, ec_611_phb, ec_611_phc], base_voltage=mv)\n')),(0,r.kt)("h2",{id:"set-line-impedance"},"Set Line Impedance"),(0,r.kt)("p",null,"Now, you need to assign per length sequence impedance to the lines in the network.\nThese impedance's represent the electrical characteristics of the lines.\nThe impedance data for lines are represented as line impedance matrices by IEEE.\nHence, the following function is used to convert the line impedance matrices to sequence impedance and admittance parameters per unit length (supported format by the ",(0,r.kt)("inlineCode",{parentName:"p"},"PerLengthSequenceImpedance")," class)."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"def plsi_from_z_per_mile(mrid: str, *impedances: Tuple[float, float]):\n    r_per_metre, x_per_metre = numpy.mean(impedances, axis=0) / (METRES_PER_FOOT * FEET_PER_MILE)\n    return PerLengthSequenceImpedance(mrid=mrid, r=r_per_metre, x=x_per_metre)\n")),(0,r.kt)("p",null,"Using the above function, convert the IEEE line impedance matrix configurations to sequence impedance and admittance parameters per unit length, as follows."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},'plsi_601 = plsi_from_z_per_mile("plsi_601", (0.3465, 1.0179), (0.3375, 1.0478), (0.3414, 1.0348))\nplsi_602 = plsi_from_z_per_mile("plsi_602", (0.7526, 1.1814), (0.7475, 1.1983), (0.7436, 1.2112))\nplsi_603 = plsi_from_z_per_mile("plsi_603", (1.3294, 1.3471), (1.3238, 1.3569))\nplsi_604 = plsi_from_z_per_mile("plsi_604", (1.3238, 1.3569), (1.3294, 1.3471))\nplsi_605 = plsi_from_z_per_mile("plsi_605", (1.3292, 1.3475))\nplsi_606 = plsi_from_z_per_mile("plsi_606", (0.7982, 0.4463), (0.7891, 0.4041), (0.7982, 0.4463))\nplsi_607 = plsi_from_z_per_mile("plsi_607", (1.3425, 0.5124))\n')),(0,r.kt)("p",null,"Assign the per length sequence impedance to the lines, as follows."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"l_632_645.per_length_sequence_impedance = plsi_603\nl_632_633.per_length_sequence_impedance = plsi_602\nl_645_646.per_length_sequence_impedance = plsi_603\nl_650_632.per_length_sequence_impedance = plsi_601\nl_684_652.per_length_sequence_impedance = plsi_607\nl_632_671.per_length_sequence_impedance = plsi_601\nl_671_684.per_length_sequence_impedance = plsi_604\nl_671_680.per_length_sequence_impedance = plsi_601\nl_684_611.per_length_sequence_impedance = plsi_605\nl_692_675.per_length_sequence_impedance = plsi_606\n")),(0,r.kt)("h2",{id:"define-containers"},"Define Containers"),(0,r.kt)("p",null,"The next step is to define the containers to represent the high-voltage and low-voltage feeders in the network.\nThese containers help organize and manage different sections of the electrical system."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},'hv_fdr = Feeder(mrid="hv_fdr", normal_head_terminal=br_650_t2)\nlv_fdr = LvFeeder(mrid="lv_fdr", normal_head_terminal=tx_633_634_t2)\n')),(0,r.kt)("h2",{id:"build-network-model"},"Build Network Model"),(0,r.kt)("p",null,"In this step, we create a ",(0,r.kt)("inlineCode",{parentName:"p"},"NetworkService")," instance and add all the created equipment and terminals to it.\nThis step essentially assembles the entire network."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"network = NetworkService()\nfor io in [vr_650_632, vr_650_632_t1, vr_650_632_t2, vr_650_632_e1, vr_650_632_e2, l_632_645, l_632_645_t1, l_632_645_t2,\n           l_632_633, l_632_633_t1, l_632_633_t2, tx_633_634, tx_633_634_t1, tx_633_634_t2, tx_633_634_e1, tx_633_634_e2, l_645_646, l_645_646_t1, l_645_646_t2,\n           l_650_632, l_650_632_t1, l_650_632_t2, l_684_652, l_684_652_t1, l_684_652_t2, l_632_671, l_632_671_t1, l_632_671_t2, l_671_684, l_671_684_t1,\n           l_671_684_t2, l_671_680, l_671_680_t1, l_671_680_t2, sw_671_692, sw_671_692_t1, sw_671_692_t2, l_684_611, l_684_611_t1, l_684_611_t2, l_692_675,\n           l_692_675_t1, l_692_675_t2, ec_634_t, ec_634_pha, ec_634_phb, ec_634_phc, ec_634, ec_645_t, ec_645_pha, ec_645_phb, ec_645_phc, ec_645, ec_646_t,\n           ec_646_pha, ec_646_phb, ec_646_phc, ec_646, ec_652_t, ec_652_pha, ec_652_phb, ec_652_phc, ec_652, ec_671_t, ec_671_pha, ec_671_phb, ec_671_phc,\n           ec_671, ec_675_t, ec_675_pha, ec_675_phb, ec_675_phc, ec_675, ec_692_t, ec_692_pha, ec_692_phb, ec_692_phc, ec_692, ec_611_t, ec_611_pha, ec_611_phb,\n           ec_611_phc, ec_611, lsc_675_t, lsc_675_info, lsc_675, lsc_611_t, lsc_611_info, lsc_611, plsi_601, plsi_602, plsi_603, plsi_604, plsi_605, plsi_606,\n           plsi_607, hv_fdr, lv_fdr, mv, lv]:\n    network.add(io)\n")),(0,r.kt)("h2",{id:"connect-terminals"},"Connect Terminals"),(0,r.kt)("p",null,"The final step is to connect the terminals of different equipment to form the complete electrical network. This involves establishing the physical connections between various components (as shown in the single line diagram above)."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"# Complete 650-632 regulator + line\nnetwork.connect_terminals(vr_650_632_t2, l_650_632_t1)\n\n# Node 611\nnetwork.connect_terminals(l_684_611_t2, lsc_611_t)\nnetwork.connect_terminals(l_684_611_t2, ec_611_t)\n\n# Node 632\nnetwork.connect_terminals(l_650_632_t2, l_632_633_t1)\nnetwork.connect_terminals(l_650_632_t2, l_632_645_t1)\nnetwork.connect_terminals(l_650_632_t2, l_632_671_t1)\n\n# Node 633\nnetwork.connect_terminals(l_632_633_t2, tx_633_634_t1)\n\n# Node 634\nnetwork.connect_terminals(tx_633_634_t2, ec_634_t)\n\n# Node 645\nnetwork.connect_terminals(l_632_645_t2, l_645_646_t1)\nnetwork.connect_terminals(l_632_645_t2, ec_645_t)\n\n# Node 646\nnetwork.connect_terminals(l_645_646_t2, ec_646_t)\n\n# Node 650\nnetwork.connect_terminals(br_650_t2, vr_650_632_t1)\n\n# Node 652\nnetwork.connect_terminals(l_684_652_t2, ec_652_t)\n\n# Node 671\nnetwork.connect_terminals(l_632_671_t2, l_671_680_t1)\nnetwork.connect_terminals(l_632_671_t2, l_671_684_t1)\nnetwork.connect_terminals(l_632_671_t2, sw_671_692_t1)\nnetwork.connect_terminals(l_632_671_t2, ec_671_t)\n\n# Node 675\nnetwork.connect_terminals(l_692_675_t2, lsc_675_t)\nnetwork.connect_terminals(l_692_675_t2, ec_675_t)\n\n# Node 684\nnetwork.connect_terminals(l_671_684_t2, l_684_611_t1)\nnetwork.connect_terminals(l_671_684_t2, l_684_652_t1)\n\n# Node 692\nnetwork.connect_terminals(sw_671_692_t2, l_692_675_t1)\nnetwork.connect_terminals(sw_671_692_t2, ec_692_t)\n")))}p.isMDXComponent=!0},3451:(e,n,_)=>{_.d(n,{Z:()=>t});const t=_.p+"assets/images/ieee_network-c11c00d5a474e58926c9564038e3a8f5.jpg"}}]);