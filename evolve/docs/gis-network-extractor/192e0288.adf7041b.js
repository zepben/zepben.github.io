(window.webpackJsonp=window.webpackJsonp||[]).push([[6],{62:function(e,n,t){"use strict";t.r(n),t.d(n,"frontMatter",(function(){return s})),t.d(n,"metadata",(function(){return o})),t.d(n,"rightToc",(function(){return l})),t.d(n,"default",(function(){return b}));var a=t(2),i=t(6),r=(t(0),t(80)),s={id:"input-files",title:"Input Files"},o={unversionedId:"input-files",id:"input-files",isDocsHomePage:!1,title:"Input Files",description:"Meter Mapping File",source:"@site/docs/input-files.md",slug:"/input-files",permalink:"/evolve/docs/gis-network-extractor/next/input-files",version:"current",sidebar:"sidebar",previous:{title:"Overview",permalink:"/evolve/docs/gis-network-extractor/next/"},next:{title:"Running the Application",permalink:"/evolve/docs/gis-network-extractor/next/run-app"}},l=[],c={rightToc:l};function b(e){var n=e.components,t=Object(i.a)(e,["components"]);return Object(r.b)("wrapper",Object(a.a)({},c,t,{components:n,mdxType:"MDXLayout"}),Object(r.b)("h5",{id:"meter-mapping-file"},"Meter Mapping File"),Object(r.b)("p",null,"The GIS Network Extractor takes meter mapping files to provide a mapping of meters and supply points to transformers.\nThese files use CSV format and contain the following columns: ",Object(r.b)("strong",{parentName:"p"},"company, nmi,meter_id, supply_point_id, meter_no, transformer_id, transformer_desc, feeder, service_addr, cust_class, cust_tariff"),".\nEach file is required to have its date in the file name so the appropriate mapping file can be used."),Object(r.b)("h6",{id:"sample-content"},"Sample content:"),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-csv"}),'company,nmi,meter_id,supply_point_id,meter_no,transformer_id,transformer_desc,feeder,service_addr,cust_class,cust_tariff\n"ACME","FOOH1234567",123456789,11929433,"1234",,,"LP001","140 THISSON STREET,SPRINGFIELD,SPF,12345A","C","T1"\n"ACME","FOOH1234567",123456789,11929433,"1234",,,"LP002","140 OTHERSON STREET,SPRINGFIELD,SPF,12345A","R","T1"\n"ACME","FOOH1234567",123456789,11929533,"1234",,,"LP003","LEVEL44,76 WOOP WOOP STREET,SPRINGFIELD,SPF,12345A","I","T2"\n"ACME","FOOH1234567",123456789,11929538,"1234",,,"LP004","WEST TOWER,76 WOOP WOOP STREET,SPRINGFIELD,SPF,12345A","I","T1"\n"ACME","FOOH1234567",123456789,11929538,"1234",,,"LP006","WEST TOWER,76 WOOP WOOP STREET,SPRINGFIELD,SPF,12345A","C","T1"\n"ACME","FOOH1234567",123456789,11929538,"1234",,,"LP007","TENANCY2,OPP 76 WOOP WOOP STREET,SPRINGFIELD,SPF,12345A","I","T3"\n"ACME","FOOH1234567",123456789,11929538,"1234",,,"LP008","TENANCY1,OPP 76 WOOP WOOP STREET,SPRINGFIELD,SPF,12345A","R","T3"\n')),Object(r.b)("h5",{id:"cable-types-file"},"Cable Types File"),Object(r.b)("p",null,"The GIS Network Extractor derives cable type information from a json file structured as following:   "),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{}),'{\n    "cableTypes": [{\n            "id": string,\n            "resistance": double,\n            "reactance": double,\n            "zeroSeqResistance": double,\n            "zeroSeqReactance": double,\n            "nominalVoltage": double,\n            "rating": int,\n            "maxFaultCurrent": double,\n            "normalRating": double,\n            "springDay": double,\n            "springNight": double,\n            "summerDay": double,\n            "summerNight": double,\n            "autumnDay": double,\n            "autumnNight": double,\n            "winterDay": double,\n            "winterNight": double,\n            "neutralRating": double\n        }\n    ]\n}\n')),Object(r.b)("p",null,"If you have a running copy of the ",Object(r.b)("inlineCode",{parentName:"p"},"Energy Workbench Server")," you can download the ",Object(r.b)("a",Object(a.a)({parentName:"p"},{href:"http://ewbserver/ewb/network/api/v1/cable-types"}),"existing cable types"),"."),Object(r.b)("h6",{id:"sample-content-1"},"Sample content:"),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-json"}),'{\n    "cableTypes": [{\n            "id": "Cu_0.1i_SWAS_SD_11_6",\n            "resistance": 0.342,\n            "reactance": 0.115,\n            "zeroSeqResistance": 0.795,\n            "zeroSeqReactance": 0.066,\n            "nominalVoltage": 11,\n            "rating": 215,\n            "maxFaultCurrent": 10.1,\n            "normalRating": 1,\n            "springDay": 1,\n            "springNight": 1,\n            "summerDay": 1,\n            "summerNight": 1,\n            "autumnDay": 1,\n            "autumnNight": 1,\n            "winterDay": 1.14,\n            "winterNight": 1.14,\n            "neutralRating": 215\n        }, {\n            "id": "Cu_0.25i_pswsb_SD_6.6_3",\n            "resistance": 0.133,\n            "reactance": 0.074,\n            "zeroSeqResistance": 0.95,\n            "zeroSeqReactance": 0.541,\n            "nominalVoltage": 6.6,\n            "rating": 345,\n            "maxFaultCurrent": 10.1,\n            "normalRating": 1,\n            "springDay": 1,\n            "springNight": 1,\n            "summerDay": 1,\n            "summerNight": 1,\n            "autumnDay": 1,\n            "autumnNight": 1,\n            "winterDay": 1.117,\n            "winterNight": 1.117,\n            "neutralRating": 345\n        }\n    ]\n}\n')),Object(r.b)("h5",{id:"network-hierarchy-file"},"Network Hierarchy File"),Object(r.b)("p",null,"The GIS Network Extractor derives network hierarchy information from a json file structured as following:   "),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{}),'{\n    "businesses": [{\n        "id": string,\n        "name": string,\n        "regions": [{\n            "id": string,\n            "name": string,\n            "zones": [{\n                "id": string,\n                "name": string,\n                "feeders": [{\n                    "id": string,\n                    "name": string\n                }]\n            }]\n        }]\n    }]\n}\n')),Object(r.b)("p",null,"If you have a running copy of the ",Object(r.b)("inlineCode",{parentName:"p"},"Energy Workbench Server")," you can download the ",Object(r.b)("a",Object(a.a)({parentName:"p"},{href:"http://ewbserver/ewb/network/api/v1/hierarchy?filter=businesses"}),"existing network hierarchy"),"."),Object(r.b)("h6",{id:"sample-content-2"},"Sample content:"),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-json"}),'{\n    "businesses": [{\n        "id": "business1",\n        "name": "BUSINESS1",\n        "regions": [{\n            "id": "region1",\n            "name": "REGION1",\n            "zones": [{\n                "id": "zone1",\n                "name": "ZONE1",\n                "feeders": [{\n                    "id": "feeder1",\n                    "name": "FEEDER1"\n                }]\n            }]\n        }]\n    }]\n}\n')),Object(r.b)("h5",{id:"nodes-config-file"},"Nodes Config File"),Object(r.b)("p",null,"The GIS Network Extractor derives the cim classes and diagram object styles to use for each class of gis node from a json file that follows this structure:"),Object(r.b)("h6",{id:"properties"},"Properties"),Object(r.b)("ol",null,Object(r.b)("li",{parentName:"ol"},Object(r.b)("inlineCode",{parentName:"li"},"creators"),": Used to map from gis node classes to ",Object(r.b)("inlineCode",{parentName:"li"},"ConductingEquipment")," classes."),Object(r.b)("li",{parentName:"ol"},Object(r.b)("inlineCode",{parentName:"li"},"styles"),": Used to map from gis node classes to ",Object(r.b)("inlineCode",{parentName:"li"},"DiagramObjectStyles"),". "),Object(r.b)("li",{parentName:"ol"},Object(r.b)("inlineCode",{parentName:"li"},"switchStyles"),": Used to refine the style of objects with a ",Object(r.b)("inlineCode",{parentName:"li"},"SWITCH")," style based on attribution:",Object(r.b)("ol",{parentName:"li"},Object(r.b)("li",{parentName:"ol"},"For switches with the 'stn_switch' node class the 'type' attribute is used for the mapping. If there's no 'type' attribute the 'switch type' attribute is used instead."),Object(r.b)("li",{parentName:"ol"},"For switches with the 'hv_switch' node class the 'switch type' attribute is used for the mapping.  ")))),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-json"}),'{\n  "mappings": [\n    {\n      "gisClass": "<node-class>",\n      "cimClass": "<conducting-equipment-class>",\n      "style": "<diagram-object-style>"\n    },\n    ...\n  ],\n  "switchStyles": [\n    {\n      "value": "<attribute-value>",\n      "style": "<diagram-object-style>"\n    },\n    ...\n  ]\n}\n')),Object(r.b)("h6",{id:"sample-content-3"},"Sample content:"),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-json"}),'{\n  "mappings": [\n    {\n      "gisClass": "acr",\n      "cimClass": "Recloser",\n      "style": "RECLOSER"\n    },\n    {\n      "gisClass": "hvSwitch",\n      "cimClass": "Disconnector",\n      "style": "SWITCH"\n    }\n  ],\n  "switchStyles": [\n    {\n      "value": "bridge",\n      "style": "BRIDGE"\n    },\n    {\n      "value": "air-break",\n      "style": "SWITCH"\n    },\n    {\n      "value": "live line clamp",\n      "style": "LIVE_LINE_CLAMP"\n    }\n  ]\n}\n')))}b.isMDXComponent=!0}}]);