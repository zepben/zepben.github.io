"use strict";(self.webpackChunkewb_app_server_doco=self.webpackChunkewb_app_server_doco||[]).push([[2536],{3905:(e,n,t)=>{t.d(n,{Zo:()=>c,kt:()=>h});var o=t(7294);function r(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function a(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);n&&(o=o.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,o)}return t}function i(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?a(Object(t),!0).forEach((function(n){r(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):a(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function s(e,n){if(null==e)return{};var t,o,r=function(e,n){if(null==e)return{};var t,o,r={},a=Object.keys(e);for(o=0;o<a.length;o++)t=a[o],n.indexOf(t)>=0||(r[t]=e[t]);return r}(e,n);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(o=0;o<a.length;o++)t=a[o],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(r[t]=e[t])}return r}var l=o.createContext({}),p=function(e){var n=o.useContext(l),t=n;return e&&(t="function"==typeof e?e(n):i(i({},n),e)),t},c=function(e){var n=p(e.components);return o.createElement(l.Provider,{value:n},e.children)},u="mdxType",d={inlineCode:"code",wrapper:function(e){var n=e.children;return o.createElement(o.Fragment,{},n)}},m=o.forwardRef((function(e,n){var t=e.components,r=e.mdxType,a=e.originalType,l=e.parentName,c=s(e,["components","mdxType","originalType","parentName"]),u=p(t),m=r,h=u["".concat(l,".").concat(m)]||u[m]||d[m]||a;return t?o.createElement(h,i(i({ref:n},c),{},{components:t})):o.createElement(h,i({ref:n},c))}));function h(e,n){var t=arguments,r=n&&n.mdxType;if("string"==typeof e||r){var a=t.length,i=new Array(a);i[0]=m;var s={};for(var l in n)hasOwnProperty.call(n,l)&&(s[l]=n[l]);s.originalType=e,s[u]="string"==typeof e?e:r,i[1]=s;for(var p=2;p<a;p++)i[p]=t[p];return o.createElement.apply(null,i)}return o.createElement.apply(null,t)}m.displayName="MDXCreateElement"},1501:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>l,contentTitle:()=>i,default:()=>d,frontMatter:()=>a,metadata:()=>s,toc:()=>p});var o=t(7462),r=(t(7294),t(3905));const a={id:"authentication",title:"Authentication",slug:"/authentication"},i=void 0,s={unversionedId:"authentication",id:"version-2.7.0/authentication",title:"Authentication",description:"EAS's only method of authentication is through Microsoft EntraID (formally Microsoft Active Directory). This document covers the implementation and deployment models",source:"@site/versioned_docs/version-2.7.0/authentication.md",sourceDirName:".",slug:"/authentication",permalink:"/evolve/docs/evolve-app-server/2.7.0/authentication",draft:!1,tags:[],version:"2.7.0",frontMatter:{id:"authentication",title:"Authentication",slug:"/authentication"},sidebar:"sidebar",previous:{title:"Personal Access Tokens",permalink:"/evolve/docs/evolve-app-server/2.7.0/personal-access-tokens"}},l={},p=[{value:"Implementation",id:"implementation",level:2},{value:"Deployment Models",id:"deployment-models",level:2},{value:"Zepben Managed",id:"zepben-managed",level:3},{value:"Customer Managed",id:"customer-managed",level:3},{value:"Setup Process",id:"setup-process",level:4},{value:"Self-Hosted",id:"self-hosted",level:3},{value:"Setup Process",id:"setup-process-1",level:4}],c={toc:p},u="wrapper";function d(e){let{components:n,...t}=e;return(0,r.kt)(u,(0,o.Z)({},c,t,{components:n,mdxType:"MDXLayout"}),(0,r.kt)("p",null,"EAS's only method of authentication is through Microsoft EntraID (formally Microsoft Active Directory). This document covers the implementation and deployment models"),(0,r.kt)("h2",{id:"implementation"},"Implementation"),(0,r.kt)("p",null,"EAS implements the OpenID Connect (OIDC) protocol where JWT tokens issued by an IdP are validated using published JWKS keys. The frontend implements the OAuth 2.0 Authorization code flow with PKCE to login the user and the resulting JWT is sent to EAS in every request. Both the frontend and EAS leave it to  the IdP to perform any custom authentication rules such as MFA and session timeouts."),(0,r.kt)("h2",{id:"deployment-models"},"Deployment Models"),(0,r.kt)("p",null,"There are three deployment models, each with their own tradeoffs."),(0,r.kt)("h3",{id:"zepben-managed"},"Zepben Managed"),(0,r.kt)("p",null,"This deployment methodology involves Zepben setting a up a dedicated EntraID tenant for your deployment. Zepben will then configure applications to use this tenant as its authentication provider. This is a fast, low overhead way of getting your Zepben platform setup."),(0,r.kt)("p",null,"With this deployment style:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"User additions/removes/role assignemnts will be managed by Zepben support"),(0,r.kt)("li",{parentName:"ul"},"Users will have a separate own username and password to login, password resets will be conducted by Zepben support",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"If the email addresses belong to their own EntraID tenant, then ",(0,r.kt)("a",{parentName:"li",href:"https://learn.microsoft.com/en-us/entra/external-id/what-is-b2b"},"EntraID B2B Collaboration")," will be used where users use the source tenant credentials to login"))),(0,r.kt)("li",{parentName:"ul"},"Multi-factor authentication is used and resets are managed by Zepben support"),(0,r.kt)("li",{parentName:"ul"},"There are no customizations available, eg. Geo-location rules, IP rules etc.")),(0,r.kt)("h3",{id:"customer-managed"},"Customer Managed"),(0,r.kt)("p",null,"This deployment methodology allow customers to bring your own EntraID tenant for authentication. Zepben will integrate our applications to allow logins from your tenant using EntraID Single Sign On (SSO)."),(0,r.kt)("p",null,"With this deployment style:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Users additions/remove/role assignments are managed by the Customer"),(0,r.kt)("li",{parentName:"ul"},"Customer will manage user password/MFA resets"),(0,r.kt)("li",{parentName:"ul"},"Custom authentication rules using ",(0,r.kt)("a",{parentName:"li",href:"https://learn.microsoft.com/en-us/entra/identity/conditional-access/overview"},"EntraID Conditional Access")," can be used to control authentication requirements"),(0,r.kt)("li",{parentName:"ul"},"Zepben will continue to manage application configuration in our own tenant")),(0,r.kt)("h4",{id:"setup-process"},"Setup Process"),(0,r.kt)("ol",null,(0,r.kt)("li",{parentName:"ol"},"Customer will provide Zepben with their EntraID tenant ID"),(0,r.kt)("li",{parentName:"ol"},"Zepben will provision EntraID Application registrations as ",(0,r.kt)("a",{parentName:"li",href:"https://learn.microsoft.com/en-us/entra/identity/conditional-access/overview"},"multi tenant applications")),(0,r.kt)("li",{parentName:"ol"},"Zepben will provide a set of Enterprise Application client ids to Customer"),(0,r.kt)("li",{parentName:"ol"},"Customer will ",(0,r.kt)("a",{parentName:"li",href:"https://learn.microsoft.com/en-us/entra/identity/enterprise-apps/create-service-principal-cross-tenant?pivots=azure-cli"},"add each Enterprise Application")," to their tenant"),(0,r.kt)("li",{parentName:"ol"},"Customer will grant ",(0,r.kt)("a",{parentName:"li",href:"https://learn.microsoft.com/en-us/entra/identity/enterprise-apps/grant-admin-consent?pivots=portal"},"admin consent")," for all roles in each Enterprise Application"),(0,r.kt)("li",{parentName:"ol"},"Zepben will configure applications to trust logins from customer tenant and provide customer platform URL"),(0,r.kt)("li",{parentName:"ol"},"Customer can ",(0,r.kt)("a",{parentName:"li",href:"https://learn.microsoft.com/en-us/entra/identity/enterprise-apps/assign-user-or-group-access-portal?pivots=portal"},"assign users")," to application roles"),(0,r.kt)("li",{parentName:"ol"},"Users can now login to the Zepben platform")),(0,r.kt)("h3",{id:"self-hosted"},"Self-Hosted"),(0,r.kt)("p",null,"This deployment model is only applicable if you are self hosting all of EAS and EWB. This deployment model is similar to the customer managed version except with the added responsbility of managing the servers and the EntraID application registrations."),(0,r.kt)("h4",{id:"setup-process-1"},"Setup Process"),(0,r.kt)("p",null,"This process require setting up the EAS and EWB applications in Microsoft EntraID. The Powershell script below is an example script that can be used to achieve this."),(0,r.kt)("p",null,"The script:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Creates the EAS and EWB applications"),(0,r.kt)("li",{parentName:"ul"},"Creates Service Principals for each applications"),(0,r.kt)("li",{parentName:"ul"},"Sets EAS as an SPA application"),(0,r.kt)("li",{parentName:"ul"},"Creates the roles / OAuth scopes required in each application"),(0,r.kt)("li",{parentName:"ul"},"Grants EAS access to retrieve data from EWB"),(0,r.kt)("li",{parentName:"ul"},"Grant both applications access to Microsoft Graph user details"),(0,r.kt)("li",{parentName:"ul"},"Finally, prints out the JSON snippets required to configure each application")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-powershell"},'<#\nPrerequisites:\n - Install-Module Microsoft.Graph -Scope CurrentUser\n - You must sign in with an account that has Application.ReadWrite.All (or Global Admin) to create app registrations.\n - Run: Connect-MgGraph -Scopes "Application.ReadWrite.All","Application.Read.All","Directory.ReadWrite.All"\n#>\n\n$easDisplayName = "EAS-test6"\n$ewbDisplayName = "EWB-test6"\n\n$spaRedirectUris = @(\n  "https://your-production-app.example.com"\n)\n\n$easRoleNames = @(\n  "SUPER_ADMIN",\n  "EWB_ADMIN",\n  "TIMESERIES_MODELLER",\n  "MODELLER",\n  "DEVELOPER",\n  "MAP_VIEWER",\n  "EWB_UPDATER",\n  "METRICS_VIEWER",\n  "NETWORK_MODEL_EXECUTOR",\n  "INTEGRATION_ADMIN",\n  "EWB_CUSTOMER_VIEWER",\n  "EWB_DIAGRAM_VIEWER",\n  "CUSTOMER_PII_READ",\n  "CUSTOMER_NON_PII_READ",\n  "CUSTOMER_PII_EXPORT",\n  "CUSTOMER_NON_PII_EXPORT"\n)\n\n$ewbRoleNames = @(\n  "read:ewb",\n  "read:customer",\n  "read:diagram"\n)\n\n$msGraphAppId = "00000003-0000-0000-c000-000000000000"      # Microsoft Graph\n$userReadScopeId = "e1fe6dd8-ba31-4d61-89e7-88639da4683d"  # User.Read (delegated)\n\nWrite-Host "Connecting to Microsoft Graph. You must consent with a user who has permission to create apps..." -ForegroundColor Cyan\nConnect-MgGraph -Scopes "Application.ReadWrite.All","Directory.ReadWrite.All"\n\n$tenantId = (Get-MgContext).TenantId\n\nfunction New-GuidString { [Guid]::NewGuid().ToString() }\n\nfunction New-Roles {\n  param (\n    [Parameter(Mandatory = $true)]\n    [string[]]$Roles\n  )\n\n  $appRoles = @()\n  $oauth2PermissionScopes = @()\n\n  foreach ($r in $Roles) {\n    $roleId = New-GuidString\n\n    $appRole = @{\n        Id = $roleId\n        AllowedMemberTypes = @("User","Application")\n        DisplayName = $r\n        Description = $r\n        Value = $r\n        IsEnabled = $true\n    }\n    $appRoles += $appRole\n\n    $scope = @{\n        Id = $roleId\n        AdminConsentDisplayName = $r\n        AdminConsentDescription = $r\n        Type = "User"\n        IsEnabled = $true\n        UserConsentDisplayName = ""\n        UserConsentDescription = ""\n        Value = $r\n    }\n    $oauth2PermissionScopes += $scope\n  }\n\n  return $appRoles, $oauth2PermissionScopes\n}\n\n$requiredResourceAccess = @(\n  @{\n    ResourceAppId = $msGraphAppId\n    ResourceAccess = @(\n      @{\n          Id = $userReadScopeId\n          Type = "Scope"\n      }\n    )\n  }\n)\n\n# ====== EAS\n\nWrite-Host "Creating EAS application registration \'$easDisplayName\'..." -ForegroundColor Cyan\n\n$spaObject = @{ RedirectUris = $spaRedirectUris }\n\n$easRoles, $easOAuth = New-Roles -Roles $easRoleNames\n$easApi = @{\n  RequestedAccessTokenVersion = 2\n  Oauth2PermissionScopes = $easOAuth\n}\n\n$eas = New-MgApplication -DisplayName $easDisplayName `\n    -AppRoles $easRoles `\n    -Api $easApi `\n    -Spa $spaObject `\n    -RequiredResourceAccess $requiredResourceAccess\n\nif ($null -eq $eas) {\n    throw "Failed to create EAS application."\n}\n\nWrite-Host "Application created. appId (clientId): $($eas.AppId)" -ForegroundColor Green\nWrite-Host "Creating EAS service principal for the app..." -ForegroundColor Cyan\n\n$easSp = New-MgServicePrincipal -AppId $eas.AppId\nWrite-Host "Service principal created: objectId = $($easSp.Id)" -ForegroundColor Green\n\n# ======= EWB\n\nWrite-Host "Creating EWB application registration \'$ewbDisplayName\'..." -ForegroundColor Cyan\n\n$ewbRoles, $ewbOAuth = New-Roles -Roles $ewbRoleNames\n$ewbApi = @{\n  RequestedAccessTokenVersion = 2\n  Oauth2PermissionScopes = $ewbOAuth\n}\n\n$ewb = New-MgApplication -DisplayName $ewbDisplayName `\n    -AppRoles $ewbRoles `\n    -Api $ewbApi `\n    -RequiredResourceAccess $requiredResourceAccess\n\nif ($null -eq $ewb) {\n    throw "Failed to create EWB application."\n}\n\nWrite-Host "Application created. appId (clientId): $($ewb.AppId)" -ForegroundColor Green\nWrite-Host "Creating EAS service principal for the app..." -ForegroundColor Cyan\n\n$ewbSp = New-MgServicePrincipal -AppId $ewb.AppId\nWrite-Host "Service principal created: objectId = $($ewbSp.Id)" -ForegroundColor Green\n\n# ======= Assign roles\n\nforeach ($r in $ewbRoles) {\n  New-MgServicePrincipalAppRoleAssignment `\n    -ServicePrincipalId $easSp.Id `\n    -PrincipalId $easSp.Id `\n    -ResourceId $ewbSp.Id `\n    -AppRoleId $r.Id\n}\n\n# ======= Final Config\n\n$frontend = @{\n  authType         = "entraid"\n  domain           = "https://login.microsoftonline.com/${tenantId}/v2.0"\n  clientId         = $eas.AppId\n  audience         = $eas.AppId\n}\n\n$trustedIssuers = @(\n  "https://login.microsoftonline.com/${tenantId}/v2.0"\n) + $spaRedirectUris\n\n$easConfig = @{\n  method         = "entraid"\n  audience       = $eas.AppId\n  trustedIssuers = $trustedIssuers\n}\n\n$ewbConfig = @{\n  authType       = "entraid"\n  audience       = $ewb.AppId\n  trustedIssuers = $trustedIssuers\n}\n\nWrite-Host "EAS Frontend Config" -ForegroundColor Green\nWrite-Host (ConvertTo-Json -InputObject $frontend)\n\nWrite-Host "EAS Auth Config" -ForegroundColor Green\nWrite-Host (ConvertTo-Json -InputObject $easConfig)\n\nWrite-Host "EWB Auth Config" -ForegroundColor Green\nWrite-Host (ConvertTo-Json -InputObject $ewbConfig)\n')),(0,r.kt)("p",null,"The output of the above script will look something like this."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-text"},'EAS Frontend Config\n{\n  "audience": "fce16e12-2eaa-4f5c-866b-bd4d08de23ea",\n  "domain": "https://login.microsoftonline.com/d884eee1-c96f-4701-8103-2ba4346db120/v2.0",\n  "clientId": "fce16e12-2eaa-4f5c-866b-bd4d08de23ea",\n  "authType": "entraid"\n}\nEAS Auth Config\n{\n  "trustedIssuers": [\n    "https://login.microsoftonline.com/d884eee1-c96f-4701-8103-2ba4346db120/v2.0",\n    "https://your-production-app.example.com"\n  ],\n  "audience": "fce16e12-2eaa-4f5c-866b-bd4d08de23ea",\n  "method": "entraid"\n}\nEWB Auth Config\n{\n  "audience": "6744e920-f146-4049-b80f-8e17888a3f7b",\n  "trustedIssuers": [\n    "https://login.microsoftonline.com/d884eee1-c96f-4701-8103-2ba4346db120/v2.0",\n    "https://your-production-app.example.com"\n  ],\n  "authType": "entraid"\n}\n')),(0,r.kt)("p",null,"Using the above output, refer to the configuration documentation in the relevant applications to configure authentication"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"https://zepben.github.io/evolve/docs/eas-web-client"},"Evolve Web Server Client")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"/evolve/docs/evolve-app-server/2.7.0/config"},"Evolve App Server")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"https://zepben.github.io/evolve/docs/energy-workbench-server/"},"Energy Workbench Server"))))}d.isMDXComponent=!0}}]);