"use strict";(self.webpackChunkewb_app_server_doco=self.webpackChunkewb_app_server_doco||[]).push([[7235],{3905:(e,t,n)=>{n.d(t,{Zo:()=>c,kt:()=>g});var r=n(7294);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,r,i=function(e,t){if(null==e)return{};var n,r,i={},a=Object.keys(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var l=r.createContext({}),p=function(e){var t=r.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},c=function(e){var t=p(e.components);return r.createElement(l.Provider,{value:t},e.children)},u="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},m=r.forwardRef((function(e,t){var n=e.components,i=e.mdxType,a=e.originalType,l=e.parentName,c=s(e,["components","mdxType","originalType","parentName"]),u=p(n),m=i,g=u["".concat(l,".").concat(m)]||u[m]||d[m]||a;return n?r.createElement(g,o(o({ref:t},c),{},{components:n})):r.createElement(g,o({ref:t},c))}));function g(e,t){var n=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var a=n.length,o=new Array(a);o[0]=m;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s[u]="string"==typeof e?e:i,o[1]=s;for(var p=2;p<a;p++)o[p]=n[p];return r.createElement.apply(null,o)}return r.createElement.apply(null,n)}m.displayName="MDXCreateElement"},3614:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>o,default:()=>d,frontMatter:()=>a,metadata:()=>s,toc:()=>p});var r=n(7462),i=(n(7294),n(3905));const a={id:"metrics-api",slug:"/api/graphql/metrics",title:"Metrics",hide_title:!0},o=void 0,s={unversionedId:"api/graphql/metrics-api",id:"version-2.2.0/api/graphql/metrics-api",title:"Metrics",description:"Metrics API",source:"@site/versioned_docs/version-2.2.0/api/graphql/metrics.mdx",sourceDirName:"api/graphql",slug:"/api/graphql/metrics",permalink:"/evolve/docs/evolve-app-server/2.2.0/api/graphql/metrics",draft:!1,tags:[],version:"2.2.0",frontMatter:{id:"metrics-api",slug:"/api/graphql/metrics",title:"Metrics",hide_title:!0},sidebar:"sidebar",previous:{title:"SincalModel",permalink:"/evolve/docs/evolve-app-server/2.2.0/api/sincal-model"},next:{title:"Hosting Capacity Mutations",permalink:"/evolve/docs/evolve-app-server/2.2.0/api/graphql/hosting-capacity-mutations"}},l={},p=[{value:"Metrics API",id:"metrics-api",level:2},{value:"Queries",id:"queries",level:2},{value:"Types",id:"types",level:2}],c={toc:p},u="wrapper";function d(e){let{components:t,...n}=e;return(0,i.kt)(u,(0,r.Z)({},c,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h2",{id:"metrics-api"},"Metrics API"),(0,i.kt)("p",null,"The Metrics component of the GraphQL API grants read-access to the metrics database. The GraphQL API is served at ",(0,i.kt)("inlineCode",{parentName:"p"},"/api/graphql"),"."),(0,i.kt)("h2",{id:"queries"},"Queries"),(0,i.kt)("p",null,"The Metrics component of the GraphQL API comprises the following queries:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"getAllJobs: [IngestionJob]"),": Gets all ingestion jobs' ID and metadata in reverse-chronological order."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"getNewestJob: IngestionJob?"),": Gets the newest ingestion job's ID and metadata. If no jobs are in the metrics database, this returns null."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"getSources(jobId: string): [JobSource]"),": Gets data sources for an ingestion job by ID."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"getMetrics(jobId: string, containerType: ContainerType, containerId: string): [Metric]"),": Gets metrics for a network container emitted by an ingestion job.")),(0,i.kt)("h2",{id:"types"},"Types"),(0,i.kt)("p",null,"The input and response types for the queries are as follows:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"ContainerType = TOTAL // Whole network\n    | GeographicalRegion // Everything inside a geographical region\n    | SubGeographicalRegion // Everything inside a sub-geographical region\n    | SubstationTotal // Everything inside and downstream of a substation\n    | Substation // Everything inside a substation\n    | FeederTotal // Everything inside and downstream of a feeder line\n    | Feeder // Everything inside a feeder line\n    | LvFeeder // Everything inside a contiguous LV network\n")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},'IngestionJob = {\n    id: string, // UUID of the ingestion job\n    application: string, // Name of the ingestor application used\n    applicationVersion: string, // Version of the ingestor application used\n    source: string, // Short description of the source data (e.g. "ExampleEnergy 2024 HV/LV")\n    startTime: string // RFC 3339 timestamp of when the ingestor application started\n}\n')),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"JobSource = {\n    name: string, // Name of the data source. This will be unique within each ingestion job.\n    fileHash: string?, // Optional SHA-256 hash of the data source in hexadecimal\n    timestamp: string? // RFC 3339 timestamp of when the data source was exported\n}\n")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"Metric = {\n    name: string, // Name of the metric. This will be unique within each network container for each ingestion job.\n    value: double, // Value of the metric\n}\n")))}d.isMDXComponent=!0}}]);