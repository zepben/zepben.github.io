"use strict";(self.webpackChunkewb_app_server_doco=self.webpackChunkewb_app_server_doco||[]).push([[5531],{3905:(e,t,i)=>{i.d(t,{Zo:()=>s,kt:()=>y});var n=i(7294);function a(e,t,i){return t in e?Object.defineProperty(e,t,{value:i,enumerable:!0,configurable:!0,writable:!0}):e[t]=i,e}function r(e,t){var i=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),i.push.apply(i,n)}return i}function o(e){for(var t=1;t<arguments.length;t++){var i=null!=arguments[t]?arguments[t]:{};t%2?r(Object(i),!0).forEach((function(t){a(e,t,i[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(i)):r(Object(i)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(i,t))}))}return e}function p(e,t){if(null==e)return{};var i,n,a=function(e,t){if(null==e)return{};var i,n,a={},r=Object.keys(e);for(n=0;n<r.length;n++)i=r[n],t.indexOf(i)>=0||(a[i]=e[i]);return a}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(n=0;n<r.length;n++)i=r[n],t.indexOf(i)>=0||Object.prototype.propertyIsEnumerable.call(e,i)&&(a[i]=e[i])}return a}var l=n.createContext({}),c=function(e){var t=n.useContext(l),i=t;return e&&(i="function"==typeof e?e(t):o(o({},t),e)),i},s=function(e){var t=c(e.components);return n.createElement(l.Provider,{value:t},e.children)},u="mdxType",g={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},m=n.forwardRef((function(e,t){var i=e.components,a=e.mdxType,r=e.originalType,l=e.parentName,s=p(e,["components","mdxType","originalType","parentName"]),u=c(i),m=a,y=u["".concat(l,".").concat(m)]||u[m]||g[m]||r;return i?n.createElement(y,o(o({ref:t},s),{},{components:i})):n.createElement(y,o({ref:t},s))}));function y(e,t){var i=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var r=i.length,o=new Array(r);o[0]=m;var p={};for(var l in t)hasOwnProperty.call(t,l)&&(p[l]=t[l]);p.originalType=e,p[u]="string"==typeof e?e:a,o[1]=p;for(var c=2;c<r;c++)o[c]=i[c];return n.createElement.apply(null,o)}return n.createElement.apply(null,i)}m.displayName="MDXCreateElement"},1529:(e,t,i)=>{i.r(t),i.d(t,{assets:()=>l,contentTitle:()=>o,default:()=>g,frontMatter:()=>r,metadata:()=>p,toc:()=>c});var n=i(7462),a=(i(7294),i(3905));const r={id:"hosting-capacity-queries-api",slug:"/api/graphql/hosting-capacity-queries",title:"Hosting Capacity Queries",hide_title:!0},o=void 0,p={unversionedId:"api/graphql/hosting-capacity-queries-api",id:"version-2.7.0/api/graphql/hosting-capacity-queries-api",title:"Hosting Capacity Queries",description:"Hosting Capacity Queries API",source:"@site/versioned_docs/version-2.7.0/api/graphql/hostingcapacityqueries.mdx",sourceDirName:"api/graphql",slug:"/api/graphql/hosting-capacity-queries",permalink:"/evolve/docs/evolve-app-server/2.7.0/api/graphql/hosting-capacity-queries",draft:!1,tags:[],version:"2.7.0",frontMatter:{id:"hosting-capacity-queries-api",slug:"/api/graphql/hosting-capacity-queries",title:"Hosting Capacity Queries",hide_title:!0}},l={},c=[{value:"Hosting Capacity Queries API",id:"hosting-capacity-queries-api",level:2},{value:"Queries",id:"queries",level:2}],s={toc:c},u="wrapper";function g(e){let{components:t,...i}=e;return(0,a.kt)(u,(0,n.Z)({},s,i,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h2",{id:"hosting-capacity-queries-api"},"Hosting Capacity Queries API"),(0,a.kt)("p",null,"The Hosting Capacity Queries of the GraphQL API grants the ability to execute and cancel hosting capacity work packages and generate diffs between two work packages. The GraphQL API is served at ",(0,a.kt)("inlineCode",{parentName:"p"},"/api/graphql"),"."),(0,a.kt)("h2",{id:"queries"},"Queries"),(0,a.kt)("p",null,"The Hosting Capacity Queries component of the GraphQL API comprises the following queries:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"getWorkPackageProgress(env: DataFetchingEnvironment): GqlWorkPackagesProgress"),": Returns a hosting capacity work package progress information."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"getWorkPackageCostEstimation(input: WorkPackageInput): String"),": Returns an estimated cost of the submitted hosting capacity work package."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"getOpportunities(env: DataFetchingEnvironment, year: Int? = null): List<GqlOpportunitiesByYear>"),": Retrieve all Opportunities available for a specific year."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"getOpportunityLocations(env: DataFetchingEnvironment, year: Int? = null): List<GqlOpportunityLocation>"),": Retrieve all opportunity locations available for a specific year."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"getOpportunityLocations(env: DataFetchingEnvironment, year: Int? = null): List<GqlOpportunityLocation>"),": Retrieve all opportunity locations available for a specific year."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"getOpportunity(env: DataFetchingEnvironment, id: String): GqlOpportunity?"),": Retrieve Opportunities by id."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"getOpportunitiesForEquipment(env: DataFetchingEnvironment, mRID: String): List<GqlOpportunity>"),": Retrieve Opportunities by attached conducting equipment mRID."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"getDurationCurves(env: DataFetchingEnvironment, workPackageId: String, scenario: String, feeder: String, year: Int, conductingEquipmentMrid: String): List<GqlDurationCurveByTerminal>"),": Retrieve duration curves for a single piece of equipment in a specific SYF."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"getWorkPackages(env: DataFetchingEnvironment, limit: OptionalInput<Int>, offset: OptionalInput<Long>, filter: OptionalInput<GqlHcWorkPackagesFilter>, sort: OptionalInput<GqlHcWorkPackagesSortCriteria>): GqlHcWorkPackagePage"),": Retrieve a page of hosting capacity work packages, with optional limit and offset, and optional filtering."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"getWorkPackageById(env: DataFetchingEnvironment, id: ID): GqlHcWorkPackage?"),": Retrieve a hosting capacity work package by ID."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"getWorkPackageTree(env: DataFetchingEnvironment, id: ID): GqlWorkPackageTree"),": Retrieve a work package tree with its ancestors and immediate children."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"getScenarioConfigurations(env: DataFetchingEnvironment, limit: OptionalInput<Int>, offset: OptionalInput<Long>, filter: OptionalInput<GqlHcScenarioConfigsFilter>): GqlHcScenarioConfigsPage"),": Retrieve a page scenario configurations from the hosting capacity input database."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"hostingCapacityFileUploadUrl(env: DataFetchingEnvironment, filename: String, fileType: HostingCapacityFileType): GqlUploadUrlResponse"),": Generate a pre-signed URL to upload hosting capacity file to the storage location. Returns the pre-signed URL along with the final file path as it will be referenced by EAS.")))}g.isMDXComponent=!0}}]);