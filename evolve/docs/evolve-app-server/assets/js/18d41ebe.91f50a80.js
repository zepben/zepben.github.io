"use strict";(self.webpackChunkewb_app_server_doco=self.webpackChunkewb_app_server_doco||[]).push([[4241],{3905:(e,t,n)=>{n.d(t,{Zo:()=>d,kt:()=>m});var a=n(7294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},o=Object.keys(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var l=a.createContext({}),p=function(e){var t=a.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},d=function(e){var t=p(e.components);return a.createElement(l.Provider,{value:t},e.children)},c="mdxType",k={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},u=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,o=e.originalType,l=e.parentName,d=s(e,["components","mdxType","originalType","parentName"]),c=p(n),u=r,m=c["".concat(l,".").concat(u)]||c[u]||k[u]||o;return n?a.createElement(m,i(i({ref:t},d),{},{components:n})):a.createElement(m,i({ref:t},d))}));function m(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var o=n.length,i=new Array(o);i[0]=u;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s[c]="string"==typeof e?e:r,i[1]=s;for(var p=2;p<o;p++)i[p]=n[p];return a.createElement.apply(null,i)}return a.createElement.apply(null,n)}u.displayName="MDXCreateElement"},4172:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>i,default:()=>k,frontMatter:()=>o,metadata:()=>s,toc:()=>p});var a=n(7462),r=(n(7294),n(3905));const o={id:"personal-access-tokens",title:"Personal Access Tokens",slug:"/personal-access-tokens"},i=void 0,s={unversionedId:"personal-access-tokens",id:"version-2.5.0/personal-access-tokens",title:"Personal Access Tokens",description:"Personal Access Tokens (PATs) are JSON Web Tokens (JWT) that can be used as bearer tokens to authenticate API requests made to EAS and EWB.",source:"@site/versioned_docs/version-2.5.0/personal-access-tokens.md",sourceDirName:".",slug:"/personal-access-tokens",permalink:"/evolve/docs/evolve-app-server/2.5.0/personal-access-tokens",draft:!1,tags:[],version:"2.5.0",frontMatter:{id:"personal-access-tokens",title:"Personal Access Tokens",slug:"/personal-access-tokens"},sidebar:"sidebar",previous:{title:"Permissions",permalink:"/evolve/docs/evolve-app-server/2.5.0/permissions"},next:{title:"Authentication",permalink:"/evolve/docs/evolve-app-server/2.5.0/authentication"}},l={},p=[{value:"User Tokens",id:"user-tokens",level:3},{value:"Machine Tokens",id:"machine-tokens",level:3},{value:"EAS Configuration",id:"eas-configuration",level:3},{value:"Signing Keys",id:"signing-keys",level:3},{value:"Creating Tokens with GraphQL",id:"creating-tokens-with-graphql",level:3},{value:"Using EAS Access Tokens With The EWB SDK",id:"using-eas-access-tokens-with-the-ewb-sdk",level:3}],d={toc:p},c="wrapper";function k(e){let{components:t,...o}=e;return(0,r.kt)(c,(0,a.Z)({},d,o,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("p",null,"Personal Access Tokens (PATs) are JSON Web Tokens (JWT) that can be used as bearer tokens to authenticate API requests made to EAS and EWB.\nEAS can generate two types of Access Tokens, ",(0,r.kt)("strong",{parentName:"p"},"User Tokens")," and ",(0,r.kt)("strong",{parentName:"p"},"Machine Tokens"),"."),(0,r.kt)("h3",{id:"user-tokens"},"User Tokens"),(0,r.kt)("admonition",{type:"info"},(0,r.kt)("p",{parentName:"admonition"},"User tokens expire after 30 Days.")),(0,r.kt)("p",null,"User tokens are intended for use by individual users. All users can generate Personal Access Tokens with a subset of their ",(0,r.kt)("a",{parentName:"p",href:"./permissions#default-external-roles"},"External Roles")," via the ",(0,r.kt)("inlineCode",{parentName:"p"},"https://<EAS_DOMAIN>/profile/user-tokens")," page in the EAS web app.\nThese tokens are associated with the user that originally created them and all requests made with these tokens are made on behalf of that user. There is no limit to the number of tokens a user can generate."),(0,r.kt)("p",null,(0,r.kt)("img",{alt:"image",src:n(9369).Z,width:"720",height:"359"})),(0,r.kt)("h3",{id:"machine-tokens"},"Machine Tokens"),(0,r.kt)("admonition",{type:"warning"},(0,r.kt)("p",{parentName:"admonition"},"Machine tokens do not expire and cannot be individually revoked.")),(0,r.kt)("p",null,"Machine tokens are intended for long-running or shared services that need to connect to EAS or EWB.\nMachine tokens can only be created by an administrator with the ",(0,r.kt)("inlineCode",{parentName:"p"},"SUPER_ADMIN")," or ",(0,r.kt)("inlineCode",{parentName:"p"},"INTEGRATION_ADMIN")," roles via the ",(0,r.kt)("inlineCode",{parentName:"p"},"https://<EAS_DOMAIN>/admin/machine-tokens")," page in the EAS web app."),(0,r.kt)("p",null,"Machine tokens can be created with any combination of ",(0,r.kt)("a",{parentName:"p",href:"./permissions#default-external-roles"},"External Roles")," regardless of the roles of the administrator creating them."),(0,r.kt)("p",null,'Machine tokens are not associated with any existing user, instead a new EAS "Machine Token User" is created for each machine token.\nRequests performed using these tokens are made on behalf of its associated "Machine Token User". A full list of "Machine Token Users" can be found via the ',(0,r.kt)("inlineCode",{parentName:"p"},"https://<EAS_DOMAIN>/admin/machine-tokens")," page."),(0,r.kt)("p",null,(0,r.kt)("img",{alt:"image",src:n(4333).Z,width:"583",height:"390"})),(0,r.kt)("h3",{id:"eas-configuration"},"EAS Configuration"),(0,r.kt)("admonition",{type:"info"},(0,r.kt)("p",{parentName:"admonition"},"Personal Access Tokens can be configured in combination with both Auth0 and EntraID.")),(0,r.kt)("p",null,"To enable the use of Personal Access Tokens with EAS, the following configuration is required to be updated."),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"jwks.issuer"),': This will be used to populate the Issuer ("iss") claim in the generated tokens. This should be the URL of the EAS server.'),(0,r.kt)("admonition",{type:"note"},(0,r.kt)("p",{parentName:"admonition"},"Any services configured to trust tokens generated by EAS will also need to be able to make requests to ",(0,r.kt)("inlineCode",{parentName:"p"},"<jwks.issuer>/.well-known/openid-configuration")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"<jwks.issuer>/.well-known/jwks")," to verify EAS generated tokens.  ")),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"auth.trustedIssuers"),": By default, EAS will not accept tokens it generates. The URL of the EAS server must be added to its list of trustedIssuers just like any other token issuer. This value should match the value set in ",(0,r.kt)("inlineCode",{parentName:"p"},"jwks.issuer"),"."),(0,r.kt)("admonition",{type:"note"},(0,r.kt)("p",{parentName:"admonition"},"Any other service such as EWB that need to accept tokens generated by EAS, also need to have the URL of the EAS server added to their list of trustedIssuers.")),(0,r.kt)("p",null,"Example configuration:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-json"},'{\n    "jwks": {\n        "issuer": "https://dev-env.example.com:7654"\n    },\n   "auth": {\n      "method": "entraid",\n      "trustedIssuers": [\n        "https://login.microsoftonline.com/ee3c421e-56c1-452d-a371-5cd884fd7ca7/v2.0",\n        "https://dev-env.example.com:7654"\n      ],\n      "audience": "d92a9e09-258c-4e53-8b16-5a5b9e02404c"\n   }\n}\n')),(0,r.kt)("p",null,"Full configuration details can be found ",(0,r.kt)("a",{parentName:"p",href:"./config#jwks-config"},"here"),"."),(0,r.kt)("h3",{id:"signing-keys"},"Signing Keys"),(0,r.kt)("p",null,"The signing keys for EAS tokens are generated by EAS and stored in its database. On startup if the EAS database does not contain a key with the name configured in ",(0,r.kt)("inlineCode",{parentName:"p"},"jwks.currentUserSigningKey")," or ",(0,r.kt)("inlineCode",{parentName:"p"},"jwks.currentMachineSigningKey")," it will generate and store a new key with that name on first use. "),(0,r.kt)("p",null,"EAS will provide the public keys for all(previous and current) signing keys found in its database at the JWKS endpoint ",(0,r.kt)("inlineCode",{parentName:"p"},"<EAS_DOMAIN>/.well-known/jwks"),"."),(0,r.kt)("h3",{id:"creating-tokens-with-graphql"},"Creating Tokens with GraphQL"),(0,r.kt)("p",null,"Personal Access Tokens can also be generated via the EAS GraphQL API. The GraphQL API is served at ",(0,r.kt)("inlineCode",{parentName:"p"},"/api/graphql")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-graphql",metastring:'title="User Token"',title:'"User','Token"':!0},'query {\n    createUserApiKey(\n        roles: ["MODELLER"],\n        tokenName: "model_exporter_token"\n    )\n}\n')),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-graphql",metastring:'title="Machine Token"',title:'"Machine','Token"':!0},'query {\n    createMachineApiKey(\n        roles: ["EWB_ADMIN", "MAP_VIEWER"],\n        tokenName: "ewb_controller"\n    )\n}\n')),(0,r.kt)("h3",{id:"using-eas-access-tokens-with-the-ewb-sdk"},"Using EAS Access Tokens With The EWB SDK"),(0,r.kt)("p",null,"To allow the use of EAS generated tokens with the EWB SDK, the following EAS permissions are mapped to the three roles defined by the EWB."),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:"center"},"EAS Permission"),(0,r.kt)("th",{parentName:"tr",align:null},"EWB Role"),(0,r.kt)("th",{parentName:"tr",align:null},"EWB access provided"),(0,r.kt)("th",{parentName:"tr",align:"center"},'Provided by default "External Role"'))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"center"},(0,r.kt)("inlineCode",{parentName:"td"},"EWB:READ")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"read:ewb")),(0,r.kt)("td",{parentName:"tr",align:null},"Access to connect to the network service with a gRPC NetworkConsumerClient. Also to all EWB HTTP REST endpoints (excluding ",(0,r.kt)("inlineCode",{parentName:"td"},"/ewb/api/graphql/customers"),")."),(0,r.kt)("td",{parentName:"tr",align:"center"},(0,r.kt)("inlineCode",{parentName:"td"},"SUPER_ADMIN"),", ",(0,r.kt)("inlineCode",{parentName:"td"},"MAP_VIEWER"))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"center"},(0,r.kt)("inlineCode",{parentName:"td"},"EWB:UPDATE")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"write:ewb")),(0,r.kt)("td",{parentName:"tr",align:null},"Access to connect to the network service with a gRPC UpdateNetworkStateClient."),(0,r.kt)("td",{parentName:"tr",align:"center"},(0,r.kt)("inlineCode",{parentName:"td"},"SUPER_ADMIN"),", ",(0,r.kt)("inlineCode",{parentName:"td"},"EWB_UPDATER"))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"center"},(0,r.kt)("inlineCode",{parentName:"td"},"EWB_CUSTOMER:READ")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"read:customer")),(0,r.kt)("td",{parentName:"tr",align:null},"Access to connect to the customer service with a gRPC CustomerConsumerClient. Also to the customer GraphQL endpoint ",(0,r.kt)("inlineCode",{parentName:"td"},"/ewb/api/graphql/customers"),"."),(0,r.kt)("td",{parentName:"tr",align:"center"},(0,r.kt)("inlineCode",{parentName:"td"},"SUPER_ADMIN"),", ",(0,r.kt)("inlineCode",{parentName:"td"},"EWB_CUSTOMER_VIEWER"))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"center"},(0,r.kt)("inlineCode",{parentName:"td"},"EWB_DIAGRAM:READ")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"read:diagram")),(0,r.kt)("td",{parentName:"tr",align:null},"Access to connect to the diagram service with a gRPC DiagramConsumerClient"),(0,r.kt)("td",{parentName:"tr",align:"center"},(0,r.kt)("inlineCode",{parentName:"td"},"SUPER_ADMIN"),", ",(0,r.kt)("inlineCode",{parentName:"td"},"EWB_DIAGRAM_VIEWER"))))),(0,r.kt)("p",null,'The EWB Roles will be included in a generated token\'s "roles" claim when the ',(0,r.kt)("a",{parentName:"p",href:"./permissions#default-external-roles"},"External Roles")," being assigned to the new token inherit their matching EAS permission."),(0,r.kt)("admonition",{type:"note"},(0,r.kt)("p",{parentName:"admonition"},"This permission check only happens at token creation time and cannot be updated or revoked after the token is created.")))}k.isMDXComponent=!0},4333:(e,t,n)=>{n.d(t,{Z:()=>a});const a=n.p+"assets/images/machine-token-403461eaffd675b70095f4308f3dbf06.png"},9369:(e,t,n)=>{n.d(t,{Z:()=>a});const a=n.p+"assets/images/user-token-884889ade56dd96cd293076456924546.png"}}]);