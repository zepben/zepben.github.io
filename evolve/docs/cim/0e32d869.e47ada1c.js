(window.webpackJsonp=window.webpackJsonp||[]).push([[106],{169:function(e,t,a){"use strict";a.r(t),a.d(t,"frontMatter",(function(){return c})),a.d(t,"metadata",(function(){return i})),a.d(t,"toc",(function(){return o})),a.d(t,"default",(function(){return p}));var n=a(3),r=a(7),l=(a(0),a(2160)),c={title:"IntervalBlock"},i={unversionedId:"cim100/TC57CIM/IEC61968/Metering/IntervalBlock",id:"cim100/TC57CIM/IEC61968/Metering/IntervalBlock",isDocsHomePage:!1,title:"IntervalBlock",description:"Class Description",source:"@site/docs\\cim100\\TC57CIM\\IEC61968\\Metering\\IntervalBlock.md",slug:"/cim100/TC57CIM/IEC61968/Metering/IntervalBlock",permalink:"/evolve/docs/cim/cim100/TC57CIM/IEC61968/Metering/IntervalBlock",version:"current",sidebar:"docs",previous:{title:"EndDeviceInfo",permalink:"/evolve/docs/cim/cim100/TC57CIM/IEC61968/Metering/EndDeviceInfo"},next:{title:"IntervalReading",permalink:"/evolve/docs/cim/cim100/TC57CIM/IEC61968/Metering/IntervalReading"}},o=[{value:"Class Description",id:"class-description",children:[]},{value:"Attributes",id:"attributes",children:[]},{value:"Relationships",id:"relationships",children:[]},{value:"Leaf/Root class",id:"leafroot-class",children:[]},{value:"Associations",id:"associations",children:[]}],b={toc:o};function p(e){var t=e.components,a=Object(r.a)(e,["components"]);return Object(l.a)("wrapper",Object(n.a)({},b,a,{components:t,mdxType:"MDXLayout"}),Object(l.a)("h3",{id:"class-description"},"Class Description"),Object(l.a)("p",null,"Time sequence of readings of the same reading type. Contained interval readings may need conversion through the application of an offset and a scalar defined in associated pending."),Object(l.a)("p",null,"Table 548 shows all association ends of IntervalBlock with other classes."),Object(l.a)("p",null,"Table 548 \u2013 Association ends of Metering::IntervalBlock with other classes"),Object(l.a)("p",null,"Associations"),Object(l.a)("p",null,"name"),Object(l.a)("p",null,"mult to"),Object(l.a)("p",null,"type"),Object(l.a)("p",null,"description"),Object(l.a)("p",null,"0..*"),Object(l.a)("p",null,"PendingCalculation"),Object(l.a)("p",null,"0..1"),Object(l.a)("p",null,"PendingCalculation"),Object(l.a)("p",null,"Pending calculation to apply to interval reading values contained by this block (after which the resulting reading type is different than the original because it reflects the conversion result)."),Object(l.a)("p",null,"0..*"),Object(l.a)("p",null,"IntervalReadings"),Object(l.a)("p",null,"0..*"),Object(l.a)("p",null,"IntervalReading"),Object(l.a)("p",null,"Interval reading contained in this block."),Object(l.a)("p",null,"0..*"),Object(l.a)("p",null,"ReadingType"),Object(l.a)("p",null,"0..1"),Object(l.a)("p",null,"ReadingType"),Object(l.a)("p",null,"Type information for interval reading values contained in this block."),Object(l.a)("p",null,"0..*"),Object(l.a)("p",null,"MeterReading"),Object(l.a)("p",null,"0..1"),Object(l.a)("p",null,"MeterReading"),Object(l.a)("p",null,"Meter reading containing this interval block."),Object(l.a)("p",null,"IntervalReading"),Object(l.a)("p",null,"Data captured at regular intervals of time. Interval data could be captured as incremental data, absolute data, or relative data. The source for the data is usually a tariff quantity or an engineering quantity. Data is typically captured in time-tagged, uniform, fixed-length intervals of 5 min, 10 min, 15 min, 30 min, or 60 min."),Object(l.a)("p",null,'Note: Interval Data is sometimes also called "Interval Data Readings" (IDR).  '),Object(l.a)("h3",{id:"attributes"},"Attributes"),Object(l.a)("p",null,"None  "),Object(l.a)("h3",{id:"relationships"},"Relationships"),Object(l.a)("p",null,Object(l.a)("strong",{parentName:"p"},"Inherits from"),"  "),Object(l.a)("ul",null,Object(l.a)("li",{parentName:"ul"},"None")),Object(l.a)("p",null,Object(l.a)("strong",{parentName:"p"},"Descendant classes"),"  "),Object(l.a)("ul",null,Object(l.a)("li",{parentName:"ul"},"No descendant classes  ")),Object(l.a)("h3",{id:"leafroot-class"},"Leaf/Root class"),Object(l.a)("table",null,Object(l.a)("thead",{parentName:"table"},Object(l.a)("tr",{parentName:"thead"},Object(l.a)("th",Object(n.a)({parentName:"tr"},{align:"center"}),"IsLeaf"),Object(l.a)("th",Object(n.a)({parentName:"tr"},{align:"center"}),"IsRoot"))),Object(l.a)("tbody",{parentName:"table"},Object(l.a)("tr",{parentName:"tbody"},Object(l.a)("td",Object(n.a)({parentName:"tr"},{align:"center"}),"False"),Object(l.a)("td",Object(n.a)({parentName:"tr"},{align:"center"}),"False")))),Object(l.a)("h3",{id:"associations"},"Associations"),Object(l.a)("table",null,Object(l.a)("thead",{parentName:"table"},Object(l.a)("tr",{parentName:"thead"},Object(l.a)("th",Object(n.a)({parentName:"tr"},{align:"left"}),"Source Class"),Object(l.a)("th",Object(n.a)({parentName:"tr"},{align:"left"}),"Cardinality Source"),Object(l.a)("th",Object(n.a)({parentName:"tr"},{align:"left"}),"Target Class"),Object(l.a)("th",Object(n.a)({parentName:"tr"},{align:"left"}),"Cardinality Target"),Object(l.a)("th",Object(n.a)({parentName:"tr"},{align:"left"}),"Source Name"),Object(l.a)("th",Object(n.a)({parentName:"tr"},{align:"left"}),"Source Assoc. Description"),Object(l.a)("th",Object(n.a)({parentName:"tr"},{align:"left"}),"Target Name"),Object(l.a)("th",Object(n.a)({parentName:"tr"},{align:"left"}),"Target Assoc. Description"))),Object(l.a)("tbody",{parentName:"table"},Object(l.a)("tr",{parentName:"tbody"},Object(l.a)("td",Object(n.a)({parentName:"tr"},{align:"left"}),Object(l.a)("a",Object(n.a)({parentName:"td"},{href:"/cim100/TC57CIM/IEC61968/Metering/IntervalBlock"}),"IntervalBlock")),Object(l.a)("td",Object(n.a)({parentName:"tr"},{align:"left"}),"0..*"),Object(l.a)("td",Object(n.a)({parentName:"tr"},{align:"left"}),Object(l.a)("a",Object(n.a)({parentName:"td"},{href:"/cim100/TC57CIM/IEC61968/Metering/IntervalReading"}),"IntervalReading")),Object(l.a)("td",Object(n.a)({parentName:"tr"},{align:"left"}),"0..*"),Object(l.a)("td",Object(n.a)({parentName:"tr"},{align:"left"}),"IntervalBlocks"),Object(l.a)("td",Object(n.a)({parentName:"tr"},{align:"left"}),"All blocks containing this interval reading."),Object(l.a)("td",Object(n.a)({parentName:"tr"},{align:"left"}),"IntervalReadings"),Object(l.a)("td",Object(n.a)({parentName:"tr"},{align:"left"}),"Interval reading contained in this block.")),Object(l.a)("tr",{parentName:"tbody"},Object(l.a)("td",Object(n.a)({parentName:"tr"},{align:"left"}),Object(l.a)("a",Object(n.a)({parentName:"td"},{href:"/cim100/TC57CIM/IEC61968/Metering/IntervalBlock"}),"IntervalBlock")),Object(l.a)("td",Object(n.a)({parentName:"tr"},{align:"left"}),"0..*"),Object(l.a)("td",Object(n.a)({parentName:"tr"},{align:"left"}),Object(l.a)("a",Object(n.a)({parentName:"td"},{href:"/cim100/TC57CIM/IEC61968/Metering/MeterReading"}),"MeterReading")),Object(l.a)("td",Object(n.a)({parentName:"tr"},{align:"left"}),"0..1"),Object(l.a)("td",Object(n.a)({parentName:"tr"},{align:"left"}),"IntervalBlocks"),Object(l.a)("td",Object(n.a)({parentName:"tr"},{align:"left"}),"All interval blocks contained in this meter reading."),Object(l.a)("td",Object(n.a)({parentName:"tr"},{align:"left"}),"MeterReading"),Object(l.a)("td",Object(n.a)({parentName:"tr"},{align:"left"}),"Meter reading containing this interval block.")),Object(l.a)("tr",{parentName:"tbody"},Object(l.a)("td",Object(n.a)({parentName:"tr"},{align:"left"}),Object(l.a)("a",Object(n.a)({parentName:"td"},{href:"/cim100/TC57CIM/IEC61968/Metering/IntervalBlock"}),"IntervalBlock")),Object(l.a)("td",Object(n.a)({parentName:"tr"},{align:"left"}),"0..*"),Object(l.a)("td",Object(n.a)({parentName:"tr"},{align:"left"}),Object(l.a)("a",Object(n.a)({parentName:"td"},{href:"/cim100/TC57CIM/IEC61968/Metering/PendingCalculation"}),"PendingCalculation")),Object(l.a)("td",Object(n.a)({parentName:"tr"},{align:"left"}),"0..1"),Object(l.a)("td",Object(n.a)({parentName:"tr"},{align:"left"}),"IntervalBlocks"),Object(l.a)("td",Object(n.a)({parentName:"tr"},{align:"left"}),"All blocks of interval reading values to which this pending conversion applies."),Object(l.a)("td",Object(n.a)({parentName:"tr"},{align:"left"}),"PendingCalculation"),Object(l.a)("td",Object(n.a)({parentName:"tr"},{align:"left"}),"Pending calculation to apply to interval reading values contained by this block (after which the resulting reading type is different than the original because it reflects the conversion result).")),Object(l.a)("tr",{parentName:"tbody"},Object(l.a)("td",Object(n.a)({parentName:"tr"},{align:"left"}),Object(l.a)("a",Object(n.a)({parentName:"td"},{href:"/cim100/TC57CIM/IEC61968/Metering/IntervalBlock"}),"IntervalBlock")),Object(l.a)("td",Object(n.a)({parentName:"tr"},{align:"left"}),"0..*"),Object(l.a)("td",Object(n.a)({parentName:"tr"},{align:"left"}),Object(l.a)("a",Object(n.a)({parentName:"td"},{href:"/cim100/TC57CIM/IEC61968/Metering/ReadingType"}),"ReadingType")),Object(l.a)("td",Object(n.a)({parentName:"tr"},{align:"left"}),"0..1"),Object(l.a)("td",Object(n.a)({parentName:"tr"},{align:"left"}),"IntervalBlocks"),Object(l.a)("td",Object(n.a)({parentName:"tr"},{align:"left"}),"All blocks containing interval reading values with this type information."),Object(l.a)("td",Object(n.a)({parentName:"tr"},{align:"left"}),"ReadingType"),Object(l.a)("td",Object(n.a)({parentName:"tr"},{align:"left"}),"Type information for interval reading values contained in this block.")))))}p.isMDXComponent=!0},2160:function(e,t,a){"use strict";a.d(t,"a",(function(){return d}));var n=a(0),r=a.n(n);function l(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function c(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function i(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?c(Object(a),!0).forEach((function(t){l(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):c(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function o(e,t){if(null==e)return{};var a,n,r=function(e,t){if(null==e)return{};var a,n,r={},l=Object.keys(e);for(n=0;n<l.length;n++)a=l[n],t.indexOf(a)>=0||(r[a]=e[a]);return r}(e,t);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(n=0;n<l.length;n++)a=l[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(r[a]=e[a])}return r}var b=r.a.createContext({}),p=function(e){var t=r.a.useContext(b),a=t;return e&&(a="function"==typeof e?e(t):i({},t,{},e)),a},s={inlineCode:"code",wrapper:function(e){var t=e.children;return r.a.createElement(r.a.Fragment,{},t)}},O=Object(n.forwardRef)((function(e,t){var a=e.components,n=e.mdxType,l=e.originalType,c=e.parentName,b=o(e,["components","mdxType","originalType","parentName"]),O=p(a),d=n,j=O["".concat(c,".").concat(d)]||O[d]||s[d]||l;return a?r.a.createElement(j,i({ref:t},b,{components:a})):r.a.createElement(j,i({ref:t},b))}));function d(e,t){var a=arguments,n=t&&t.mdxType;if("string"==typeof e||n){var l=a.length,c=new Array(l);c[0]=O;var i={};for(var o in t)hasOwnProperty.call(t,o)&&(i[o]=t[o]);i.originalType=e,i.mdxType="string"==typeof e?e:n,c[1]=i;for(var b=2;b<l;b++)c[b]=a[b];return r.a.createElement.apply(null,c)}return r.a.createElement.apply(null,a)}O.displayName="MDXCreateElement"}}]);