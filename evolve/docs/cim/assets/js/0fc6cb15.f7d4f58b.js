"use strict";(self.webpackChunkcim_doco=self.webpackChunkcim_doco||[]).push([[45187],{15680:(e,t,n)=>{n.d(t,{xA:()=>c,yg:()=>g});var i=n(96540);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function r(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);t&&(i=i.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,i)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?r(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,i,a=function(e,t){if(null==e)return{};var n,i,a={},r=Object.keys(e);for(i=0;i<r.length;i++)n=r[i],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(i=0;i<r.length;i++)n=r[i],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var s=i.createContext({}),C=function(e){var t=i.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},c=function(e){var t=C(e.components);return i.createElement(s.Provider,{value:t},e.children)},d="mdxType",p={inlineCode:"code",wrapper:function(e){var t=e.children;return i.createElement(i.Fragment,{},t)}},u=i.forwardRef((function(e,t){var n=e.components,a=e.mdxType,r=e.originalType,s=e.parentName,c=l(e,["components","mdxType","originalType","parentName"]),d=C(n),u=a,g=d["".concat(s,".").concat(u)]||d[u]||p[u]||r;return n?i.createElement(g,o(o({ref:t},c),{},{components:n})):i.createElement(g,o({ref:t},c))}));function g(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var r=n.length,o=new Array(r);o[0]=u;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l[d]="string"==typeof e?e:a,o[1]=l;for(var C=2;C<r;C++)o[C]=n[C];return i.createElement.apply(null,o)}return i.createElement.apply(null,n)}u.displayName="MDXCreateElement"},65531:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>C,contentTitle:()=>l,default:()=>u,frontMatter:()=>o,metadata:()=>s,toc:()=>c});var i=n(58168),a=(n(96540),n(15680)),r=n(75489);const o={title:"ICCPProvidedPoint",hide_table_of_contents:!0,slug:"ICCPProvidedPoint",sidebar_position:0},l=void 0,s={unversionedId:"cim100/TC57CIM/IEC61970/Base/ICCPConfiguration/ICCPProvidedPoint",id:"cim100/TC57CIM/IEC61970/Base/ICCPConfiguration/ICCPProvidedPoint",title:"ICCPProvidedPoint",description:"Class Description",source:"@site/docs/cim100/TC57CIM/IEC61970/Base/ICCPConfiguration/ICCPProvidedPoint.mdx",sourceDirName:"cim100/TC57CIM/IEC61970/Base/ICCPConfiguration",slug:"/cim100/TC57CIM/IEC61970/Base/ICCPConfiguration/ICCPProvidedPoint",permalink:"/evolve/docs/cim/cim100/TC57CIM/IEC61970/Base/ICCPConfiguration/ICCPProvidedPoint",draft:!1,tags:[],version:"current",sidebarPosition:0,frontMatter:{title:"ICCPProvidedPoint",hide_table_of_contents:!0,slug:"ICCPProvidedPoint",sidebar_position:0},sidebar:"docs",previous:{title:"ICCPPointKind",permalink:"/evolve/docs/cim/cim100/TC57CIM/IEC61970/Base/ICCPConfiguration/ICCPPointKind"},next:{title:"ICCPQualityKind",permalink:"/evolve/docs/cim/cim100/TC57CIM/IEC61970/Base/ICCPConfiguration/ICCPQualityKind"}},C={},c=[{value:"Class Description",id:"class-description",level:2},{value:"Attributes",id:"attributes",level:2},{value:"Relationships",id:"relationships",level:2},{value:"Ancestors",id:"ancestors",level:3},{value:"Descendents",id:"descendents",level:3},{value:"Associations",id:"associations",level:2}],d={toc:c},p="wrapper";function u(e){let{components:t,...n}=e;return(0,a.yg)(p,(0,i.A)({},d,n,{components:t,mdxType:"MDXLayout"}),(0,a.yg)("h2",{id:"class-description"},"Class Description"),(0,a.yg)("p",null,"The IdentifiedObject.name attribute must have a value.  The name attribute shall be used as the DataValue name used for the exchange."),(0,a.yg)("h2",{id:"attributes"},"Attributes"),(0,a.yg)("table",null,(0,a.yg)("thead",{parentName:"table"},(0,a.yg)("tr",{parentName:"thead"},(0,a.yg)("th",{parentName:"tr",align:null},"Name"),(0,a.yg)("th",{parentName:"tr",align:null},"Type"),(0,a.yg)("th",{parentName:"tr",align:null},"Description"))),(0,a.yg)("tbody",{parentName:"table"},(0,a.yg)("tr",{parentName:"tbody"},(0,a.yg)("td",{parentName:"tr",align:null},"accessPriviledge"),(0,a.yg)("td",{parentName:"tr",align:null},(0,a.yg)(r.A,{to:"/cim100/TC57CIM/IEC61970/Base/ICCPConfiguration/ICCPAccessPrivilegeKind",mdxType:"Link"},"ICCPAccessPrivilegeKind")),(0,a.yg)("td",{parentName:"tr",align:null},"Provides information regarding the access privileges allowed to the ICCP Point.")),(0,a.yg)("tr",{parentName:"tbody"},(0,a.yg)("td",{parentName:"tr",align:null},"pointQuality"),(0,a.yg)("td",{parentName:"tr",align:null},(0,a.yg)(r.A,{to:"/cim100/TC57CIM/IEC61970/Base/ICCPConfiguration/ICCPQualityKind",mdxType:"Link"},"ICCPQualityKind")),(0,a.yg)("td",{parentName:"tr",align:null},"Specifies the type of ICCP quality that will be conveyed as part of the ICCP Point.")),(0,a.yg)("tr",{parentName:"tbody"},(0,a.yg)("td",{parentName:"tr",align:null},"pointType"),(0,a.yg)("td",{parentName:"tr",align:null},(0,a.yg)(r.A,{to:"/cim100/TC57CIM/IEC61970/Base/ICCPConfiguration/ICCPPointKind",mdxType:"Link"},"ICCPPointKind")),(0,a.yg)("td",{parentName:"tr",align:null},"Indicates the ICCP Point type that is to be conveyed.")))),(0,a.yg)("p",null,"A CIM AccumlatorValue  shall be mapped to an ICCP real.\nA CIM AnalogValue shall be mapped to an ICCP real.\nA CIM DiscreteValue shall be mapped to either an ICCP real, state, stateSupplemental, or either protection event type.\nA CIM StringMeasurementValue does not have a standardized mapping. |\n| scope | ",(0,a.yg)(r.A,{to:"/cim100/TC57CIM/IEC61970/Base/ICCPConfiguration/ICCPScopeKind",mdxType:"Link"},"ICCPScopeKind")," | Indicates if the Point is global scoped (e.g. VCC) or accessible only to the Bilateral table peer (e.g. ICC). |"),(0,a.yg)("h2",{id:"relationships"},"Relationships"),(0,a.yg)("h3",{id:"ancestors"},"Ancestors"),(0,a.yg)("ul",null,(0,a.yg)("li",{parentName:"ul"},(0,a.yg)(r.A,{to:"/cim100/TC57CIM/IEC61970/Base/ICCPConfiguration/ProvidedBilateralPoint",mdxType:"Link"},"ProvidedBilateralPoint"))),(0,a.yg)("h3",{id:"descendents"},"Descendents"),(0,a.yg)("p",null,"No descendent classes"),(0,a.yg)("h2",{id:"associations"},"Associations"),(0,a.yg)("p",null,"None"))}u.isMDXComponent=!0}}]);